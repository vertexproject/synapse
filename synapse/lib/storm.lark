// Grammar for the Storm Query Language (and miscellaneous bits)

%import common.ESCAPED_STRING
%ignore CCOMMENT
%ignore CPPCOMMENT
%ignore WS

WS: /[\s]/+

// C comment: /* */
// From https://stackoverflow.com/a/36328890/6518334
CCOMMENT.2: /\/\*+[^*]*\*+([^\/*][^*]*\*+)*\//

// C++ comment: //
CPPCOMMENT.2: /\/\/[^\n]*/

// Lark Grammar Notes:
// Lark uses standard EBNF notation with a few extra bells and whistles:
// * Rules and terminals that start with an underscore are not presented in the final parse tree.  The underscored
//   terminals are skipped entirely, and the underscored rule nodes are replaced by their children.
// * Rules ending with a .<num> are higher priority than other rules.
// * Rules starting with a ? have their parse tree node replaced by their children if they have exactly 1 child.

// Style Note:
// All string constants with length > 1 should have an explicit terminal name.  Lark already has a
// name defined for all 1-character strings.  Lark makes __ANON tokens for unnamed terminals.  We don't want those
// because it makes storm syntax errors harder to decipher.

// Entry point for an unadorned storm query
query: "|"? _querystart?
lookup: looklist [ "|" query ]

_querystart: _querystart "|"? (stormcmd | _oper | _editblock)
    | stormcmd | _oper | _editblock

// Edit block: zero or more edit operations inside a single set of square brackets
_editblock: "[" _editoper* "]"

// A single edit operation
_editoper: editnodeadd
            | editpropset | editunivset | edittagpropset | edittagadd
            | editpropdel | editunivdel | edittagpropdel | edittagdel
            | editparens | edgeaddn1 | edgedeln1 | edgeaddn2 | edgedeln2

// Parenthesis in an edit block don't have incoming nodes
editparens: "(" editnodeadd _editoper* ")"
edittagadd: "+" [SETTAGOPER] tagname ["=" _valu]
editunivdel: "-" univprop
edittagdel: "-" tagname
!editpropset: relprop ("=" | "+=" | "-=" | _TRYSET) _valu
editpropdel: "-" relprop
!editunivset: univprop ("=" | "+=" | "-=" | _TRYSET) _valu
!editnodeadd: formname ("=" | "+=" | "-=" | _TRYSET) _valu
!edittagpropset: "+" tagprop ("=" | "+=" | "-=" | _TRYSET) _valu
edittagpropdel: "-" tagprop
_TRYSET: "?=" | "?+=" | "?-="
SETTAGOPER: "?"

// The set of non-edit non-commands in storm

_oper: stormfunc | initblock | finiblock | trycatch | subquery | _formpivot | formjoin | formpivotin
     | formjoinin | lifttagtag | opervarlist | setitem | setvar | vareval | filtoper | liftbytag
     | operrelprop | forloop | whileloop | switchcase | BREAK | CONTINUE | return | emit | stop
     | _liftprop | ifstmt | yieldvalu | n1walk | n2walk | n1walknpivo | n2walknpivo | rawpivot

BREAK: "break"
CONTINUE: "continue"

catchblock: "catch" _valu "as" VARTOKN "{" query "}"
trycatch: "try" "{" query "}" catchblock*

_STOP.2: "stop"
stop: _STOP
_RETURN.3: "return"
return: _RETURN "("[ _valu ] ")"
_EMIT: "emit"
emit: _EMIT _valu

// A bare variable reference, useful for a function call
vareval: _varvalu

// A variable assignment
setvar: "$" VARTOKN "=" _valu
setitem: "$" _varvaluatom "." (VARTOKN | "$" varvalue) "=" _valu

forloop: "for" ("$" VARTOKN | varlist) "in" _valu baresubquery
whileloop: "while" _valu baresubquery
subquery: [YIELD] baresubquery
argvquery: "{" query "}"
baresubquery: "{" query "}"
YIELD: "yield"
switchcase: "switch" _varvalu "{" ((DEFAULTCASE | DOUBLEQUOTEDSTRING | SINGLEQUOTEDSTRING | CASEBARE) ":" baresubquery)* "}"
DEFAULTCASE: "*"
CASEBARE: /(?![\*+])([^:\s"']+)(?=[\s]*:)/

yieldvalu: YIELD _argvalu

initblock: "init" "{" query "}"
finiblock: "fini" "{" query "}"

ifstmt: "if" ifclause ("elif" ifclause)* ["else" baresubquery]
// The stuff inside an if or elif
ifclause: _valu baresubquery

// A bare variable list
varlist: "(" ["$" VARTOKN ("," "$" VARTOKN)*] ","? ")"

// A variable list assignment
opervarlist: varlist "=" _valu

// Pivots
_formpivot: formpivot_pivottotags | formpivot_jointags | formpivot_pivotout | formpivot_
formpivot_pivottotags: _RIGHTPIVOT (ALLTAGS | _tagmatch)
formpivot_jointags: _RIGHTJOIN (ALLTAGS | _tagmatch)
// The special symbol that indicates to pivot to syn:tag nodes
ALLTAGS: "#"

formpivot_pivotout:    _RIGHTPIVOT "*"
formpivot_:            _RIGHTPIVOT ABSPROP

formjoin: _RIGHTJOIN "*"     -> formjoin_pivotout
        | _RIGHTJOIN ABSPROP -> formjoin_formpivot

formpivotin: _LEFTPIVOT "*" -> formpivotin_
           | _LEFTPIVOT ABSPROP -> formpivotin_pivotinfrom

formjoinin: _LEFTJOIN "*" -> formjoinin_pivotin
          | _LEFTJOIN ABSPROP -> formjoinin_pivotinfrom

operrelprop: relprop _RIGHTPIVOT ("*" | ABSPROP) -> operrelprop_pivot
           | relprop _RIGHTJOIN ("*" | ABSPROP) -> operrelprop_join

rawpivot: _RIGHTPIVOT "{" query "}"

_RIGHTJOIN:  "-+>"
_LEFTJOIN:   "<+-"
_RIGHTPIVOT: "->"
_LEFTPIVOT:  "<-"

_liftprop: liftformtag | liftpropby | liftprop | liftbyarray
            | liftbytagprop | liftbyformtagprop

WILDCARD: "*"

// A wild card, full prop, list, or $varvalu
_wildprops: WILDCARD | PROPS | valulist | _varvalu

n1walk: _EDGEN1INIT _valu _EDGEN1FINI _wildprops [ _cmpr _valu ]
n2walk: _EDGEN2INIT _valu _EDGEN2FINI _wildprops [ _cmpr _valu ]

_WALKNPIVON1: "-->"
_WALKNPIVON2: "<--"

n1walknpivo: _WALKNPIVON1 "*"
n2walknpivo: _WALKNPIVON2 "*"

_EDGEN1INIT: "-("
_EDGEADDN1INIT: "+("
_EDGEN1FINI: ")>"

_EDGEN2INIT: "<("
_EDGEADDN2FINI: ")+"
_EDGEN2FINI: ")-"

edgeaddn1: _EDGEADDN1INIT _valu _EDGEN1FINI baresubquery
edgedeln1: _EDGEN1INIT _valu _EDGEN1FINI baresubquery
edgeaddn2: _EDGEN2INIT _valu _EDGEADDN2FINI baresubquery
edgedeln2: _EDGEN2INIT _valu _EDGEN2FINI baresubquery

liftformtag: (PROPS | UNIVNAME) tagname [_cmpr _valu]
_DEREF:  "*"
liftpropby: ((PROPS | UNIVNAME) | _DEREF _varvalu) _cmpr _valu
liftprop: ((PROPS | UNIVNAME) | _DEREF _varvalu)
liftbyarray: ((PROPS | UNIVNAME) | _DEREF _varvalu) "*[" _safe_cmpr _valu "]"
lifttagtag: "#" tagname [_cmpr _valu]
liftbytag: tagname [_cmpr _valu]
liftbytagprop: tagprop [_cmpr _valu]
liftbyformtagprop: formtagprop [_cmpr _valu]
tagname: "#" (_varvalu | TAG)
tagprop: "#" TAG _COLONNOPAR BASEPROP
formtagprop: (PROPS | UNIVNAME) "#" TAG _COLONNOPAR BASEPROP

_funcarg: (VARTOKN | kwarg)
funcargs: "(" (_funcarg ("," _funcarg)* )? ")"
stormfunc: "function" VARTOKN funcargs "{" query "}"

stormcmd: CMDNAME stormcmdargs | BARECMDNAME
stormcmdargs: _stormcmdarg+

_stormcmdarg: CMDOPT "=" (argvquery | _argvalu | _wordarg)
    | _cmdoptarg | argvquery | _argvalu | _wordarg

_wordarg: (WORDTOKN _stormcmdarg) | WORDLAST
_cmdoptarg: (CMDOPT _stormcmdarg) | CMDOPTLAST

// The name of a storm command
CMDNAME: /\b(?!(init|fini|function|return|emit|stop|yield|break|continue|for|while|switch|else|elif|if|not|or|and|try|catch|as)\b)[a-z][a-z0-9.]+(?=[\s])(?![\s]*($|[\|\}]))\b/
BARECMDNAME: /\b(?!(init|fini|function|return|emit|stop|yield|break|continue|for|while|switch|else|elif|if|not|or|and|try|catch|as)\b)[a-z][a-z0-9.]+(?=[\s]*($|[\|\}]))\b/

CMDOPT: /-[a-zA-Z0-9_-]+/
CMDOPTLAST: /-[a-zA-Z0-9_-]+(?=[\s]*($|[\|\}]))/

// An unquoted string within a storm command argument list
WORDTOKN: /(?!\/[\/\*]|\+|\-)[\w\+\-\?\*\/\\][^\s\=\|\}\)]*/
WORDLAST.2: /(?!\/[\/\*]|\+|\-)[\w\+\-\?\*\/\\][^\s\=\|\}\)]*(?=[\s]*($|[\|\}]))/

// an argv parser for cmdr commands which may contain embedded queries
cmdrargs: _cmdrargv ("="? _cmdrargv)*
_cmdrargv: baresubquery | DOUBLEQUOTEDSTRING | SINGLEQUOTEDSTRING | CMDRTOKN

// A tag with either a variable reference or a tag name potentially with asterisks
_tagmatch: "#" (_varvalu | TAGMATCH)
// A tag name with asterisks or $var as segment after the first segment
TAGMATCH:  _TAGSEGSTARNOVAR ( "." (_TAGSEGSTARNOVAR | "$" VARTOKN))*
_TAGSEGSTARNOVAR: /\w*\*+\w*/

// A regular tag potentially with $var as any number of segments after the first
TAG: _TAGSEGNOVAR ("." (_TAGSEGNOVAR | "$" VARTOKN))*
_TAGSEGNOVAR: /\w+/

// A comparison operator
!_cmpr: _by_cmpr | ("@=" | "<=" | ">=" | "<" | ">" | "=" | "!=" | "~=" | "^=")
_by_cmpr: "*" BYNAME
BYNAME: /[^=\s]+=/

!_safe_cmpr: BYNAME | ("@=" | "<=" | ">=" | "<" | ">" | "=" | "!=" | "~=" | "^=")

_rootvalu: _varvalu | relpropvalu | univpropvalu | tagvalu | tagpropvalu | TRIPLEQUOTEDSTRING
    | DOUBLEQUOTEDSTRING | SINGLEQUOTEDSTRING | VARTOKN | dollarexpr

// Common subset + stuff allowable in command arguments
_argvalu: _rootvalu | valulist | embedquery

// Used for most instances of values
_basevalu: _argvalu | baresubquery

_valu: _basevalu | NONQUOTEWORD

evalvalu: _valu
exprdict: "{" (_exprvalu ":" _exprvalu ("," _exprvalu ":" _exprvalu)* ","? )? "}"
exprlist: "[" (_exprvalu ("," _exprvalu)* ","? )? "]"

// Just like _valu, but doesn't allow valu lists or unquoted strings or queries
_exprvalu: NUMBER | HEXNUMBER | BOOL | exprlist | exprdict | _rootvalu

_listvalu: _basevalu | LISTTOKN | PROPS | NUMBER

_lookvalu: DOUBLEQUOTEDSTRING | SINGLEQUOTEDSTRING | WHITETOKN
looklist: _lookvalu*

valulist: "(" [_listvalu ((",")|("," _listvalu)+ ","?)] ")"
tagvalu: tagname
tagpropvalu: tagprop

relpropvalu: _COLONNOPAR (BASEPROP | _varvalu)
univpropvalu: univprop
embedquery: _EMBEDQUERYSTART query "}"
_EMBEDQUERYSTART: "${"

// An unquoted storm string constant.  Must start with a word char, ?, /, \, +, *, or - and not contain certain punctuation
NONQUOTEWORD: /(?!\/\/)[\w\-\+\?\*\/\\][^\s\),=\]}\|]*(?=$|[\s\),\]}\|])(?!([\s]|\/\*+[^*]*\*+([^\/*][^*]*\*+)*\/|\/\/[^\n]*)*=)/

// An unquoted string within a list syntax
LISTTOKN: /[\w\+\-\?\*\/\\]([^=,)]*[^\s,)])*/

// A white-space *only* delimited string immediate for use in legacy cmdr parser
CMDRTOKN.-1: /[^="'\s\{}][^\s\{}]*/

WHITETOKN: /[^\s|]+/

// A value consisting of a name then 0 or more derefs and function calls
_varvalu: "$" _varvaluatom

_varvaluatom: varvalue | varderef | funccall
varvalue: VARTOKN
VARTOKN: /\w+/ | DOUBLEQUOTEDSTRING | SINGLEQUOTEDSTRING
varderef: _varvaluatom "." (VARTOKN | "$" VARTOKN)

funccall: _varvaluatom _callargs
_callargs: _LPARNOSPACE [(kwarg | _valu) ("," (kwarg | _valu))*] ","? ")"
_LPARNOSPACE.2: /(?<!\s)\(/
kwarg: VARTOKN "=" _valu

filtoper: (EXPRPLUS | EXPRMINUS) _cond

// Condition used for filters
// TODO:  unify cond and dollarexpr
_cond: notcond | "(" _condexpr ")"
    | hasrelpropcond | relpropcond
    | abspropcond | hasabspropcond
    | tagpropcond | hastagpropcond
    | tagcond | tagvalucond
    | condsubq | arraycond
    | _varvalu | reqdollarexpr

notcond: "not" _cond

hasrelpropcond: relprop | univprop
relpropcond: relpropvalue _cmpr _valu
relpropvalue:   relprop | univprop

abspropcond:  ABSPROPNOUNIV _cmpr _valu
hasabspropcond: ABSPROPNOUNIV

tagpropcond:  tagprop _cmpr _valu
hastagpropcond: tagprop

tagvalucond:  (_tagmatch | "#" TAG) _cmpr _valu
tagcond: (_tagmatch | "#" TAG)

condsubq: "{" query "}" [ _cmpr _valu]
arraycond: relprop _ARRAYCONDSTART _safe_cmpr _valu "]"
_ARRAYCONDSTART: "*["

// Filter boolean conditions
_condexpr: _cond | orexpr | andexpr
orexpr: _condexpr "or" _cond
andexpr: _condexpr "and" _cond

TRIPLEQUOTEDSTRING: /'''.*?'''/s
DOUBLEQUOTEDSTRING: ESCAPED_STRING
SINGLEQUOTEDSTRING: /'[^']*'(?!')/

// Must be kept consistent with same regexes in synapse/lib/grammar.py
// A full property.  Must contain at least 1 colon
PROPS.2: /[a-z_][a-z0-9_]*(:[a-z0-9_]+)+([:.][a-z0-9_]+)*/
// A universal property
UNIVNAME: /(?<=^|[\s\|\{])\.[a-z_][a-z0-9_]*([:.][a-z0-9_]+)*/
univprop:  UNIVNAME | "." _varvalu
// A full property or a universal property
ABSPROP: PROPS | UNIVNAME
ABSPROPNOUNIV: PROPS
formname: PROPS | _DEREF _varvalu
// A relative property
relprop: _COLONNOPAR (BASEPROP | _varvalu)
_COLONNOPAR.2: /:(?!\()/

// Similar to PROPS, but starts with a colon and allows :: as separator
RELNAME: /\:\.?[a-z_][a-z0-9_]*(?:(\:\:|\:|\.)[a-z_][a-z0-9_]+)*/

// Similar to PROPS but does not require a colon
BASEPROP: /[a-z_][a-z0-9_]*(?:(\:\:|\:|\.)[a-z_][a-z0-9_]*)*/

// The entry point for a $(...) expression.  The initial dollar sign is now optional
dollarexpr: "$"? _exprcommon
// A dollar expression with a required dollar
reqdollarexpr: "$" _exprcommon
_exprcommon: "(" expror ")"
EXPRPLUS: "+"
EXPRMINUS: "-"
EXPRTIMES: "*"
EXPRDIVIDE: "/"
NUMBER.2: /-?\d+(\.\d*)?/
HEXNUMBER.2: /-?0x[0-9a-fA-F]+/
BOOL.2: /true|false/
NOT: "not"
OR: "or"
AND: "and"

// $ expression rules in increasing order of precedence (modeled on Python's order)
?expror: exprand | expror OR exprand
?exprand: exprnot | exprand AND exprnot
?exprnot: exprcmp | NOT exprcmp
!?exprcmp: exprsum | exprcmp ("<=" | ">=" | "<" | ">" | "=" | "!=" | "~=" | "^=") exprsum
?exprsum: exprproduct | exprsum (EXPRPLUS | EXPRMINUS) exprproduct
?exprproduct: _expratom | exprproduct (EXPRTIMES | EXPRDIVIDE) _expratom
_expratom: _exprvalu
