%import common.WS -> _WS
%import common.ESCAPED_STRING

query: (_querystartnon | _querystartcommand)? _WSCOMM?
_querystartcommand: _WSCOMM? stormcmd [ _WSCOMM? "|" _WSCOMM? (_querystartcommand |  _querystartnon) ]
_querystartnon: _WSCOMM? _noncommand [ _WSCOMM? "|" _WSCOMM? _querystartcommand
                                      | _WSCOMM? ("|" | _WSCOMM) _querystartnon ]

_noncommand: _editopers | _oper

_editopers: "[" _WS? (_editoper _WS?)* "]"
_editoper: editpropset | editunivset | edittagadd | editpropdel | editunivdel | edittagdel | editnodeadd
edittagadd: "+" tagname [_WS? "=" _WS? _valu]
editunivdel: "-" UNIVPROP
edittagdel: "-" tagname
editpropset: RELPROP _WS? "=" _WS? _valu
editpropdel: "-" RELPROP
editunivset: UNIVPROP _WS? "=" _WS? _valu
editnodeadd: ABSPROPNOUNIV _WS? "=" _WS? _valu
ABSPROP: PROPNAME
ABSPROPNOUNIV: PROPS

_oper: subquery | _formpivot | formjoin | formpivotin | formjoinin | lifttagtag | opervarlist | valuvar | vareval
     | filtoper | liftbytag | operrelprop | forloop | switchcase | BREAK | CONTINUE | _liftprop

BREAK: "break"
CONTINUE: "continue"

vareval: _varvalu

forloop.1: "for" _WS? (_varname | varlist) _WS? "in" _WS? _varvalu _WS? subquery
subquery: "{" query _WSCOMM? "}"
switchcase.1: "switch" _WS? _varvalu _WS? "{" (_WSCOMM? (("*" _WS? ":" subquery) | (casevalu _WSCOMM? subquery)) )* _WSCOMM? "}"
varlist: "(" [_WS? _varname (_WS? "," _WS? _varname)*] _WS? ["," _WS?] ")"
casevalu: (DOUBLEQUOTEDSTRING _WSCOMM? ":") | /[^:\s][^:]*:/

VARSETS: /[$.\w][$.\w:]*/

_formpivot: formpivot_pivottotags | formpivot_pivotout | formpivot_
formpivot_pivottotags: "->" _WS? TAGMATCH
formpivot_pivotout:    "->" _WS? "*"
formpivot_:            "->" _WS? ABSPROP

formjoin: "-+>" _WS? "*" -> formjoin_pivotout
        | "-+>" _WS? ABSPROP -> formjoin_formpivot

formpivotin.1: "<-" _WS? "*" -> formpivotin_
           | "<-" _WS? ABSPROP -> formpivotin_pivotinfrom

formjoinin: "<+-" _WS? "*" -> formjoinin_pivotin
          | "<+-" _WS? ABSPROP -> formjoinin_pivotinfrom
opervarlist: varlist _WS? "=" _WS? _valu

operrelprop: RELPROP _WS? "->" _WS? ("*" | ABSPROP) -> operrelprop_pivot
           | RELPROP _WS? "-+>" _WS? ABSPROP -> operrelprop_join

valuvar: _varname _WS? "=" _WS? _valu

_liftprop: liftformtag | liftpropby | liftprop
liftformtag.1: PROPNAME tagname [_WS? CMPR _valu]
liftpropby: PROPNAME _WS? CMPR _WS? _valu
liftprop: PROPNAME
lifttagtag: "#" tagname [_WS? CMPR _valu]
liftbytag: tagname [_WS? CMPR _valu]
tagname: "#" _WS? (_varname | TAG)

_varname: "$" _WS? VARTOKN
VARTOKN: /\w+/
stormcmd: CMDNAME [_WS stormcmdargs]
stormcmdargs: [_WS? _cmdargv (_WS _cmdargv)*]
_cmdargv: subquery | DOUBLEQUOTEDSTRING | SINGLEQUOTEDSTRING | NONCMDQUOTE

TAG: /([\w]+\.)*[\w]+/
TAGMATCH: /#(([\w*]+\.)*[\w*]+)?/

// https://regex101.com/r/l8hFq8/1
CMPR: /[@!<>^~=][@!<>^~=]*|\*[^=\s]*?=/
_valu: NONQUOTEWORD | valulist | _varvalu | relpropvalu | univpropvalu | tagpropvalue | DOUBLEQUOTEDSTRING
    | SINGLEQUOTEDSTRING | dollarexpr
valulist: "(" [_WS? _valu (_WS? "," _WS? _valu)*] _WS? ["," _WS?] ")"
tagpropvalue: tagname

NONCMDQUOTE: /[^ \t\n|}]+/
NONQUOTEWORD: /[\w\-?][^ \t\n),=\]}|]*/

_varvalu: "$" _varvaluatom
_varvaluatom: varvalue | varderef | funccall
varvalue: VARTOKN
varderef: _varvaluatom "." VARTOKN
funccall: _varvaluatom _callargs
_callargs: "(" [_WS? (kwarg | _valu) (_WS? "," _WS? (kwarg | _valu))*] _WS? ["," _WS?] ")"
kwarg: VARTOKN "=" _valu

filtoper: FILTPREFIX cond
FILTPREFIX: "+" | "-"

// FIXME:  (need to fix in ast.py) have separate tagmatch/tagname spots cuz tagmatch can't have cmpr
cond: condexpr | condsubq | (NOT_ _WS? cond)
    | ((RELPROP | UNIVPROP | TAGMATCH | ABSPROPNOUNIV) [_WS? CMPR _WS? _valu])
condexpr: "(" _WS? cond (_WS? ((AND_ | OR_) _WS? cond))* _WS? ")"
NOT_: "not"
OR_: "or"
AND_: "and"
condsubq: "{" _WSCOMM? query _WS? "}" [_WSCOMM? CMPR _WSCOMM? _valu]
DOUBLEQUOTEDSTRING: ESCAPED_STRING
SINGLEQUOTEDSTRING: /'[^']*'/
UNIVPROP:  UNIVNAME
univpropvalu: UNIVPROP

RELPROP: ":" VARSETS
relpropvalu: RELPROP

// Whitespace or comments
_WSCOMM: (CCOMMENT | CPPCOMMENT | _WS)+

// From https://stackoverflow.com/a/36328890/6518334
CCOMMENT: /\/\*+[^*]*\*+([^\/*][^*]*\*+)*\//
CPPCOMMENT: /\/\/[^\n]*/

// Must be kept consistent with same regexes in synapse/lib/grammar.py
PROPS: /[a-z][a-z0-9]*(:[a-z0-9]+)+([:.][a-z][a-z0-9]+)*/
UNIVNAME: /\.[a-z][a-z0-9]*([:.][a-z0-9]+)*/
PROPNAME: PROPS | UNIVNAME
CMDNAME: /[a-z][a-z0-9.]+/

dollarexpr: "$(" _WSCOMM? exprcmp _WSCOMM? ")"
EXPRCMPR: /<=|>=|<|>/
EXPRPLUS: "+"
EXPRMINUS: "-"
EXPRTIMES: "*"
EXPRDIVIDE: "/"

// Expression rules in increasing order of precedence
?exprcmp: exprsum | exprsum _WSCOMM? (EXPRCMPR) _WSCOMM? exprsum
?exprsum: exprproduct | exprsum _WSCOMM? (EXPRPLUS | EXPRMINUS) _WSCOMM? exprproduct
?exprproduct: _expratom | exprproduct _WSCOMM? (EXPRTIMES | EXPRDIVIDE) _WSCOMM? _expratom
_expratom: _valu | "(" exprsum ")"
