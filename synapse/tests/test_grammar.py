import synapse.tests.utils as s_t_utils
import lark

_Queries = [
    '',
    '#foo',
    'help',
    'refs',
    '#$tag',
    'wentto',
    '[-#foo]',
    'syn:tag',
    'teststr',
    '.created',
    '##baz.faz',
    'inet:fqdn',
    'inet:user',
    '#test.baz',
    '#hehe.haha',
    'inet:dns:a',
    'testint<20',
    'testint>20',
    'testint<30',
    'testint>30',
    'testint<=20',
    'testint>=20',
    'testint<=30',
    'teststr=foo',
    'teststr#foo',
    'pivcomp=$foo',
    'testint=1234',
    '[testint=20]',
    'teststr=$foo',
    'teststr=ohmy',
    '.created<2010',
    '.created>2010',
    'iden deadb33f',
    'testcomp -> *',
    'testint:loc=u',
    '[ testint=42 ]',
    'testint:loc=""',
    'testint:loc^=u',
    'testint:loc=us',
    'teststr~="zip"',
    '.created="2001"',
    '.favcolor~="^r"',
    'testint=8675309',
    '[testint=99999]',
    'testint:loc^=""',
    'testint:loc^=23',
    'testint +:loc=u',
    'testint:loc^=us',
    'teststr [-#foo]',
    'teststr#foo.bar',
    '[teststr=hello]',
    '.hehe [ -.hehe ]',
    'inet:ipv4:loc=us',
    'inet:ipv4:loc=zz',
    '#$tag [ -#$tag ]',
    'testint +:loc=""',
    'testint +:loc^=u',
    'testint +:loc=us',
    'testint:loc^=us.',
    'testint:loc=us.v',
    'teststr=bar <- *',
    '[ teststr=hehe ]',
    'teststr %limit=1',
    'teststr [-:tick]',
    'file:bytes:size=4',
    'movetag #a.b #a.m',
    'pivcomp:tick=$foo',
    'syn:tag=a.b +#foo',
    'testint +:loc^=""',
    'testint +:loc^=23',
    'testint +:loc^=us',
    'testint:loc^=us.v',
    'testint:loc=us.va',
    'teststr=bar <+- *',
    'teststr#foo@=2016',
    'teststr:tick=2015',
    'inet:fqdn=woot.com',
    '[ inet:ipv4=$foo ]',
    'pivcomp | noderefs',
    'pivcomp -> testint',
    'testint=3735928559',
    'testint +:loc^=us.',
    'testint +:loc=us.v',
    'testint:loc^=us.va',
    'teststr=foo <- has',
    'teststr=visi -> #*',
    'inet:user | limit 1',
    'movetag #hehe #woot',
    'pivcomp=(hehe,haha)',
    'testcomp -> testint',
    'testguid | max tick',
    'testguid | min tick',
    '[testint=3 :loc=""]',
    'testint +:loc^=us.v',
    'testint +:loc=us.va',
    'testint:loc^=us.va.',
    'testint +testint>10',
    'testint +testint<30',
    'teststr +#foo@=2016',
    'teststr [+#foo.bar]',
    'teststr=foo <+- has',
    'teststr +:tick=2015',
    '.created="{created}"',
    'inet:ipv4 -> teststr',
    'inet:user | limit 1|',
    '[pivcomp=(foo, 123)]',
    'syn:tag=foo.bar -> *',
    '[testint=12 :loc=us]',
    'testint +:loc^=us.va',
    'testint:loc=us.va.sy',
    'testint +testint>=10',
    'testint +testint<=30',
    'inet:dns:a :ipv4 -> *',
    'inet:ipv4=10.2.1.1/28',
    '[ inet:ipv4=1.2.3.4 ]',
    '[ pivcomp=(foo,bar) ]',
    'reindex --form-counts',
    '#test.bar -#test <- *',
    '#test.bar -#test -> *',
    'testint +:loc^=us.va.',
    '[ teststr=bar +#baz ]',
    '[ teststr=foo +#bar ]',
    'teststr=foo | delnode',
    'pivcomp=(foo,bar) -> *',
    'seen:source=$sorc -> *',
    'sudo | [ teststr=foo ]',
    '#test.bar -#test <+- *',
    '#test.bar -#test -+> *',
    'testcomp:haha~="^lulz"',
    'testcomp:haha~="^zerg"',
    'testint=123 | noderefs',
    'testint +:loc=us.va.sy',
    'teststr=123 | noderefs',
    'teststr=foobar -+> has',
    '[ teststr=foo +#$tag ]',
    '[ teststr=haha +#foo ]',
    'teststr +:tick@=(2015)',
    'teststr=visi -> #baz.*',
    'teststr=visi -> #foo.*',
    'pivcomp=(foo,bar) -+> *',
    'sudo | [ testguid="*" ]',
    '#test.bar +pivcomp -> *',
    '#test.bar +teststr <- *',
    '[testcomp=(1234, 5678)]',
    '[testint=10 :loc=us.va]',
    'testint:loc^=us.va.fair',
    'testint:loc=us.va.syria',
    'teststr=foo +#lol@=2014',
    'teststr=foo +#lol@=2016',
    'teststr | noderefs -d 3',
    '[ inet:fqdn = woot.com ]',
    'inet:ipv4=192.168.1.0/24',
    'inet:user | limit --woot',
    '#test.bar +pivcomp -+> *',
    '#test.bar +teststr <+- *',
    'testint:loc=us.va.sydney',
    'teststr#foo@=(2012,2022)',
    'inet:ipv4=1.2.3.1-1.2.3.3',
    'pivcomp | noderefs --join',
    '[testguid="*" :tick=2001]',
    'testint +:loc^=us.va.fair',
    'teststr | delnode --force',
    'teststr:tick<201808021202',
    'teststr:tick>201808021202',
    '[ teststr=woot .hehe=20 ]',
    'teststr=woot +.seen@=2012',
    'teststr=woot +.seen@=2015',
    'teststr=woot +.seen@=#bar',
    'teststr=woot +.seen@=#baz',
    'inet:ipv4=1.2.3.4|limit 20',
    'inet:ipv4 +:asn::name=visi',
    'inet:ipv4 | reindex --subs',
    'sudo | testint=6 | delnode',
    'syn:tag=aaa.barbarella.ddd',
    'syn:tag=foo.bar -> teststr',
    '[testguid=abcd :tick=2015]',
    'testint=123 | noderefs -te',
    '[testint=9 :loc=us.à¤“à¤‚]',
    'testint:loc^=us.va.fairfax',
    'testint +:loc=us.va.sydney',
    'teststr="foo bar" +teststr',
    'teststr | noderefs -d 3 -u',
    'teststr +:tick@=("-1 day")',
    'teststr:tick<=201808021202',
    'teststr:tick>=201808021202',
    '.created*range=(2010, 3001)',
    '[ inet:asn=200 :name=visi ]',
    '[ inet:fqdn=woot.com ] -> *',
    '[inet:ipv4=1.2.3.1-1.2.3.3]',
    '[ inet:ipv4=192.168.1.0/24]',
    'pivtarg=hehe [ .seen=2015 ]',
    'ps:person=$pers -> has -> *',
    '[ testguid="*" :tick=2015 ]',
    '[ testguid="*" :tick=2016 ]',
    '[ testguid="*" :tick=2017 ]',
    'testint:loc^=us.va.fairfax.',
    'teststr=bar -> pivcomp:lulz',
    '[teststr=beep teststr=boop]',
    'teststr +#foo@=(2014, 2019)',
    'teststr +#foo@=(2015, 2018)',
    '[ teststr=foo teststr=bar ]',
    '[ teststr=haha +#bar=2015 ]',
    '[ teststr=haha +#bar=2016 ]',
    '.created*range=("2010", "?")',
    'geo:place=$place <- has <- *',
    'inet:fqdn=woot.com | delnode',
    'pivcomp=(foo,bar) -> pivtarg',
    'seen:source=$sorc :node -> *',
    'sudo | [ inet:ipv4=1.2.3.4 ]',
    'sudo | [ teststr=foo +#lol ]',
    'testcomp -> * | uniq | count',
    '[testint=1 :loc=us.va.syria]',
    'testint +:loc^=us.va.fairfax',
    'testint +:loc="us.va. syria"',
    'teststr=bar -+> pivcomp:lulz',
    'teststr="foo bar" [ -:tick ]',
    'teststr=hello [:tick="2001"]',
    'teststr=hello [:tick="2002"]',
    '[ inet:ipv4=1.2.3.4 :asn=20 ]',
    'inet:user | limit 1    |     ',
    'pivcomp=(foo,bar) -+> pivtarg',
    'syn:tag=baz.faz [ +#foo.bar ]',
    '[testint=2 :loc=us.va.sydney]',
    'testint +:loc^=us.va.fairfax.',
    '[ inet:ipv4=1.2.3.4 :asn=200 ]',
    'movetag #aaa.b #aaa.barbarella',
    'pivcomp | noderefs --join -d 3',
    'ps:person=$pers -> wentto -> *',
    '[testint=4 :loc=us.va.fairfax]',
    '$bar=5.5.5.5 [ inet:ipv4=$bar ]',
    '[ inet:dns:a=$blob.split("|") ]',
    'inet:ipv4 -inet:ipv4=1.2.3.0/30',
    'inet:ipv4 +inet:ipv4=1.2.3.0/30',
    '[ pivcomp=(xxx,yyy) :width=42 ]',
    'sudo | [teststr=123 :tick=2018]',
    'syn:tag=foo.bar -> teststr:tick',
    '[testint=1 testint=2 testint=3]',
    '[testint=8 :loc=us.ca.sandiego]',
    'teststr +#foo@=(2014, 20141231)',
    'teststr [+#foo.bar=(2000,2002)]',
    'teststr="foo bar" -teststr:tick',
    '[ teststr="foo bar" :tick=2018]',
    'teststr +:tick=(2015, "+1 day")',
    'teststr +:tick@=(now, "-1 day")',
    '[ teststr=visi +#foo.bar ] -> #',
    'inet:fqdn=woot.com -> inet:dns:a',
    'inet:ipv4 +inet:ipv4=10.2.1.4/31',
    'inet:ipv4 +inet:ipv4=10.2.1.4/32',
    '[ pivcomp=(foo,bar) :tick=2018 ]',
    'teststr=foobar -> has <- teststr',
    '[teststr=foo :tick=201808021201]',
    'teststr | noderefs -d 3 --unique',
    'teststr +:tick@=(2015, "+1 day")',
    'teststr=woot +.seen@=(2012,2013)',
    'teststr=woot +.seen@=(2012,2015)',
    '[ inet:dns:a=(woot.com,1.2.3.4) ]',
    'pivcomp | noderefs -j --degrees 2',
    'sudo | [ cycle0=foo :cycle1=bar ]',
    'sudo | [ cycle1=bar :cycle0=foo ]',
    'testcomp +(:hehe<2 or :haha=foob)',
    'testcomp +(:hehe<2 or :haha=test)',
    'testcomp +(:hehe<2 or #meep.gorp)',
    'testint:loc^=us.va.fairfax.reston',
    "[ teststr=abcd :tick=2015 +#cool ]"
    'teststr=foobar -> has <+- teststr',
    'teststr=pennywise | noderefs -d 3',
    'teststr +:tick@=("now-1day", "?")',
    'teststr +:tick=($test, "+- 2day")',
    'pivcomp=(foo,bar) :lulz -> teststr',
    'pivcomp=(foo,bar) :targ -> pivtarg',
    'ps:person=$pers -> wentto :n2 -> *',
    'testcomp +(:hehe<2 and :haha=foob)',
    'testcomp +(:hehe<2 and :haha=test)',
    '[ teststr=foo +#bar ] +(not .seen)',
    '[ teststr=foo teststr=bar ] | spin',
    '[ teststr=hehe +#foo=(2014,2016) ]',
    '[teststr=hehe] | iden abcd | count',
    'teststr +teststr:tick<201808021202',
    'teststr +teststr:tick>201808021202',
    'teststr:tick=(20131231, "+2 days")',
    '[ teststr=woot +#foo=(2015,2018) ]',
    '[ teststr=woot .seen=(2014,2015) ]',
    'cluster=abcd | noderefs -d 2 --join',
    'pivcomp=(foo,bar) :lulz -+> teststr',
    'ps:person=$pers -> has -> geo:place',
    'ps:person=$pers -> has -> inet:ipv4',
    '[seen=(abcd, (teststr, pennywise))]',
    'testint +:loc^=us.va.fairfax.reston',
    'teststr [+#foo.bar=(2000,20020601)]',
    'teststr +teststr:tick<=201808021202',
    'teststr +teststr:tick>=201808021202',
    'teststr +:tick=(20150102, "-3 day")',
    'teststr +:tick=(20150201, "+1 day")',
    'teststr=woot $foo=#foo +.seen@=$foo',
    'geo:place:latlong*near=((0, 0), 50m)',
    'geo:place=$place <- has <- inet:ipv4',
    'geo:place=$place <- has <- ps:person',
    'inet:ipv4 +inet:ipv4=1.2.3.1-1.2.3.3',
    'inet:user | limit 10 | [ +#foo.bar ]',
    '[ inet:user=visi inet:user=whippit ]',
    'testint:loc^=us.va.fairfax.chantilly',
    'teststr +:tick=(20150102, "+- 2day")',
    'teststr +:tick@=(20150102, "-4 day")',
    'iden 2cdd997872b10a65407ad5fadfa28e0d',
    'pivcomp | noderefs --join --degrees 2',
    'testguid +testguid*range=(abcd, dcbe)',
    '[testint=5 :loc=us.va.fairfax.reston]',
    '[ teststr=visi testint=20 +#foo.bar ]',
    'inet:user | limit 10 | +inet:user=visi',
    'ps:person=$pers -> wentto -> inet:ipv4',
    '[testint=7 :loc=us.va.fairfax.herndon]',
    'testint +:loc^=us.va.fairfax.chantilly',
    'teststr=123 | noderefs --traverse-edge',
    '[ teststr=foo teststr=bar ] | sleep 10',
    '[ teststr=foo teststr=bar testint=42 ]',
    '[inet:dns:query=(tcp://1.2.3.4, "", 1)]',
    '[ inet:ipv4 = 94.75.194.194 :loc = nl ]',
    '[refs=((teststr, 123), (testint, 123))]',
    'source=8f1401de15918358d5247e21ca29a814',
    'testcomp +:haha*range=(grinch, meanone)',
    'teststr=123 [:baz="testguid:tick=2015"]',
    'teststr +:tick@=("now+2days", "-3 day")',
    '[ geo:place="*" :latlong=(-30.0,20.22) ]',
    '[ inet:fqdn=woot.com +#bad=(2015,2016) ]',
    'teststr=1234 teststr=duck teststr=knight',
    'teststr=pennywise | noderefs --join -d 9',
    '[has=((teststr, foobar), (teststr, foo))]',
    'inet:dns:a=(woot.com,1.2.3.4) $newp=.newp',
    '[ inet:dns:a=(woot.com, 1.2.3.4) +#yepr ]',
    '[ teststr=foo +#bar ] { [ +#baz ] -#bar }',
    'teststr +:tick@=(20150102+1day, "-4 day")',
    'teststr +:tick*range=(19701125, 20151212)',
    '[ inet:ipv4=1.2.3.0/30 inet:ipv4=5.5.5.5 ]',
    'teststr=bar pivcomp=(foo,bar) [+#test.bar]',
    '[ teststr=foo +#bar ] +(#baz or not .seen)',
    'teststr=pennywise | noderefs -d 3 -ot=omit',
    'for $fqdn in $fqdns { [ inet:fqdn=$fqdn ] }',
    'inet:dns:a -{ :ipv4 -> inet:ipv4 -:loc=us }',
    'inet:dns:a -{ :ipv4 -> inet:ipv4 +:loc=us }',
    'inet:dns:a +{ :ipv4 -> inet:ipv4 -:loc=us }',
    'inet:dns:a +{ :ipv4 -> inet:ipv4 +:loc=us }',
    '[ inet:dns:a = ( woot.com , 12.34.56.78 ) ]',
    '[ inet:fqdn=vertex.link inet:ipv4=1.2.3.4 ]',
    'inet:ipv4=1.2.3.4 +( { -> inet:dns:a }<=1 )',
    'inet:ipv4=1.2.3.4 +( { -> inet:dns:a }>=3 )',
    '[ testcomp=(10, haha) +#foo.bar -#foo.bar ]',
    'teststr=a +:tick*range=(20000101, 20101201)',
    '[ inet:dns:a=(vertex.link, 5.5.5.5) +#nope ]',
    '[ testcomp=(127,newp) ] [testcomp=(127,127)]',
    '[testint=6 :loc=us.va.fairfax.restonheights]',
    '[teststr=a] switch $woot { hehe: {[+#baz]} }',
    'teststr=pennywise | noderefs -d 3 -of=source',
    'geo:place:latlong*near=((34.1, -118.3), 10km)',
    'inet:dns:a +{ :ipv4 -> inet:ipv4 -:asn=1234 }',
    'inet:dns:a +{ :ipv4 -> inet:ipv4 +:asn=1234 }',
    'inet:fqdn=woot.com -> inet:dns:a -> inet:ipv4',
    'pivcomp=(foo,bar) -{ :lulz -> teststr +#baz }',
    'teststr=pennywise | noderefs -d 3 -otf=source',
    '[ teststr=visi +#foo.bar ] -> # [ +#baz.faz ]',
    'geo:place -:latlong*near=((34.1, -118.3), 50m)',
    'inet:asn=10 | noderefs -of inet:ipv4 --join -d 3',
    'teststr +:bar*range=((teststr, c), (teststr, q))',
    '[ teststr=oof +#bar ] { [ testint=0xdeadbeef ] }',
    'inet:ipv4=12.34.56.78 [ :loc = us.oh.wilmington ]',
    'teststr=pennywise | noderefs -d 3 --omit-tag=omit',
    '[ inet:dns:a=(woot.com,1.2.3.4) .seen=(2015,2016) ]',
    'inet:dns:a=(woot.com,1.2.3.4) [ .seen=(2015,2018) ]',
    '[inet:dns:query=(tcp://1.2.3.4, "foo*.haha.com", 1)]',
    '[ pivcomp=(hehe,haha) :tick=2015 +#foo=(2014,2016) ]',
    '[refs=((testint, 16), (testcomp, (9999, greenham)))]',
    'teststr=pennywise | noderefs -d 3 --omit-form=source',
    '[ teststr=woot +#foo=(2015,2018) .seen=(2014,2016) ]',
    '[testcomp=(3, foob) +#meep.gorp +#bleep.zlorp +#cond]',
    'inet:dns:a=(woot.com,1.2.3.4) $hehe=:fqdn -:fqdn=$hehe',
    'inet:dns:a=(woot.com,1.2.3.4) $hehe=:fqdn +:fqdn=$hehe',
    'pivcomp=(foo,bar) +{ :lulz -> teststr +#baz } +pivcomp',
    'geo:place +geo:place:latlong*near=((34.1, -118.3), 10km)',
    'inet:dns:query=(tcp://1.2.3.4, "", 1) :name -> inet:fqdn',
    '[source=abcd +#omit.nopiv] [seen=(abcd, (pivtarg, foo))]',
    'teststr=pennywise | noderefs --join -d 9 --traverse-edge',
    'inet:dns:a=(woot.com,1.2.3.4) $hehe=:fqdn inet:fqdn=$hehe',
    '[inet:ipv4=1.2.3.4 :asn=10] [seen=(abcd, (inet:asn, 10))]',
    '[teststr=c] switch $woot { hehe: {[+#baz]} *: {[+#jaz]} }',
    'geo:place:latlong*near=(("34.118560", "-118.300370"), 50m)',
    'ps:person=$pers -> wentto +:time@=(2014,2017) -> geo:place',
    '[ teststr=woot +#foo=(2015,2018) +#bar .seen=(2014,2016) ]',
    'teststr=pennywise | noderefs -d 3 -ott=omit.nopiv -ott=test',
    'for ($fqdn, $ipv4) in $dnsa { [ inet:dns:a=($fqdn,$ipv4) ] }',
    'geo:place:latlong*near=(("34.118560", "-118.300370"), 2600m)',
    'testcomp +testcomp*range=((1024, grinch), (4096, zemeanone))',
    '[ inet:ipv4=1.2.3.4 :loc=us inet:dns:a=(vertex.link,1.2.3.4) ]',
    '[ inet:ipv4=4.3.2.1 :loc=zz inet:dns:a=(example.com,4.3.2.1) ]',
    'teststr=pennywise | noderefs -d 3 --omit-traversal-form=source',
    'pivcomp=(hehe,haha) $ticktock=#foo -> pivtarg +.seen@=$ticktock',
    "[testcomp=(123, test) testcomp=(123, duck) testcomp=(123, mode)]"
    'for ($fqdn,$ipv4,$boom) in $dnsa { [ inet:dns:a=($fqdn,$ipv4) ] }',
    'inet:fqdn +#bad $fqdnbad=#bad -> inet:dns:a:fqdn +.seen@=$fqdnbad',
    'media:news = 00a1f0d928e25729b9e86e2d08c127ce [ :summary = \"\" ]',
    '[refs=((testcomp, (2048, horton)), (testcomp, (4096, whoville)))]',
    'teststr +:.seen*range=((20090601, 20090701), (20110905, 20110906,))',
    '[ inet:dns:a=(woot.com, 1.2.3.4) inet:dns:a=(vertex.link, 1.2.3.4) ]',
    'refs +:n1*range=((testcomp, (1000, green)), (testcomp, (3000, ham)))',
    'inet:dns:query=(tcp://1.2.3.4, "foo*.haha.com", 1) :name -> inet:fqdn',
    'inet:dns:a = (woot.com,  12.34.56.78) [ .seen=( 201708010123, \"?\" ) ]',
    'testint | noderefs | +testcomp*range=((1000, grinch), (4000, whoville))',
    '[refs=((testcomp, (9001, "A mean one")), (testcomp, (40000, greeneggs)))]',
    'inet:dns:a=(woot.com,1.2.3.4) $seen=.seen :fqdn -> inet:fqdn [ .seen=$seen ]',
    '[ inet:fqdn=woot.com inet:fqdn=vertex.link ] [ inet:user = :zone ] +inet:user',
    'inet:dns:a = (woot.com,  12.34.56.78) [ .seen=( 201708010123, 201708100456 ) ]',
    '[teststr=c] switch $woot { hehe: {[+#baz]} haha hoho: {[+#faz]} "lolz:lulz": {[+#jaz]} }',
    '[ inet:fqdn = hehe.com inet:ipv4 = 127.0.0.1 hash:md5 = d41d8cd98f00b204e9800998ecf8427e]',
    'teststr=pennywise | noderefs -d 3 --omit-traversal-tag=omit.nopiv --omit-traversal-tag=test',
    'geo:place=abcd $latlong=:latlong $radius=:radius | spin | tel:mob:telem:latlong*near=($latlong, 3km)',
    'inet:ipv4=12.34.56.78 inet:fqdn=woot.com [ inet:ipv4=1.2.3.4 :asn=10101 inet:fqdn=woowoo.com +#my.tag ]',
    '''
        for $foo in $foos {

            ($fqdn, $ipv4) = $foo.split("|")

            [ inet:dns:a=($fqdn, $ipv4) ]
        } ''',
    ''' /* A comment */ testint ''',
    ''' testint // a comment''',
    '''/* multi
         line */ testint ''',
    '''
        /* A
            multiline
            comment */
        [ inet:ipv4=1.2.3.4 ] // this is a comment
        // and this too...

        switch $foo {

            // The bar case...

            bar: {
                [ +#hehe.haha ]
            }

            /*
                The
                baz
                case
            */
            baz faz: {}
        } ''',
    '''
        inet:fqdn | graph
                    --degrees 2
                    --filter { -#nope }
                    --pivot { <- seen <- source }
                    --form-pivot inet:fqdn {<- * | limit 20}
                    --form-pivot inet:fqdn {-> * | limit 20}
                    --form-filter inet:fqdn {-inet:fqdn:issuffix=1}
                    --form-pivot syn:tag {-> *}
                    --form-pivot * {-> #} ''',
    '''
        for $foo in $foos {

            [ inet:ipv4=1.2.3.4 ]

            switch $foo {
                bar: { [ +#ohai ] break }
                baz: { [ +#visi ] continue }
            }

            [ inet:ipv4=5.6.7.8 ]
            [ +#hehe ]
        } ''',
]

class GrammarTest(s_t_utils.SynTest):

    def test_grammar(*args):
        grammar = open('synapse/lib/storm.g').read()

        parser = lark.Lark(grammar, start='query', debug=True)

        _Queries = [
            'pivtarg=hehe [ .seen=2015 ]', ]
        for i, query in enumerate(_Queries):
            try:

                tree = parser.parse(query)
                print(f'{tree.pretty()}\n)')
            except (lark.ParseError, lark.UnexpectedCharacters):
                print(f'Failure on parsing {{{query}}}')
                raise
