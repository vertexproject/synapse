# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  gh-release: vertexproject/github-release@0.0.4

commands:
  do_report_coverage:
    description: "Codecov report upload"
    steps:
      - run:
          name: Upload Coverage Results
          command: |
            # Download and verify the codecov binary
            curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --import # One-time step
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
            gpg --verify codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x codecov
            # Activate our venv and generate a xml report
            . venv/bin/activate
            python -m coverage xml
            # Execute the binary...
            ./codecov \
              -t "${CODECOV_TOKEN}" \
              -n "${CODECOV_PREFIX}${PYVERS}node${CIRCLE_NODE_INDEX}" \
              -F "${CODECOV_FLAG}" \
              -f ./coverage.xml \
              -v \
              -Z || echo 'Codecov upload failed'

  do_venv_setup:
    description: "Setup venv for testing"
    steps:
      - run:
          name: setup venv
          command: |
            python3 -m venv --copies venv
            . venv/bin/activate
            python3 -m pip install -U wheel pip
            python3 -m pip install -U -r requirements_dev.txt

      - run:
          name: install synapse
          command: |
            . venv/bin/activate
            python3 -m pip install -U --upgrade-strategy=eager -e .

  do_test_execution:
    description: "Execute unit tests via pytest"
    steps:
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            mkdir test-reports
            circleci tests glob synapse/tests/test_*.py synapse/vendor/*/tests/test_*.py | circleci tests split --split-by=timings | xargs python3 -m pytest -v -s -rs --durations 6 --maxfail 6 -p no:logging --junitxml=test-reports/junit.xml -o junit_family=xunit1 ${COVERAGE_ARGS}

  do_replay_test_execution:
    description: "Execute unit tests via pytest"
    steps:
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            mkdir test-reports
            circleci tests glob synapse/tests/test_cortex.py synapse/tests/test_lib_aha.py synapse/tests/test_lib_storm.py synapse/tests/test_lib_stormtypes.py synapse/tests/test_lib_stormlib*.py synapse/tests/test_lib_view.py synapse/tests/test_lib_hiveauth.py synapse/tests/test_lib_cell.py synapse/tests/test_lib_layer.py | circleci tests split --split-by=timings | xargs python3 -m pytest -v -s -rs --durations 6 --maxfail 6 -p no:logging --junitxml=test-reports/junit.xml -o junit_family=xunit1 ${COVERAGE_ARGS}

  test_steps_doc:
    description: "Documentation test steps"
    steps:
      - checkout

      - run:
          name: install deps
          command: |
            sudo apt-get update
            sudo apt-get -y install pandoc

      - restore_cache:
          keys:
            - v3-docvenv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: setup venv
          command: |
            python3 -m venv --copies venv
            . venv/bin/activate
            python3 -m pip install -U wheel pip

      - run:
          name: install synapse requirements
          command: |
            . venv/bin/activate
            python3 setup.py egg_info
            grep -v -E "^\[" synapse.egg-info/requires.txt > _requirements.txt
            python3 -m pip install -U --upgrade-strategy=eager -r _requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v2-docvenv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: executing docs jupyter notebooks
          command: |
            . venv/bin/activate
            ./scripts/doctests.py

  test_steps_python:
    description: "Python test steps"
    steps:
      - checkout

      - run:
          name: checkout regression repo
          command: |
            git clone https://github.com/vertexproject/synapse-regression ~/git/synapse-regression

      - restore_cache:
          keys:
            - v3-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - do_venv_setup

      - save_cache:
          paths:
            - ./venv
          key: v2-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: syntax
          command: |
            . venv/bin/activate
            if [ -n "${RUN_SYNTAX}" ]; then pycodestyle synapse; fi;
            if [ -n "${RUN_SYNTAX}" ]; then pycodestyle scripts; fi;


      - do_test_execution
      - do_report_coverage

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

  test_steps_python_replay:
    description: "Python test steps"
    steps:
      - checkout

      - run:
          name: checkout regression repo
          command: |
            git clone https://github.com/vertexproject/synapse-regression ~/git/synapse-regression

      - restore_cache:
          keys:
            - v3-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - do_venv_setup

      - save_cache:
          paths:
            - ./venv
          key: v2-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: syntax
          command: |
            . venv/bin/activate
            if [ -n "${RUN_SYNTAX}" ]; then pycodestyle synapse; fi;
            if [ -n "${RUN_SYNTAX}" ]; then pycodestyle scripts; fi;

      - do_replay_test_execution
      - do_report_coverage

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

  test_steps_osx:
    description: "OSX Test Steps"
    steps:
      - checkout

      - restore_cache:
          keys:
            - v5-osx-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - do_venv_setup

      - save_cache:
          paths:
            - ./venv
          key: v5-osx-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: run tests
          command: |
            ulimit -Sn 4096
            . venv/bin/activate
            mkdir test-reports
            circleci tests glob synapse/tests/test_*.py | circleci tests split --split-by=timings | xargs python3 -m pytest -v -s -rs --durations 6 --maxfail 6 -p no:logging --junitxml=test-reports/junit.xml -o junit_family=xunit1 ${COVERAGE_ARGS}

      - do_report_coverage

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

  deploy_pypi_prologue:
    description: "Common Pypi prologue"
    steps:
      - checkout

      - restore_cache:
          keys:
            - v2-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: install python dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -U wheel pip twine
            python3 -m pip install -U -r requirements_dev.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

  deploy_pypi_tag_verify:
    description: "Verify the git tag"
    steps:
      - run:
          name: verify git tag vs. version
          command: |
            env | grep -i circle
            . venv/bin/activate
            python setup.py verify

  deploy_pypi_sdist_build:
    description: "Build sdist packages for pypi"
    steps:
      - run:
          name: create packages
          command: |
            . venv/bin/activate
            python setup.py setcommit
            python setup.py sdist

      - run:
          name: smoke packages
          command: |
            mkdir -p /tmp/sdisttest
            python3 -m venv /tmp/sdisttest/venv
            cp dist/*.tar.gz /tmp/sdisttest
            cd /tmp/sdisttest
            . ./venv/bin/activate
            python3 -m pip install -U wheel pip twine
            python3 -m twine check *.tar.gz
            python3 -m pip install *.tar.gz
            python3 -c "$PYPI_SMOKE_CODE"
            deactivate

  deploy_pypi_wheel_build:
    description: "Build wheel packages for pypi"
    steps:
      - run:
          name: create packages
          command: |
            . venv/bin/activate
            python setup.py setcommit
            python setup.py bdist_wheel --python-tag=$PYTHON_TAG

      - run:
          name: smoke packages
          command: |
            mkdir -p /tmp/wheeltest
            python3 -m venv /tmp/wheeltest/venv
            cp dist/*.whl /tmp/wheeltest
            cd /tmp/wheeltest
            . ./venv/bin/activate
            python3 -m pip install -U wheel pip twine
            python3 -m twine check *.whl
            python3 -m pip install *.whl
            python3 -c "$PYPI_SMOKE_CODE"
            deactivate

  deploy_pypi_upload:
    description: "Upload packages to pypi"
    steps:
      - run:
          name: upload to pypi
          command: |
            . venv/bin/activate
            twine upload dist/*


  do_docker_login:
    description: "Login to docker"
    parameters:
      use_ecr:
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.use_ecr >>
          steps:
            - run:
                name: docker login with ECR
                command: |
                  apk add python3 py3-pip
                  python3 -m pip install awscli
                  aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
      - unless:
          condition: << parameters.use_ecr >>
          steps:
            - run:
                name: docker login
                command: |
                  docker login --username "${DOCKER_USERNAME}" --password "${DOCKER_PASSWORD}"

  do_docker_bash:
    description: "Add bash"
    steps:
      - run:
          name: install bash
          command: |
            apk add bash

  do_docker_prep:
    description: "Login to docker, install packages and set commit."
    steps:
      - run:
          name: install python
          command: |
            apk add python3 py3-pip git
      - run:
          name: setcommit
          command: |
            python3 setup.py setcommit

  build_docker:
    description: "Build a docker image"
    parameters:
      image-tag:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - do_docker_prep
      - do_docker_bash
      - run:
          name: build images
          command: |
            docker/build_all.sh << parameters.image-tag >>
      - run:
          name: smoke test images
          command: |
            docker/scripts/test_all.sh << parameters.image-tag >>
      - run:
          name: save images to workspace
          command: |
            mkdir -p workspace
            docker/scripts/save_all.sh workspace/images.tar.gz << parameters.image-tag >>
      - persist_to_workspace:
          root: workspace
          paths:
            - images.tar.gz

  load_docker_from_workspace:
    description: "Load the docker images from workspace"
    parameters:
      use_ecr:
        type: boolean
        default: false
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: load image
          command: |
            gunzip /tmp/workspace/images.tar.gz
            docker load -i /tmp/workspace/images.tar
      - do_docker_login:
          use_ecr: << parameters.use_ecr >>

  push_docker_image:
    description: "Push a docker image up to a registry"
    parameters:
      registry:
        type: string
        default: ""
      image-tag:
        type: string
      source-tag:
        type: string
        default: ""
    steps:
      - do_docker_bash
      - run:
          name: retag images
          command: |
            docker/scripts/retag_all.sh << parameters.source-tag >> << parameters.image-tag >>
      - run:
          name: push images
          command: |
            docker/scripts/push_all.sh << parameters.image-tag >> << parameters.registry >>

  delete_docker_image:
    description: "Delete a image from the workspace"
    steps:
      - run:
          name: wipe image
          command: |
            mkdir -p workspace
            echo "" > ./workspace/images.tar.gz
      - persist_to_workspace:
          root: workspace
          paths:
            - images.tar.gz

  check_tag_for_major_release:
    description: "Check circle_tag to see if its a major release and export it, halt if not."
    steps:
      - run:
          name: check tag for major release
          command: |
            # Pull major tag
            IFS="."
            read MAJOR MINOR PATCH \<< EOF
            $CIRCLE_TAG
            EOF
            unset IFS
            # Exit early if we're a non-numeric patch value.
            echo $PATCH | grep -E "[^0-9]" && circleci-agent step halt && exit 0
            DOCKER_TAG=$MAJOR.x.x
            echo "Found DOCKER_TAG=${DOCKER_TAG}"
            echo "export DOCKER_TAG=${DOCKER_TAG}" >> $BASH_ENV

jobs:

  osx38:
    parallelism: 4
    macos:
      xcode: "12.2.0"

    environment:
      PYVERS: 3.8
      CODECOV_FLAG: osx
      CODECOV_PREFIX: osx
      COVERAGE_ARGS: --cov synapse --no-cov-on-fail

    working_directory: /Users/distiller/repo

    steps:
      - test_steps_osx

  python37:
    parallelism: 8
    docker:
      - image: cimg/python:3.7
        environment:
          PYVERS: 3.7
          RUN_SYNTAX: 1
          SYN_VENDOR_TEST: 1
          CODECOV_FLAG: linux
          SYN_REGRESSION_REPO: ~/git/synapse-regression
          COVERAGE_ARGS: --cov synapse --no-cov-on-fail

    working_directory: ~/repo

    steps:
      - test_steps_python

  python38:
    parallelism: 8
    docker:
      - image: cimg/python:3.8
        environment:
          PYVERS: 3.8
          RUN_SYNTAX: 1
          SYN_VENDOR_TEST: 1
          CODECOV_FLAG: linux
          SYN_REGRESSION_REPO: ~/git/synapse-regression
          COVERAGE_ARGS: --cov synapse --no-cov-on-fail

    working_directory: ~/repo

    steps:
      - test_steps_python

  python310:
    parallelism: 8
    docker:
      - image: cimg/python:3.10
        environment:
          PYVERS: 3.10
          RUN_SYNTAX: 1
          SYN_VENDOR_TEST: 1
          CODECOV_FLAG: linux
          SYN_REGRESSION_REPO: ~/git/synapse-regression
          COVERAGE_ARGS: --cov synapse --no-cov-on-fail

    working_directory: ~/repo

    steps:
      - test_steps_python

  python37_replay:
    parallelism: 6
    docker:
      - image: cimg/python:3.7
        environment:
          PYVERS: 3.7
          RUN_SYNTAX: 1
          CODECOV_FLAG: linux_replay
          SYN_REGRESSION_REPO: ~/git/synapse-regression
          COVERAGE_ARGS: --cov synapse --no-cov-on-fail
          SYNDEV_NEXUS_REPLAY: 1

    working_directory: ~/repo

    steps:
      - test_steps_python_replay

  python38_replay:
    parallelism: 6
    docker:
      - image: cimg/python:3.8
        environment:
          PYVERS: 3.8
          RUN_SYNTAX: 1
          CODECOV_FLAG: linux_replay
          SYN_REGRESSION_REPO: ~/git/synapse-regression
          COVERAGE_ARGS: --cov synapse --no-cov-on-fail
          SYNDEV_NEXUS_REPLAY: 1

    working_directory: ~/repo

    steps:
      - test_steps_python_replay

  python310_replay:
    parallelism: 6
    docker:
      - image: cimg/python:3.10
        environment:
          PYVERS: 3.10
          RUN_SYNTAX: 1
          CODECOV_FLAG: linux_replay
          SYN_REGRESSION_REPO: ~/git/synapse-regression
          COVERAGE_ARGS: --cov synapse --no-cov-on-fail
          SYNDEV_NEXUS_REPLAY: 1

    working_directory: ~/repo

    steps:
      - test_steps_python_replay

  doctests:
    parallelism: 1
    docker:
      - image: cimg/python:3.8
        environment:
          PYVERS: 3.8

    working_directory: ~/repo

    steps:
      - test_steps_doc

  python_package_smoketest:
    docker:
      - image: cimg/python:3.8
        environment:
          PYPI_SMOKE_CODE: import synapse; print(synapse.version)
          PYTHON_TAG: py38

    steps:
      - deploy_pypi_prologue
      - deploy_pypi_wheel_build
      - deploy_pypi_sdist_build

  deploy_pypi:
    docker:
      - image: cimg/python:3.8
        environment:
          PYPI_SMOKE_CODE: import synapse; print(synapse.version)
          PYTHON_TAG: py38

    steps:
      - deploy_pypi_prologue
      - deploy_pypi_tag_verify
      - deploy_pypi_wheel_build
      - deploy_pypi_sdist_build
      - deploy_pypi_upload

  deploy_pypi_37:
    docker:
      - image: cimg/python:3.7
        environment:
          PYPI_SMOKE_CODE: import synapse; print(synapse.version)
          PYTHON_TAG: py37

    steps:
      - deploy_pypi_prologue
      - deploy_pypi_tag_verify
      - deploy_pypi_wheel_build
      - deploy_pypi_upload

  build_docker_branch:
    docker:
      - image: docker:20.10.1
    steps:
      - build_docker:
          image-tag: ${CIRCLE_BRANCH}

  push_docker_branch:
    docker:
      - image: docker:20.10.1
    steps:
      - checkout
      - load_docker_from_workspace
      - push_docker_image:
          image-tag: ${CIRCLE_BRANCH}

  push_docker_branch_ecr:
    docker:
      - image: docker:20.10.1
    steps:
      - checkout
      - load_docker_from_workspace:
          use_ecr: true
      - push_docker_image:
          image-tag: ${CIRCLE_BRANCH}
          registry: ${AWS_ECR_REGISTRY}

  delete_docker_branch:
    docker:
      - image: docker:20.10.1
    steps:
      - delete_docker_image

  build_docker_tag:
    docker:
      - image: docker:20.10.1
    steps:
      - build_docker:
          image-tag: ${CIRCLE_TAG}

  push_docker_tag:
    docker:
      - image: docker:20.10.1
    # Use a shell override to force a login shell that loads profile for each step.
    shell: /bin/sh -leo pipefail
    environment:
      - BASH_ENV: /etc/profile
    steps:
      - checkout
      - load_docker_from_workspace
      - push_docker_image:
          image-tag: ${CIRCLE_TAG}
      - check_tag_for_major_release
      - push_docker_image:
          image-tag: ${DOCKER_TAG}
          source-tag: ${CIRCLE_TAG}

  push_docker_tag_ecr:
    docker:
      - image: docker:20.10.1
    # Use a shell override to force a login shell that loads profile for each step.
    shell: /bin/sh -leo pipefail
    environment:
      - BASH_ENV: /etc/profile
    steps:
      - checkout
      - load_docker_from_workspace:
          use_ecr: true
      - push_docker_image:
          image-tag: ${CIRCLE_TAG}
          registry: ${AWS_ECR_REGISTRY}
      - check_tag_for_major_release
      - push_docker_image:
          image-tag: ${DOCKER_TAG}
          source-tag: ${CIRCLE_TAG}
          registry: ${AWS_ECR_REGISTRY}

  delete_docker_tag:
    docker:
      - image: docker:20.10.1
    steps:
      - delete_docker_image


workflows:
  version: 2
  run_tests:
    jobs:
      - doctests:
          filters:
            tags:
              only: /.*/
            branches:
               only: /.*/

      - osx38:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore: /.*/

      - python37:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - python38:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - python310:
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master

      - python37_replay:
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master

      - python38_replay:
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master

      - python310_replay:
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master

      - python_package_smoketest:
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master

      - deploy_pypi:
          requires:
            - doctests
            - python37
            - python38
            - python37_replay
            - python38_replay
            - python_package_smoketest
          context:
            - PublicPypiAccess
          filters:
            tags:
              only: /^v2\.[0-9]+\.[0-9]+((a|b|rc)[0-9]*)?$/
            branches:
              ignore: /.*/

      - deploy_pypi_37:
          requires:
            - doctests
            - python37
            - python38
            - python37_replay
            - python38_replay
            - python_package_smoketest
          context:
            - PublicPypiAccess
          filters:
            tags:
              only: /^v2\.[0-9]+\.[0-9]+((a|b|rc)[0-9]*)?$/
            branches:
              ignore: /.*/

      - gh-release/dorelease:
          requires:
            - doctests
            - python37
            - python38
            - python37_replay
            - python38_replay
            - python_package_smoketest
          context:
            - GithubMachine
          filters:
            tags:
              only: /^v2\.[0-9]+\.[0-9]+((a|b|rc)[0-9]*)?$/
            branches:
              ignore: /.*/

      - build_docker_branch:
          requires:
            - doctests
            - python37
            - python38
          filters:
            branches:
              only:
                - master

      - push_docker_branch:
          requires:
            - build_docker_branch
          context:
            - SynapseDockerCloudUpload

      - push_docker_branch_ecr:
          requires:
            - build_docker_branch
          context:
            - AWSEcrPusherOSS

      - delete_docker_branch:
          requires:
            - push_docker_branch
            - push_docker_branch_ecr

      - build_docker_tag:
          requires:
            - doctests
            - python37
            - python38
          filters:
            tags:
              only: /^v2\.[0-9]+\.[0-9]+((a|b|rc)[0-9]*)?$/
            branches:
              ignore: /.*/

      - push_docker_tag:
          requires:
            - build_docker_tag
          context:
            - SynapseDockerCloudUpload
          filters:
            tags:
              only: /^v2\.[0-9]+\.[0-9]+((a|b|rc)[0-9]*)?$/
            branches:
              ignore: /.*/

      - push_docker_tag_ecr:
          requires:
            - build_docker_tag
          context:
            - AWSEcrPusherOSS
          filters:
            tags:
              only: /^v2\.[0-9]+\.[0-9]+((a|b|rc)[0-9]*)?$/
            branches:
              ignore: /.*/

      - delete_docker_tag:
          requires:
            - push_docker_tag
            - push_docker_tag_ecr
          filters:
            tags:
              only: /^v2\.[0-9]+\.[0-9]+((a|b|rc)[0-9]*)?$/
            branches:
              ignore: /.*/

  nightly:
    triggers:
      - schedule:
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - doctests
      - python38
      - python38_replay
      - python310
      - python310_replay

  weekly:
    triggers:
      - schedule:
          cron: "0 12 1 * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - osx38
      - python37
      - python37_replay
