# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

commands:
  do_report_coverage:
    description: "Codecov report upload"
    steps:
      - run:
          name: Upload Coverage Results
          command: |
            # Activate the venv so that codecov bash uploader finds coverage
            . venv/bin/activate
            # Use the codecov call from the codecov orb..
            curl -s https://codecov.io/bash | bash -s -- \
              -t "${CODECOV_TOKEN}" \
              -n "${CODECOV_PREFIX}${PYVERS}node${CIRCLE_NODE_INDEX}" \
              -F "${CODECOV_FLAG}" \
              -Z || echo 'Codecov upload failed'

  do_venv_setup:
    description: "Setup venv for testing"
    steps:
      - run:
          name: setup venv
          command: |
            python3 -m venv --copies venv
            . venv/bin/activate
            python3 -m pip install -U wheel pip pytest pytest-cov pycodestyle

      - run:
          name: install synapse
          command: |
            . venv/bin/activate
            python3 -m pip install -U --upgrade-strategy=eager -e .

  do_test_execution:
    description: "Execute unit tests via pytest"
    steps:
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            mkdir test-reports
            circleci tests glob synapse/tests/test_*.py | circleci tests split --split-by=timings | xargs python3 -m pytest -v -s -rs --durations 6 --maxfail 6 -p no:logging --junitxml=test-reports/junit.xml ${COVERAGE_ARGS}

  test_steps_doc:
    description: "Documentation test steps"
    steps:
      - checkout

      - run:
          name: install deps
          command: |
            sudo apt-get -y install pandoc

      - restore_cache:
          keys:
            - v1-docvenv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: setup venv
          command: |
            python3 -m venv --copies venv
            . venv/bin/activate
            python3 -m pip install -U wheel pip

      - run:
          name: install synapse requirements
          command: |
            . venv/bin/activate
            python3 setup.py egg_info
            grep -v -E "^\[" synapse.egg-info/requires.txt > _requirements.txt
            python3 -m pip install -U --upgrade-strategy=eager -r _requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-docvenv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: executing docs jupyter notebooks
          command: |
            . venv/bin/activate
            ./scripts/doctests.py

  test_steps_python:
    description: "Python test steps"
    steps:
      - checkout

      - run:
          name: checkout regression repo
          command: |
            git clone https://github.com/vertexproject/synapse-regression ~/git/synapse-regression

      - run:
          name: install deps
          command: |
            sudo apt-get -y install cron

      - restore_cache:
          keys:
            - v2-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - do_venv_setup

      - save_cache:
          paths:
            - ./venv
          key: v2-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: syntax
          command: |
            . venv/bin/activate
            pycodestyle --max-line-length=120 --select E111,E101,E201,E202,E203,E221,E222,E223,E224,E225,E226,E227,E228,E231,E241,E242,E251,E303,E304,E502,E711,E712,E713,E714,E721,E741,E742,E743,W191,W291,W293,W292,W391,W602,W603 synapse
            pycodestyle --max-line-length=120 --select E111,E101,E201,E202,E203,E221,E222,E223,E224,E225,E226,E227,E228,E231,E241,E242,E251,E303,E304,E502,E711,E712,E713,E714,E721,E741,E742,E743,W191,W291,W293,W292,W391,W602,W603 scripts

      - do_test_execution
      - do_report_coverage

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

  test_steps_osx:
    description: "OSX Test Steps"
    steps:
      - checkout

      - restore_cache:
          keys:
            - v5-osx-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - do_venv_setup

      - save_cache:
          paths:
            - ./venv
          key: v5-osx-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - do_test_execution
      - do_report_coverage

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

  deploy_to_pypi:
    description: "Publish packages to pypi"
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: install python dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -U wheel pip twine
            python3 -m pip install -U -r requirements_dev.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: verify git tag vs. version
          command: |
            env | grep -i circle
            . venv/bin/activate
            python setup.py verify

      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

      - run:
          name: create packages
          command: |
            . venv/bin/activate
            python setup.py sdist
            python setup.py bdist_wheel --python-tag=py37

      - run:
          name: upload to pypi
          command: |
            . venv/bin/activate
            twine upload dist/*

  do_docker_login:
    description: "Login to docker"
    steps:
      - run:
          name: docker login
          command: |
            docker login --username "${DOCKER_USERNAME}" --password "${DOCKER_PASSWORD}"

  deploy_docker_tags:
    description: "Deploy current tag images to docker"
    steps:
      - checkout
      - setup_remote_docker
      - do_docker_login
      - run:
          name: build images
          command: |
            docker build -t vertexproject/synapse:${CIRCLE_TAG} -f Dockerfile .
            docker build -t vertexproject/synapse-axon:${CIRCLE_TAG} -f docker/images/axon/Dockerfile .
            docker build -t vertexproject/synapse-cortex:${CIRCLE_TAG} -f docker/images/cortex/Dockerfile .
            docker build -t vertexproject/synapse-cryotank:${CIRCLE_TAG} -f docker/images/cryotank/Dockerfile .
      - run:
          name: tag and push container
          command: |
            docker push vertexproject/synapse:${CIRCLE_TAG}
            docker push vertexproject/synapse-axon:${CIRCLE_TAG}
            docker push vertexproject/synapse-cortex:${CIRCLE_TAG}
            docker push vertexproject/synapse-cryotank:${CIRCLE_TAG}

  deploy_docker_02x:
    description: "Deploy current release tag to docker as v0.2.x"
    steps:
      - checkout
      - setup_remote_docker
      - do_docker_login
      - run:
          name: build image
          command: |
            docker build -t vertexproject/synapse:v0.2.x -f Dockerfile .
            docker build -t vertexproject/synapse-axon:v0.2.x -f docker/images/axon/Dockerfile .
            docker build -t vertexproject/synapse-cortex:v0.2.x -f docker/images/cortex/Dockerfile .
            docker build -t vertexproject/synapse-cryotank:v0.2.x -f docker/images/cryotank/Dockerfile .
      - run:
          name: tag and push container
          command: |
            docker push vertexproject/synapse:v0.2.x
            docker push vertexproject/synapse-axon:v0.2.x
            docker push vertexproject/synapse-cortex:v0.2.x
            docker push vertexproject/synapse-cryotank:v0.2.x

  deploy_docker_branches:
    description: "Deploy current branch images to docker"
    steps:
      - checkout
      - setup_remote_docker
      - do_docker_login
      - run:
          name: build images
          command: |
            docker build -t vertexproject/synapse:${CIRCLE_BRANCH} -f Dockerfile .
            docker build -t vertexproject/synapse-axon:${CIRCLE_BRANCH} -f docker/images/axon/Dockerfile .
            docker build -t vertexproject/synapse-cortex:${CIRCLE_BRANCH} -f docker/images/cortex/Dockerfile .
            docker build -t vertexproject/synapse-cryotank:${CIRCLE_BRANCH} -f docker/images/cryotank/Dockerfile .
      - run:
          name: tag and push container
          command: |
            docker push vertexproject/synapse:${CIRCLE_BRANCH}
            docker push vertexproject/synapse-axon:${CIRCLE_BRANCH}
            docker push vertexproject/synapse-cortex:${CIRCLE_BRANCH}
            docker push vertexproject/synapse-cryotank:${CIRCLE_BRANCH}

jobs:

  osx37:
    parallelism: 4
    macos:
      xcode: "10.2.0"

    environment:
      PYVERS: 3.7
      CODECOV_FLAG: osx
      CODECOV_PREFIX: osx
      COVERAGE_ARGS: --cov synapse --no-cov-on-fail

    working_directory: /Users/distiller/repo

    steps:
      - test_steps_osx

  python37:
    parallelism: 6
    docker:
      - image: circleci/python:3.7
        environment:
          PYVERS: 3.7
          CODECOV_FLAG: linux
          SYN_REGRESSION_REPO: ~/git/synapse-regression
          COVERAGE_ARGS: --cov synapse --no-cov-on-fail

    working_directory: ~/repo

    steps:
      - test_steps_python

  doctests:
    parallelism: 1
    docker:
      - image: circleci/python:3.7
        environment:
          PYVERS: 3.7

    working_directory: ~/repo

    steps:
      - test_steps_doc

  deploy_pypi:
    docker:
      - image: circleci/python:3.7

    steps:
      - deploy_to_pypi

  docker_tags:
    docker:
      - image: docker:18.05.0-ce
    steps:
      - deploy_docker_tags

  docker_branches:
    docker:
      - image: docker:18.05.0-ce
    steps:
      - deploy_docker_branches

  docker_tags_02x:
    docker:
      - image: docker:18.05.0-ce
    steps:
      - deploy_docker_02x

workflows:
  version: 2
  run_tests:
    jobs:
      - doctests:
          filters:
            tags:
              only: /.*/
            branches:
               only: /.*/

      - osx37:
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master

      - python37:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - deploy_pypi:
          requires:
            - doctests
            - python37
          filters:
            tags:
              only: /^v0\.2\.[0-9]+((a|b|rc)[0-9])?$/
            branches:
              ignore: /.*/

      - docker_branches:
          requires:
            - doctests
            - python37
          filters:
            branches:
              only:
                - master

      - docker_tags:
          requires:
            - doctests
            - python37
          filters:
            tags:
              only: /^v0\.2\.[0-9]+((a|b|rc)[0-9])?$/
            branches:
              ignore: /.*/

      - docker_tags_02x:
          requires:
            - doctests
            - python37
          filters:
            tags:
              only: /^v0\.2\.[0-9]+((a|b|rc)[0-9])?$/
            branches:
              ignore: /.*/

  nightly:
    triggers:
      - schedule:
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - 01x
                - master
    jobs:
      - doctests
      - python37
