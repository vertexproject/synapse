# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

doc_test_steps:  &doc_test_steps
  steps:
    - checkout

    - run:
        name: install deps
        command: |
          sudo apt-get -y install pandoc

    - restore_cache:
        keys:
          - v1-docvenv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

    - run:
        name: setup venv
        command: |
          python3 -m venv --copies venv
          . venv/bin/activate
          python3 -m pip install -U wheel pip

    - run:
        name: install synapse requirements
        command: |
          . venv/bin/activate
          python3 setup.py egg_info
          grep -v -E "^\[" synapse.egg-info/requires.txt > _requirements.txt
          python3 -m pip install -r _requirements.txt

    - save_cache:
        paths:
          - ./venv
        key: v1-docvenv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

    - run:
        name: executing docs jupyter notebooks
        command: |
          . venv/bin/activate
          ./scripts/doctests.py

test_steps:  &test_steps
  steps:
    - checkout
    - run:
        name: install deps
        command: |
          sudo apt-get -y install cron

    - restore_cache:
        keys:
        - v1-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

    - run:
        name: setup venv
        command: |
          python3 -m venv --copies venv
          . venv/bin/activate
          python3 -m pip install -U wheel pip pytest pytest-cov pycodestyle codecov

    - run:
        name: install synapse
        command: |
          . venv/bin/activate
          python3 -m pip install -e .

    - save_cache:
        paths:
          - ./venv
        key: v1-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

    - run:
        name: syntax
        command: |
          . venv/bin/activate
          if [ -n "${RUN_SYNTAX}" ]; then pycodestyle --max-line-length=120 --select E111,E101,E201,E202,E203,E221,E222,E223,E224,E225,E226,E227,E228,E231,E241,E242,E251,E303,E304,E502,E711,E712,E713,E714,E721,E741,E742,E743,W191,W291,W293,W292,W391,W602,W603 synapse; fi;
          if [ -n "${RUN_SYNTAX}" ]; then pycodestyle --max-line-length=120 --select E111,E101,E201,E202,E203,E221,E222,E223,E224,E225,E226,E227,E228,E231,E241,E242,E251,E303,E304,E502,E711,E712,E713,E714,E721,E741,E742,E743,W191,W291,W293,W292,W391,W602,W603 scripts; fi;

    - run:
        name: run tests
        command: |
          . venv/bin/activate
          mkdir test-reports
          circleci tests glob synapse/tests/test_*.py | circleci tests split --split-by=timings | xargs python -m pytest -v -s -rs --durations 6 --maxfail 6 -p no:logging --junitxml=test-reports/junit.xml ${COVERAGE_ARGS}

    - run:
        name: report coverage
        command: |
          . venv/bin/activate
          if [ -n "${COVERAGE_ARGS}" ]; then codecov --name ${PYVERS}node${CIRCLE_NODE_INDEX} ${CODECOV_ARGS}; fi;

    - store_test_results:
        path: test-reports

    - store_artifacts:
        path: test-reports

osx_test_steps:  &osx_test_steps
  steps:
      - checkout

      - restore_cache:
          keys:
          - v4-osx-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: setup venv
          command: |
            python3 -m venv --copies venv
            . venv/bin/activate
            python3 -m pip install -U wheel pip pytest pytest-cov pycodestyle codecov

      - run:
          name: install synapse
          command: |
            . venv/bin/activate
            python3 -m pip install -e .

      - save_cache:
          paths:
            - ./venv
          key: v4-osx-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            mkdir test-reports
            circleci tests glob synapse/tests/test_*.py | circleci tests split --split-by=timings | xargs python3 -m pytest -v -s -rs --durations 6 --maxfail 6 -p no:logging --junitxml=test-reports/junit.xml ${COVERAGE_ARGS}

      - run:
          name: report coverage
          command: |
            . venv/bin/activate
            if [ -n "${COVERAGE_ARGS}" ]; then codecov --name ${PYVERS}node${CIRCLE_NODE_INDEX} ${CODECOV_ARGS}; fi;

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

jobs:

  osx37:
    parallelism: 1
    macos:
      xcode: "10.0.0"

    environment:
      COVERAGE_ARGS: --cov synapse --no-cov-on-fail
      PYVERS: 3.7

    working_directory: ~/repo

    <<: *osx_test_steps

  python37:
    parallelism: 6
    docker:
      - image: circleci/python:3.7
        environment:
          CODECOV_ARGS: --required
          COVERAGE_ARGS: --cov synapse --no-cov-on-fail
          PYVERS: 3.7

    working_directory: ~/repo

    <<: *test_steps

  doctests:
    parallelism: 1
    docker:
      - image: circleci/python:3.7
        environment:
          PYVERS: 3.7

    working_directory: ~/repo

    <<: *doc_test_steps


workflows:
  version: 2
  run_tests:
    jobs:
      - doctests
      - osx37
      - python37
