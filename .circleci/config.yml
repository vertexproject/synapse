# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

test_steps:  &test_steps
  steps:
    - checkout
    - run:
        name: install deps
        command: |
          sudo apt-get -y install cron

    - restore_cache:
        keys:
        - v1-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

    - run:
        name: setup venv
        command: |
          python3 -m venv --copies venv
          . venv/bin/activate
          python3 -m pip install -U wheel pip pytest pytest-cov pycodestyle codecov

    - run:
        name: install synapse
        command: |
          . venv/bin/activate
          python3 -m pip install -e .

    - save_cache:
        paths:
          - ./venv
        key: v1-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}

    - run:
        name: syntax
        command: |
          . venv/bin/activate
          if [ -n "${RUN_SYNTAX}" ]; then pycodestyle --max-line-length=120 --select E111,E101,E201,E202,E203,E221,E222,E223,E224,E225,E226,E227,E228,E231,E241,E242,E251,E303,E304,E502,E711,E712,E713,E714,E721,E741,E742,E743,W191,W291,W293,W292,W391,W602,W603 synapse; fi;
          if [ -n "${RUN_SYNTAX}" ]; then pycodestyle --max-line-length=120 --select E111,E101,E201,E202,E203,E221,E222,E223,E224,E225,E226,E227,E228,E231,E241,E242,E251,E303,E304,E502,E711,E712,E713,E714,E721,E741,E742,E743,W191,W291,W293,W292,W391,W602,W603 scripts; fi;

    - run:
        name: run tests
        command: |
          . venv/bin/activate
          mkdir test-reports
          circleci tests glob synapse/tests/test_*.py | circleci tests split --split-by=timings | xargs python -m pytest -v -s -rs --durations 6 --maxfail 6 -p no:logging --junitxml=test-reports/junit.xml ${COVERAGE_ARGS}

    - run:
        name: report coverage
        command: |
          . venv/bin/activate
          if [ -n "${COVERAGE_ARGS}" ]; then codecov --name ${IMAGE_VERSION}node${CIRCLE_NODE_INDEX} --required; fi;

    - store_test_results:
        path: test-reports

    - store_artifacts:
        path: test-reports

osx_test_steps:  &osx_test_steps
  steps:
      - checkout

      - restore_cache:
          keys:
          - v3-osx-pyvenv-{{ .Environment.CIRCLE_STAGE }}-{{ checksum ".circleci/pyenv_osx.sh" }}

      - run:
          name: pyenv install
          command: |
            . .circleci/pyenv_osx.sh

      - save_cache:
          paths:
            - ~/.pyenv
            - ~/.bash_profile
          key: v3-osx-pyvenv-{{ .Environment.CIRCLE_STAGE }}-{{ checksum ".circleci/pyenv_osx.sh" }}

      - restore_cache:
          keys:
          - v2-osx-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}-{{ checksum ".circleci/venv_osx.sh" }}

      - run:
          name: venv setup
          command: |
            . .circleci/venv_osx.sh

      - run:
          name: install synapse
          command: |
            source ~/.bash_profile
            pyenv shell syn36
            python3 -m pip install -e .

      - save_cache:
          paths:
            - ~/.pyenv/versions
          key: v2-osx-venv-{{ .Environment.CIRCLE_STAGE }}-{{ .Branch }}-{{ checksum "setup.py" }}-{{ checksum ".circleci/venv_osx.sh" }}

      - run:
          name: run tests
          command: |
            source ~/.bash_profile
            pyenv shell syn36
            mkdir test-reports
            circleci tests glob synapse/tests/test_*.py | circleci tests split --split-by=timings | xargs python3 -m pytest -v -s -rs --durations 6 --maxfail 6 -p no:logging --junitxml=test-reports/junit.xml ${COVERAGE_ARGS}

      - run:
          name: report coverage
          command: |
            source ~/.bash_profile
            pyenv shell syn36
            if [ -n "${COVERAGE_ARGS}" ]; then codecov --name ${IMAGE_VERSION}node${CIRCLE_NODE_INDEX} --required; fi;

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

jobs:

  osx36:
    parallelism: 7
    macos:
      xcode: "9.3.0"

    environment:
      COVERAGE_ARGS: --cov synapse --no-cov-on-fail

    working_directory: ~/repo

    <<: *osx_test_steps

  python36:
    parallelism: 7
    docker:
      - image: circleci/python:3.6
        environment:
          COVERAGE_ARGS: --cov synapse --no-cov-on-fail
          IMAGE_VERSION: 3.6

    working_directory: ~/repo

    <<: *test_steps

workflows:
  version: 2
  run_tests:
    jobs:
#      - osx36
      - python36
