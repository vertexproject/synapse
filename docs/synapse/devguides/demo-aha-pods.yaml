#
# Each set of services will have its own block of items which comprise it
# with the following parts:
#
#
# 1. A persistent store for data. This example uses Digital Ocean block
#    volumes.
# 2. Deployments specs
# 3. Service specs for pod to pod communication
# 4. LE certman example
# 5. Traefik IngressRouteTCP example
#
# The services assume there is a secret regcred used for image pulling.
#
#######################################################################
# Part 0 - Secrets used by all pods
apiVersion: v1
kind: Secret
metadata:
  name: ex01-passwds
  labels:
    app: demostack
data:
  # secretpass
  corepass: "c2VjcmV0cGFzcw=="
  # ssapterces
  svcpass: "c3NhcHRlcmNlcw=="
#
# Part 1 - The Cortex
#
# The Cortex just needs a PVC, its deployment, and a service definition so
# that Optic and any other services that need to connect to it can do so.
#
# The Cortex is configured to connect to an Aha server (defined later) that
# can be used for doing service connections.
#
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: examplestack-ex01-cortex
  labels:
    app: examplestack
    instance: ex01
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: do-block-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: examplestack-ex01-cortex
  labels:
    app: cortex
    type: examplestack
    instance: ex01
spec:
  selector:
    matchLabels:
      app: cortex
  template:
    metadata:
      labels:
        app: cortex
        instance: ex01
    spec:
      volumes:
        - name: ex-data
          persistentVolumeClaim:
            claimName: examplestack-ex01-cortex
      containers:
      - name: core00
        image: vertexproject/synapse-cortex:v2.x.x
        command: ["python"]
        args: ["-O", "-m", "synapse.servers.cortex", "/vertex/storage"]
        env:
          - name: SYN_CORTEX_DMON_LISTEN
            value: "tcp://0.0.0.0:27492/"
          - name: SYN_CORTEX_STORM_LOG
            value: "true"
          - name: SYN_CORTEX_STORM_LOG_LEVEL
            value: INFO
          - name: SYN_CORTEX_HTTPS_PORT
            value: null
          - name: SYN_LOG_LEVEL
            value: DEBUG
          - name: SYN_CORTEX_AHA_NETWORK
            value: aha.demo.net
          - name: SYN_CORTEX_AHA_NAME
            value: cortex
          - name: SYN_CORTEX_AUTH_PASSWD
            valueFrom:
              secretKeyRef:
                name: ex01-passwds
                key: corepass
          - name: SYN_SVC_PASSWD
            valueFrom:
              secretKeyRef:
                name: ex01-passwds
                key: svcpass
          - name: SYN_CORTEX_AHA_REGISTRY
            value: tcp://root:$(SYN_SVC_PASSWD)@examplestack-ex01-aha:27492/
          - name: SYN_CORTEX_AXON
            value: aha://root:$(SYN_SVC_PASSWD)@axon.aha.demo.net/
        volumeMounts:
          - mountPath: /vertex/storage
            name: ex-data
            subPath: core
        ports:
          - containerPort: 27492
        imagePullPolicy: Always
        startupProbe:
          failureThreshold: 6
          timeoutSeconds: 20
          periodSeconds: 20
          exec:
            command: ['python', '-m', 'synapse.tools.healthcheck', '-c', 'cell:///vertex/storage']
        livenessProbe:
          initialDelaySeconds: 20
          timeoutSeconds: 20
          periodSeconds: 20
          exec:
            command: ['python', '-m', 'synapse.tools.healthcheck', '-c', 'cell:///vertex/storage']
      restartPolicy: Always
      imagePullSecrets:
      - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: examplestack-ex01-cortex
  labels:
    instance: ex01
    app: cortex
  namespace: default
spec:
  selector:
    app: cortex
    instance: ex01
  ports:
    - port: 27492
      protocol: TCP
      name: telepath
#######################################################################
#
# Part 2 - Axon
#
# We add in blob storage through an Axon. It'll get it's own PVC, uses
# Aha and has its own service definition.
#
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: examplestack-ex01-axon
  labels:
    app: examplestack
    instance: ex01
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: do-block-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: examplestack-ex01-axon
  labels:
    app: axon
    type: examplestack
    instance: ex01
spec:
  selector:
    matchLabels:
      app: axon
  template:
    metadata:
      labels:
        app: axon
        instance: ex01
    spec:
      volumes:
        - name: ex-data
          persistentVolumeClaim:
            claimName: examplestack-ex01-axon
      containers:
      - name: axon00
        image: vertexproject/synapse-axon:v2.x.x
        env:
          - name: SYN_LOG_LEVEL
            value: DEBUG
          - name: SYN_AXON_DMON_LISTEN
            value: "tcp://0.0.0.0:27492"
          - name: SYN_AXON_HTTPS_PORT
            value: null
          - name: SYN_SVC_PASSWD
            valueFrom:
              secretKeyRef:
                name: ex01-passwds
                key: svcpass
          - name: SYN_AXON_AHA_REGISTRY
            value: tcp://root:$(SYN_SVC_PASSWD)@examplestack-ex01-aha:27492/
          - name: SYN_AXON_AUTH_PASSWD
            value: $(SYN_SVC_PASSWD)
          - name: SYN_AXON_AHA_NETWORK
            value: aha.demo.net
          - name: SYN_AXON_AHA_NAME
            value: axon
        volumeMounts:
          - mountPath: /vertex/storage
            name: ex-data
            subPath: axon
        imagePullPolicy: Always
        startupProbe:
          failureThreshold: 6
          timeoutSeconds: 20
          periodSeconds: 20
          exec:
            command: ['python', '-m', 'synapse.tools.healthcheck', '-c', 'cell:///vertex/storage']
        livenessProbe:
          initialDelaySeconds: 20
          timeoutSeconds: 20
          periodSeconds: 20
          exec:
            command: ['python', '-m', 'synapse.tools.healthcheck', '-c', 'cell:///vertex/storage']
      restartPolicy: Always
      imagePullSecrets:
      - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: examplestack-ex01-axon
  labels:
    instance: ex01
    app: axon
  namespace: default
spec:
  selector:
    app: axon
    instance: ex01
  ports:
    - port: 27492
      protocol: TCP
      name: telepath

#######################################################################
#
# Part 3 - Aha, Optic, Support services
#
# This includes an Aha cell for doing service registry, the Maxmind
# service, and the Optic service.
#
# It has the PVC, Deployment, and Service definitions; in addition to the
# Certman and Traefik configurations. Optic uses a init container to copy
# the cert-man certificates to its local cell storage prior to booting.
# Optic is made available through a Traefik front end via a IngresRouteTCP
# definition.
#
# Since the Certmanager certificates are pushed into the Optic PVC and used
# by the Optic webserver, the IngressRouteTCP is just passing through the TLS
# connection after doing SNI sniffing. This provides TLS encryption from
# an outside service directly to the Optic cell.
#

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: cert-ex01
  labels:
    app: examplestack
    instance: ex01
spec:
  secretName: ex01-staging-tls
  duration: 2160h # 90d
  renewBefore: 360h # 15d
  subject:
    organizations:
    - vertex project
  commonName: ex01.k8s.yourdomain.tld
  isCA: false
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  usages:
    - server auth
    - client auth
  dnsNames:
  - ex01.k8s.yourdomain.tld
  issuerRef:
    name: le-http-staging-issuer
    kind: ClusterIssuer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: examplestack-ex01-svcs
  labels:
    app: examplestack
    instance: ex01
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: do-block-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: examplestack-ex01-aha
  labels:
    app: aha
    type: examplestack
    instance: ex01
spec:
  selector:
    matchLabels:
      app: aha
  template:
    metadata:
      labels:
        app: aha
        instance: ex01
    spec:
      volumes:
        - name: ex-data
          persistentVolumeClaim:
            claimName: examplestack-ex01-svcs
      containers:
      - name: aha00
        image: vertexproject/synapse-aha:master
        env:
          - name: SYN_LOG_LEVEL
            value: DEBUG
          - name: SYN_AHACELL_DMON_LISTEN
            value: "tcp://0.0.0.0:27492"
          - name: SYN_AHACELL_AUTH_PASSWD
            valueFrom:
              secretKeyRef:
                name: ex01-passwds
                key: svcpass
          - name: SYN_AHACELL_HTTPS_PORT
            value: null
        volumeMounts:
          - mountPath: /vertex/storage
            name: ex-data
            subPath: aha
        imagePullPolicy: Always
        startupProbe:
          failureThreshold: 6
          timeoutSeconds: 20
          periodSeconds: 20
          exec:
            command: ['python', '-m', 'synapse.tools.healthcheck', '-c', 'cell:///vertex/storage']
        livenessProbe:
          initialDelaySeconds: 20
          timeoutSeconds: 20
          periodSeconds: 20
          exec:
            command: ['python', '-m', 'synapse.tools.healthcheck', '-c', 'cell:///vertex/storage']
      restartPolicy: Always
      imagePullSecrets:
      - name: regcred
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: examplestack-ex01-maxmind
  labels:
    app: maxmind
    type: examplestack
    instance: ex01
spec:
  selector:
    matchLabels:
      app: maxmind
  template:
    metadata:
      labels:
        app: maxmind
        instance: ex01
    spec:
      volumes:
        - name: ex-data
          persistentVolumeClaim:
            claimName: examplestack-ex01-svcs
      containers:
      - name: maxmind00
        image: vertexproject/synapse-maxmind:v2.x.x
        env:
          - name: SYN_LOG_LEVEL
            value: DEBUG
          - name: SYN_MAXMIND_DMON_LISTEN
            value: "tcp://0.0.0.0:27492"
          - name: SYN_MAXMIND_HTTPS_PORT
            value: null
          - name: SYN_SVC_PASSWD
            valueFrom:
              secretKeyRef:
                name: ex01-passwds
                key: svcpass
          - name: SYN_MAXMIND_AHA_REGISTRY
            value: tcp://root:$(SYN_SVC_PASSWD)@examplestack-ex01-aha:27492/
          - name: SYN_MAXMIND_AUTH_PASSWD
            value: $(SYN_SVC_PASSWD)
          - name: SYN_MAXMIND_AHA_NETWORK
            value: aha.demo.net
          - name: SYN_MAXMIND_AHA_NAME
            value: maxmind
        volumeMounts:
          - mountPath: /vertex/storage
            name: ex-data
            subPath: maxmind
        imagePullPolicy: Always
        startupProbe:
          failureThreshold: 6
          timeoutSeconds: 20
          periodSeconds: 20
          exec:
            command: ['python', '-m', 'synapse.tools.healthcheck', '-c', 'cell:///vertex/storage']
        livenessProbe:
          initialDelaySeconds: 20
          timeoutSeconds: 20
          periodSeconds: 20
          exec:
            command: ['python', '-m', 'synapse.tools.healthcheck', '-c', 'cell:///vertex/storage']
      restartPolicy: Always
      imagePullSecrets:
      - name: regcred
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: examplestack-ex01-optic
  labels:
    app: optic
    type: examplestack
    instance: ex01
spec:
  selector:
    matchLabels:
      app: optic
  template:
    metadata:
      labels:
        app: optic
        instance: ex01
    spec:
      volumes:
        - name: ex-data
          persistentVolumeClaim:
            claimName: examplestack-ex01-svcs
        - name: optic-tls
          secret:
            secretName: ex01-staging-tls
            items:
              - key: tls.key
                path: sslkey.pem
              - key: tls.crt
                path: sslcert.pem
      initContainers:
        - name: init-optic00
          image: vertexproject/synapse:v2.x.x
          imagePullPolicy: Always
          command: ['/bin/bash']
          args:
            - -c
            - >-
              cp -v --target-directory /vertex/storage /vertex/tls/sslkey.pem /vertex/tls/sslcert.pem
          volumeMounts:
            - name: optic-tls
              mountPath: /vertex/tls
              readOnly: true
            - name: ex-data
              mountPath: /vertex/storage
              subPath: optic
      containers:
      - name: optic00
        image: vertexproject/optic:v2.x.x
        env:
          - name: SYN_LOG_LEVEL
            value: DEBUG
          - name: SYN_OPTIC_EMAIL_HOST
            value: exim
          - name: SYN_OPTIC_DMON_LISTEN
            value: "null"
          - name: SYN_OPTIC_NETLOC
            value: "ex01.k8s.yourdomain.tld"
          - name: SYN_SVC_PASSWD
            valueFrom:
              secretKeyRef:
                name: ex01-passwds
                key: svcpass
          - name: SYN_OPTIC_AHA_REGISTRY
            value: tcp://root:$(SYN_SVC_PASSWD)@examplestack-ex01-aha:27492/
          - name: SYN_OPTIC_AXON
            value: aha://root:$(SYN_SVC_PASSWD)@axon.aha.demo.net/
          - name: SYN_CORTEX_PASSWD
            valueFrom:
              secretKeyRef:
                name: ex01-passwds
                key: corepass
          - name: SYN_OPTIC_CORTEX
            value: "aha://root:$(SYN_CORTEX_PASSWD)@cortex.aha.demo.net/"
        ports:
          - containerPort: 4443
        volumeMounts:
          - mountPath: /vertex/storage
            name: ex-data
            subPath: optic
        imagePullPolicy: Always
        startupProbe:
          failureThreshold: 6
          timeoutSeconds: 20
          periodSeconds: 20
          exec:
            command: ['python', '-m', 'synapse.tools.healthcheck', '-c', 'cell:///vertex/storage']
        livenessProbe:
          initialDelaySeconds: 20
          timeoutSeconds: 20
          periodSeconds: 20
          exec:
            command: ['python', '-m', 'synapse.tools.healthcheck', '-c', 'cell:///vertex/storage']
      restartPolicy: Always
      imagePullSecrets:
      - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: examplestack-ex01-aha
  labels:
    instance: ex01
    app: aha
  namespace: default
spec:
  selector:
    app: aha
    instance: ex01
  ports:
    - port: 27492
      protocol: TCP
      name: telepath
---
apiVersion: v1
kind: Service
metadata:
  name: examplestack-ex01-optic
  labels:
    instance: ex01
    app: cortex
  namespace: default
spec:
  selector:
    app: optic
    instance: ex01
  ports:
    - port: 4443
      protocol: TCP
      name: telepath
---
apiVersion: v1
kind: Service
metadata:
  name: examplestack-ex01-maxmind
  labels:
    instance: ex01
    app: aha
  namespace: default
spec:
  selector:
    app: maxmind
    instance: ex01
  ports:
    - port: 27492
      protocol: TCP
      name: telepath

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRouteTCP
metadata:
  name: examplestack-ex01-ingress
  labels:
    instance: ex01
    app: examplestack
spec:
  entryPoints:
    - websecure
  routes:
  - match: HostSNI(`ex01.k8s.yourdomain.tld`)
    services:
      - name: examplestack-ex01-optic
        port: 4443
  tls:
    passthrough: true
