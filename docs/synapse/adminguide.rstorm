.. highlight:: none

.. storm-cortex:: default


.. _adminguide:

Synapse Admin Guide
###################

This guide is designed for use by Synapse Administrators ("global admins"). Synapse Admins are typically
power-users with ``admin=true`` privileges on the :ref:`gloss-cortex` who are responsible for configuration
and management of a production instance of Synapse.

- For information on Synapse DevOps tasks, see the :ref:`devopsguide`.
- For information on Synapse deployment tasks, see the :ref:`deploymentguide`.

The Synapse Admin Guide provides important instructions and background information on topics related to
day-to-day Synapse administrative tasks, and focuses on using :ref:`gloss-storm` to carry out those tasks.

Synapse provides a number of additional methods that can be used to perform some or all of the tasks
described below; these methods are not covered in this guide. These include:

- :ref:`stormtypes-libs-header` that allow you to work with a broad range of objects in Synapse.
- Synapse tools that can be used from the host CLI (as opposed to the Storm CLI). Tools are available in
  the `synapse.tools`_ package of the :ref:`apidocs`. The :ref:`userguide` includes documentation on
  some of these :ref:`userguide_tools`.
- The :ref:`http-api`.

.. TIP::

  If you are a commercial Synapse user with the Synapse UI (Optic), see the `UI documentation`_ for
  information on performing these tasks using Optic. Optic simplifies many of Synapse's administrative
  tasks. However, we encourage you to review the information below for important background and an overview
  of the relevant topics.

.. _admin_tasks:

Common Admin Tasks
==================

.. _admin_enable_powerup:

Enable Synapse Power-Ups
------------------------

The Vertex Project provides a number of Power-Ups that extend the functionality of Synapse. For more
information on configuring your Cortex to use Rapid Power-Ups, see `the blog post on Synapse Power-Ups`_.

.. _admin_create_users_roles:

Create and Manage Users and Roles
---------------------------------

A :ref:`gloss-user` account is required to authenticate to and access Synapse. Having "a Synapse account" effectively
means having an account in the Cortex.

In Synapse, a :ref:`gloss-role` can be used to "group" users (users are **granted** specific roles). You can grant
(or deny) **permissions** to both users and roles by assigning **rules** that specify permissions.

Synapse includes the following built-in users and roles:

- **Root** user. The **root** account has **admin** (LINK) privileges in the Cortex. The **admin** status of
  the root account cannot be revoked, and the account cannot be locked / disabled.
- **All** role. The **all** role has **read** access to the Cortex (specifically, to any view with
  ``worldreadable=true``, which includes the **default** view). All user accounts are automatically granted
  the **all** role (are part of the **all** "group"); this role cannot be revoked.
  
For information on creating and managing users and roles with the commercial Optic UI, see the Synapse
`UI documentation`_.

.. NOTE::
  
  The descriptions and examples below assume that you have deployed Synapse using native Synapse management
  and authentication of users, roles, and permissions.


.. _admin_add_users:

Add Users
+++++++++

New users can be added from the Storm CLI with the :ref:`storm-auth-user-add` command. Newly created users
do not have any permissions (other than those associated with the built-in **all** role).

.. NOTE::
  
  Depending on how your users will access the Cortex, you may need to take additional steps before those
  users can log in. For example, if users will access Synapse using the Telepath API and client-side
  certificates, you will need to follow the steps described in the :ref:`enroll_cli_users` section of the
  :ref:`deploymentguide`.

**Examples:**

EXAMPLES GO HERE

.. TIP::
  
  User accounts are represented by a unique 128-bit identifier (iden). You can later change information about
  the user (such as the username or associated email address) without affecting the underlying account or any
  associated permissions.
  
.. _admin_manage_users:

Manage Users
++++++++++++

Managing user accounts (aside from assigning rules to specify permissions) consists of actions such as listing
users, viewing the details for a specific user, resetting the user's password, changing the username,
associating an email address with the user account, locking (disabling) the account, unlocking the account, or
deleting the account.

The various Storm ``auth.user.*`` commands can be used to manage user accounts (see :ref:`storm-auth`).

**Examples:**

EXAMPLES GO HERE

display / update / list / lock / unlock / delete

.. WARNING::
  
  We strongly encourage you to **lock/disable** accounts when necessary instead of deleting them. Changes to
  data in the Cortex (such as creating nodes, setting properties, or adding tags) are associated with the user
  account that made those changes. Deleting an account associated with past changes will prohibit you from
  identifying the user who made those changes.


.. _admin_add_roles:

Add Roles
+++++++++

New roles can be added from the Storm CLI with the :ref:`storm-auth-role-add` command.

.. NOTE::
  
  Newly created roles do not have any permissions or associated user accounts.


**Examples:**

Add a new role:

EXAMPLE GOES HERE

.. TIP::
  
  Roles are represented by a unique 128-bit identifier (iden). You can later change information about the role
  (such as the role name) without affecting the underlying role or any associated permissions or users.

.. _admin_manage_roles:

Manage Roles
++++++++++++

Managing roles (aside from assigning rules to specify permissions to roles, and granting or revoking roles from
users) consists of actions such as listing roles, viewing the details for a specific role, changing the name of
a role, or deleting a role.

The various Storm ``auth.role.*`` commands can be used to manage roles (see :ref:`storm-auth`).

**Examples:**

EXAMPLES GO HERE

display / rename / list / delete

.. NOTE::
  
  Deleting a role has no impact on any users who have been granted the role (other than losing any permissions
  provided by that role). The user accounts remain intact and the role is simply removed from each user's list
  of roles.

.. _admin_grant_roles:

Grant or Revoke Roles
+++++++++++++++++++++

**Granting** a role to a user allows the user to inherit the role's permissions. **Revoking** a role removes the
associated permissions from the user. It is not possible to grant a role to another role (i.e., roles cannot be
nested).

Roles can be granted or revoked using the ``auth.user.grant`` and ``auth.user.revoke`` commands. (COMMANDS PENDING)

.. NOTE::
  
  If you grant one or more roles to a user, and also grant permissions to the user directly, the user permissions
  will take precedence over the role permissions.
  
  In addition, the **order** in which roles are granted to a user matters, as each role's permissions rules are
  checked in sequence. Each role granted to a user is added to the end of the set of roles. To "reorder" roles,
  you must revoke them and grant them in the desired order (unless using the commercial Synapse UI, which allows
  drag-and-drop reordering). See :ref:`admin_permissions` for additional detail on permissions and precedence.

..  _admin_permissions:

Permissions
-----------

.. _admin_perms_background:

Background
++++++++++

Synapse provides a highly flexible system of role-based access control (RBAC). Rules are used to assign
permissions to users and / or roles, with a defined order of precedence for how permissions are evaluated.

Permissions can be assigned very broadly, such as allowing a user (or role) to create / modify / delete any node.
Permissions can also be very fine-grained, restricting users so that they can **only** create specific nodes, set
specific properties, create specific edges, or apply specific tags.

Before describing how to set and manage permissions, it is helpful to provide some terminology and an overview
of how permissions are used within Synapse.


**Services**

Synapse is designed as a modular set of **services.** A service can be thought of as a container used to run an
application. **Synapse services** make up the core Synapse architecture, and include the :ref:`gloss-cortex`
(data store), :ref:`gloss-axon` (file storage), and the commercial :ref:`gloss-optic` UI. Services handle user
authentication and authorization.

From a Synapse Admin perspective, you will primarily be concerned with managing user accounts and permissions to
(and within) the Synapse **Cortex.**

.. TIP::
  
  When we talk about "Synapse users" or "permissions to Synapse" we are generally referring to user accounts and
  roles in a Cortex, and permissions to a Cortex and its associated objects.
  
  Depending on your Synapse deployment, you may need to grant or manage permissions to additional Synapse services.
  See the sections on :ref:`admin_axon_perms` and :ref:`admin_power_perms` for details.





.. _admin_axon_perms:

Axon Permissions
++++++++++++++++

You must specifically grant users or roles permission to access (upload, check, or retrieve) files within a
storage Axon.

See the :ref:`deploy_axon` section of the :ref:`deploymentguide` for information on Axon deployment.

See the :ref:`devops-svc-axon` section of the :ref:`devopsguide` for information on Axon configuration, including
a description of Axon permissions.



.. _admin_power_perms:

Power-Up Permissions
++++++++++++++++++++

Synapse **Power-Ups** have their own sets of permissions that must be granted to users or roles to allow them
to use the Power-Up and any associated Storm commands. Specific permissions are documented in the **Admin Guide**
section of the `Power-Up documentation`_ for the individual Power-Up.

.. TIP::
  
  While most Vertex-provided Power-Ups are part of the commercial Synapse offering, the following `Rapid Power-Ups`_
  are also available for use with the community (open source) version of Synapse:
  
  - `Synapse-MISP`_
  - `Synapse-MITRE-ATT&CK`_
  - `Synapse-TOR`_







.. _admin_extend_model:

Add Extended Model Elements
---------------------------

The Synapse data model in a Cortex can be extended with custom forms (see :ref:`gloss-extended-form`)
and properties (see :ref:`gloss-extended-prop`) by using the model extension Storm Library
(:ref:`stormlibs-lib-model-ext`). Extended model forms and properties must have names beginning with an
underscore (``_``) to avoid potential conflicts with built-in model elements.

When adding a form, ``$lib.model.ext.addForm`` takes the following arguments:

``formname``
    Name of the form, must begin with an underscore (``_``) and contain at least one colon (``:``).

``basetype``
    The `Synapse data model type`_ for the form.

``typeopts``
    A dictionary of type specific options.

``typeinfo``
    A dictionary of info values for the form.

To add a new form named ``_foocorp:name``, which contains string values which will be
normalized to lowercase, with whitespace stripped from the beginning/end::

    $typeopts = ({'lower': $lib.true, 'strip': $lib.true})
    $typeinfo = ({'doc': 'Foocorp name.'})

    $lib.model.ext.addForm(_foocorp:name, str, $typeopts, $typeinfo)

If the form is no longer in use and there are no nodes of this form in the Cortex, it can be removed with::

    $lib.model.ext.delForm(_foocorp:name)

When adding properties, ``$lib.model.ext.addFormProp`` takes the following arguments:

``formname``
    Name of the form to add the property to, may be a built-in or extended model form.

``propname``
    Relative name of the property, must begin with an underscore (``_``).

``typedef``
    A tuple of (``type``, ``typeopts``) which defines the type for the property

``propinfo``
    A dictionary of info values for the property.

To add a property named ``_score`` to the ``_foocorp:name`` form which contains
int values between 0 and 100::

    $typeopts = ({'min': 0, 'max': 100})
    $propinfo = ({'doc': 'Score for this name.'})

    $lib.model.ext.addFormProp(_foocorp:name, _score, (int, $typeopts), $propinfo)

To add a property named ``_aliases`` to the ``_foocorp:name`` form which contains a unique array
of ``ou:name`` values::

    $typeopts = ({'type': 'ou:name', 'uniq': $lib.true})
    $propinfo = ({'doc': 'Aliases for this name.'})

    $lib.model.ext.addFormProp(_foocorp:name, _aliases, (array, $typeopts), $propinfo)

Properties may also be added to existing forms, for example, to add a property named
``_classification`` to ``inet:fqdn`` which must contain a string from a predefined set of
values::

    $typeopts = ({'enums': 'unknown,benign,malicious'})
    $propinfo = ({'doc': 'Classification for this FQDN.'})

    $lib.model.ext.addFormProp(inet:fqdn, _classification, (str, $typeopts), $propinfo)


Similar to ``$lib.model.ext.addFormProp``, ``$lib.model.ext.addUnivProp`` takes the same
``propname``, ``typedef``, and ``propinfo`` arguments, but applies to all forms.


.. _synapse.tools: https://synapse.docs.vertex.link/en/latest/synapse/autodocs/synapse.tools.html
.. _UI documentation: https://synapse.docs.vertex.link/projects/optic/en/latest/index.html
.. _the blog post on Synapse Power-Ups: https://vertex.link/blogs/synapse-power-ups/
.. _Synapse data model type: autodocs/datamodel_types.html
.. _Power-Up documentation: https://synapse.docs.vertex.link/en/latest/synapse/power_ups.html
.. _Rapid Power-Ups: https://synapse.docs.vertex.link/en/latest/synapse/power_ups/rapid_power_ups.html
.. _Synapse-MISP: https://synapse.docs.vertex.link/projects/rapid-powerups/en/latest/storm-packages/synapse-misp/index.html
.. _Synapse-MITRE-ATT&CK: https://synapse.docs.vertex.link/projects/rapid-powerups/en/latest/storm-packages/synapse-mitre-attack/index.html
.. _Synapse-TOR: https://synapse.docs.vertex.link/projects/rapid-powerups/en/latest/storm-packages/synapse-tor/index.html