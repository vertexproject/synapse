.. highlight:: none

.. storm-cortex:: default

.. _storm-ref-pivot:

Storm Reference - Pivoting
==========================

Pivot operations are performed on the output of a previous Storm operation such as a lift or filter.
A pivot operation navigates from one set of nodes to another based on some relationship between the
nodes. This relationship is commonly one of the following:

- The nodes have properties that share the same value and the same :ref:`gloss-type`.
- The nodes have properties that share the same value but are of different types.
- The nodes are joined by a :ref:`data-light-edge`.

While all node-to-node navigation is referred to generically as "pivoting", for clarity we make a
distinction with respect to Storm:

- a **pivot** operation navigates between nodes that share a property value; and
- a **traversal** operation navigates between nodes that are connected via a light edge. Traversal
  is also known as a "walk" operation (i.e., you can *traverse* a light edge or *walk* a light edge).

Pivots and traversals each have their own operator (symbol) used to represent the operation. The
operations can also be combined ("pivot and walk") in various ways using additional operators.

Generically, all variations of pivots and traversals (including combined operations) require:

- a set of source nodes;
- an operator (symbol) for the kind of operation to be performed; and
- the target node(s) for the operation.

In most cases, the target of the operation can be:

- a form name or form property name;
- a partial form name (form name wildcard match);
- an interface name or interface property name;
- a list of target form names; or
- the wildcard (asterisk) character ( ``*`` ).

.. NOTE::
  
  You cannot specify property **values** in pivot or traversal operations. Both of the following are
  invalid:
  
  ``inet:fqdn = vertex.link -> inet:dns:a:ipv4 = 127.0.0.1``
  
  ``media:news -(refs)> inet:fqdn = woot.com``
  
  If you want to pivot (or traverse) to a specific node or subset of nodes, you must navigate
  to the target forms, and then filter your results based on the property value(s) you are
  interested in:
  
  ``inet:fqdn = vertex.link -> inet:dns:a +:ipv4 = 127.0.0.1``
  
  ``media:news -(refs)> inet:fqdn +inet:fqdn = woot.com``

See :ref:`storm-ref-syntax` for an explanation of the syntax format used below.

See :ref:`storm-ref-type-specific` for details on special syntax or handling for specific data types.


.. _model-navigation:

Navigating the Data Model
-------------------------

To navigate the data in Synapse (pivot between properties or traverse light edges), it helps to
understand how forms, properties, and types are related, and to be familiar with common light
edge conventions and how they are used to connect various forms.

- The Synapse Data Model :ref:`dm-forms` documentation lists:
  
  - All forms in Synapse, with their associated properties and types.
  - The edges that can be used to link a given form (whether as the source or target of the edge).

- For :ref:`gloss-optic` users, Optic's `Data Model Explorer`_ allows you to search, cross-reference,
  and view data model objects. In addition to the information above, Data Model Explorer also lists
  all of the forms that a form is **referenced by** (i.e., where that form's type is a secondary property
  on another form).


.. _pivot-wildcard:

Using the Wildcard as a Target
------------------------------

You can use the wildcard ( ``*`` ) as the target of a pivot or traversal to represent "all the things"
that can be reached by your operation. One use for the wildcard is to "explore" a subset of connected
data - for example, if you are not sure what connections exist in your instance of Synapse, and you
want to see what's there.
  
Keep in mind that individual wildcard pivots or traversals do not show you **all** nodes that are
connected to your source nodes, only those nodes that are connected via the specific operation performed.
(See the examples below for details.)
  
The following Storm expression can be used to show **all** nodes that are connected to your source
nodes, regardless of the type of property pivot or edge traversal relationship:
  
::
  
  <source_nodes> tee { --> * } { <-- * }

The expression uses the Storm :ref:`storm-tee` command to perform two operations on the set of
source nodes (a :ref:`pivot-out-and-walk` and a :ref:`pivot-in-and-walk`, with the wildcard as
the target in each case) and return the combined results.

Note that this query is equivalent to using the `Explore button`_ in the Optic UI to navigate.

There are two minor exceptions to this "show me all the connections" query:

- It will not return connections to `edge nodes`_ where the source node is an :ref:`gloss-ndef`
  of an associated edge node. Edge nodes are not commonly used (in many cases, they have been
  deprecated in favor of light edges). Pivoting to (and across) edge nodes is described below.

- It will not return property connections where nodes may have have a common property **value**,
  but the properties are of different **types** (use of the wildcard to "find" relationships
  depends on :ref:`gloss-type-aware`).


.. _storm-pivot:

Pivot Operations
----------------

Pivot operations navigate between sets of nodes that have properties that share a common value. Each
pivot operation requires:

- the source node(s) for the pivot;
- a pivot operator (such as ``->``); and
- the target of the pivot.

Depending on the kind of pivot, you may need to specify a source and / or target property (or properties)
for the pivot as well. See the discussion of :ref:`implicit-pivot-syntax` below.

While there are a few specialized use cases (such as pivoting to or from tags), most pivots involve navigating
between the following kinds of properties:

- primary to secondary;
- secondary to primary;
- secondary to secondary; or
- primary to primary.

Primary to primary property pivots are a specialized use case that is commonly handled using
:ref:`raw-pivot-syntax`.

.. TIP::
  
  In Synapse, these property-to-property relationships are **implicit** relationships. You do not
  need to explicitly "define" the relationship or "link" the nodes. In fact, if the source and target
  properties have the same value **and** the same :ref:`gloss-type`, Storm can use Synapse's
  :ref:`gloss-type-aware` to simplify pivot operations and identify relationships among nodes.


.. _implicit-pivot-syntax:

Implicit Pivot Syntax
+++++++++++++++++++++

Pivot operations in Storm can always be executed by **explicitly** specifying the source and target
properties for the pivot. This is referred to as **explicit pivot syntax** ("explicit syntax" for
short).

When researching network infrastructure, a common set of pivots is to navigate from a set of FQDNs
(``inet:fqdn`` nodes) to their DNS A records (``inet:dns:a`` nodes) and then to the IPv4 addresses
(``inet:ipv4`` nodes) that the A records point to. The following Storm query performs those pivots
using explicit syntax:

.. storm-pre:: [ inet:dns:a=(vertex.link,1.1.1.1) ]
.. storm-pre:: inet:fqdn=vertex.link -> inet:dns:a:fqdn :ipv4 -> inet:ipv4
::
  
  inet:fqdn = vertex.link -> inet:dns:a:fqdn :ipv4 -> inet:ipv4

The query:

- lifts the FQDN ``vertex.link``;
- pivots from the FQDN to any DNS A node with the same FQDN property value (``inet:dns:a:fqdn``); and
- pivots from the ``:ipv4`` property of the ``inet:dns:a`` nodes to any ``inet:ipv4`` nodes with the
  same value.

We explicitly specify ``inet:dns:a:fqdn`` as the target property of our first pivot; and we explicitly
specify the ``:ipv4`` property of the ``inet:dns:a`` nodes as the source property of our second pivot.
Explicit syntax tells Storm **exactly** what you want to do; there is no ambiguity in the query or in
"how" you want to navigate the data.

.. NOTE::
  
  When specifying a secondary property as the source of a pivot (such as ``:ipv4`` above), you must
  specify the property using relative property syntax (i.e., using the property name alone). If you
  were to use full property syntax (``inet:dns:a:ipv4``) Synapse would interpret that as a lift
  operation - i.e., "after you pivot to the DNS A records with an FQDN of vertex.link, then lift ALL
  DNS A records that have an IPv4 property and pivot to ALL of the associated IPv4 nodes".

Explicit syntax is precise, but there is extra work ("more typing") involved to create the query,
especially when the desired source and target of each of the pivots is self-evident. In other words,
if you are pivoting from an FQDN (``inet:fqdn``) to a DNS A record (``inet:dns:a``), the ``:fqdn`` 
property is the only target property that makes sense.

In these cases, you can use **implicit pivot syntax** (implicit syntax) for your Storm query. Implicit
syntax takes advantage of Synapse's :ref:`gloss-type-aware` to "know" which properties can be pivoted
to (or from), given the source and target forms for the pivot operation. With implicit syntax, you do
not need to specify the source or target property in cases where it is self-evident for the forms used.

Using implicit syntax, we can rewrite the above query as follows:

.. storm-pre:: inet:fqdn =  vertex.link -> inet:dns:a -> inet:ipv4

::
  
  inet:fqdn =  vertex.link -> inet:dns:a -> inet:ipv4


With implicit syntax, we can simply specify the source and target **forms**, and allow Synapse to identify
the source and target **properties** using `types`_ and type awareness.

Implicit syntax can be used in the following cases where the source and target properties have the same
type and the same value:

- Primary to secondary property pivots.
- Secondary to primary property pivots.

Implicit pivot syntax cannot be used in the following cases:

- Primary to primary property pivots (see :ref:`raw-pivot-syntax`).
- Secondary to secondary property pivots.
- Pivots between primary and secondary (or secondary and primary) properties involving tags (i.e., where the
  type is ``syn:tag``).
- Pivots between primary and secondary (or secondary and primary) properties with the same value but of
  different **types**.
- Pivots between primary and secondary (or secondary and primary) properties where the source or target is
  ambiguous (e.g., where a form has more than one property of the same type, and you only want to pivot to
  (or from) one of them).

.. TIP::
  
  The examples below use implicit syntax where possible and may include explicit syntax for completeness.
  Where implicit syntax cannot be used, only explicit syntax is shown.


.. _pivot-out:

Pivot Out
+++++++++

Most pivots are "pivot out" operations (or variations). "Pivot out" refers to the "direction" of the
pivot operator symbol: an "arrow" ( ``->`` ) that points "out" from left to right. "Pivot out" operations
are so common that they are generally just referred to as "pivots" or "pivot operations".

Pivot out operations require:

- the source node(s) for the pivot;
- the pivot operator ( ``->`` ); and
- the target of the pivot.

The target of a pivot can be any of the following:

- a form name, partial form name (wildcard), or :ref:`interface` name;
- a form or interface name and an associated property name;
- a list of form names;
- a wildcard.

The target(s) that are appropriate for a given pivot depend on the source and target properties and the
specific navigation you want to perform.


.. _pivot-primary-secondary:

Primary to Secondary Property Pivot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When pivoting from the primary property of a set of source nodes to target nodes with the same secondary
property value (e.g., from a set of FQDNs to their associated DNS A nodes), you can specify the target nodes
using:

- a form name or interface name;
- a form or interface name with its associated property; or
- a partial form name (wildcard form match).

Implicit syntax can be used for these pivots if the target property is self-evident / unambiguous.


**Syntax:**

*<query>* **->** *<form>*

*<query>* **->** *<form>* [ **:** | **.** | **._** *<prop>* ]

*<query>* **->** *<partial_form_name>* *****

*<query>* **->** *<interface>*

*<query>* **->** *<interface>* [ **:** *<prop>* ]


**Examples:**

*Pivot from a set of FQDNs (inet:fqdn nodes) to their associated DNS requests (inet:dns:request nodes):*

.. storm-pre:: [ inet:fqdn=vertetx.link inet:fqdn=woot.com (inet:dns:request=* :query:name:fqdn=woot.com) ]
.. storm-pre:: inet:fqdn -> inet:dns:request
.. storm-pre:: inet:fqdn -> inet:dns:request:query:name:fqdn

::
  
  <inet:fqdn nodes> -> inet:dns:request

The query above uses implicit syntax; Synapse recognizes that the logical target property (given source nodes
that are FQDNs) is ``:query:name:fqdn``. You could optionally use explicit syntax instead:

::
  
  <inet:fqdn nodes> -> inet:dns:request:query:name:fqdn

*Pivot from a set of IPv4 addresses (inet:ipv4 nodes) to any network flows (inet:flow nodes) associated with the IPs:*

.. storm-pre:: [ inet:ipv4=1.1.1.1 inet:ipv4=2.2.2.2 inet:ipv4=3.3.3.3 (inet:flow=* :src:ipv4=1.1.1.1 :dst:ipv4=2.2.2.2 :dst:port=1337) (inet:flow=* :dst:ipv4=3.3.3.3 :dst:port=80) ]
.. storm-pre:: inet:ipv4 -> inet:flow
.. storm-pre:: inet:ipv4 -> inet:flow:dst:ipv4

::
  
  <inet:ipv4 nodes> -> inet:flow

The query above uses implicit syntax. Note that because ``inet:flow`` nodes have two target properties of type
``inet:ipv4`` (``:src:ipv4`` and ``:dst:ipv4``), the result of this query will be all ``inet:flow`` nodes where
the inbound IPv4s are either the source **or** destination IP. If you only want to see flows where the inbound
IPv4s are the destination IP (for example), you must use explicit syntax to clarify this:

::
  
  <inet:ipv4 nodes> -> inet:flow:dst:ipv4

*Pivot from a set of tags (syn:tag nodes) to the threat clusters (risk:threat nodes) represented by those tags:*

.. storm-pre:: [ syn:tag=rep.eset.vicious_wombat (risk:threat=* :reporter:name=eset :tag=rep.eset.vicious_wombat) syn:tag=rep.symantec.sparkling_unicorn (risk:threat=* :reporter:name=symantec :tag=rep.symantec.sparkling_unicorn) ]
.. storm-pre:: syn:tag -> risk:threat:tag

::
  
  <syn:tag nodes> -> risk:threat:tag

The query above uses explicit syntax. Even though the ``:tag`` property is of type ``syn:tag``, ``syn:tag`` nodes
have specialized handling with respect to pivoting in Storm (see :ref:`pivot-from-tags` and :ref:`pivot-to-tags`
below). Because pivots involving ``syn:tag`` nodes are handled differently by default, you must use explicit
syntax when pivoting between tags (``syn:tag`` nodes) and properties whose type is ``syn:tag``.


*Pivot from a set of FQDNs (inet:fqdn nodes) to any associated DNS records (e.g., inet:dns:a, inet:dns:cname, inet:dns:ns, inet:dns:request, etc.):*

.. storm-pre:: [ inet:dns:a=(woot.com,4.4.4.4) inet:dns:ns=(woot.com,ns1.woot.com) inet:dns:mx=(woot.com,mx.woot.com) ]
.. storm-pre:: inet:fqdn -> inet:dns:*

::
  
  <inet:fqdn nodes> -> inet:dns:*

The query above uses the wildcard ( ``*`` ) as a partial match for any form name that starts with ``inet:dns:``.

*Pivot from a set of FQDNs (inet:fqdn nodes) to any associated DNS A or DNS AAAA records:*

.. storm-pre:: inet:fqdn -> inet:dns:a*

::
  
  <inet:fqdn nodes> -> inet:dns:a*

The query above uses the wildcard ( ``*`` ) as a partial match for any form name that starts with ``inet:dns:a``.

*Pivot from a set of files to all host execution nodes (all nodes of all forms that inherit the it:host:activity interface - e.g., it:exec:file:add, it:exec:url, etc.) associated with those files:*

.. storm-pre:: [ file:bytes=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 (it:exec:file:write=* :sandbox:file=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 :exe=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855) (it:exec:mutex=* :sandbox:file=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855) ]
.. storm-pre:: file:bytes -> it:host:activity
.. storm-pre:: file:bytes -> it:host:activity:exe

::
  
  <file:bytes nodes> -> it:host:activity

The query above uses implicit syntax. The ``it:host:activity`` interface defines two properties of type
``file:bytes`` for host activity nodes - ``:exe`` and ``:sandbox:file``. The query above will return all
activity nodes where the inbound files appear in either property. If you only want to see activity nodes
whose ``:exe`` property (for example) matches the inbound files, you need to use explicit syntax:

::
  
  <file:bytes nodes> -> it:host:activity:exe

*Pivot from a set of usernames (inet:user nodes) to any file paths (file:path nodes) where the username is an element of the path (a :base value - for example, where a username might appear in a PDB path):*

.. storm-pre:: [ inet:user=swanson file:path='c:\users\swanson\dev\projects\getthesnacks\release\getthesnacks.pdb' ]
.. storm-pre:: inet:user=swanson -> file:path:base
.. storm-pre:: inet:user=swanson -> file:path:base tree { -> file:path:dir }

::
  
  <inet:user nodes> -> file:path:base

The query above uses explicit syntax. The ``inet:user`` form has a type of ``inet:user``, but the ``:base``
property of the ``file:path`` form has a type of ``file:base``. Because the properties are two different types,
you must use explicit syntax.

.. TIP::
  
  The query above will return the (partial) ``file:path`` whose final element is the user name (e.g.,
  ``c:\users\evilhacker``). You can use the Storm :ref:`storm-tree` command to recursively pivot through
  the remaining ``file:path`` elements to obtain the full path:
  
  ::
    
    <inet:user nodes> -> file:path:base tree { -> file:path:dir }


.. _pivot-secondary-primary:

Secondary to Primary Property Pivot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When pivoting from a secondary property of a set of source nodes to target nodes with the same primary
property (e.g., from a set of DNS A nodes to their associated FQDNs), you can specify the target nodes using:

- a form name;
- a list of form names;
- a wildcard.

Implicit syntax can be used for these pivots if the source property if it is self-evident / unambiguous.

.. TIP::
  
  Use of the the wildcard (asterisk) character ( ``*`` ) is known as a "wildcard pivot out". This pivot
  navigates from any/all secondary properties on the source nodes to the nodes corresponding to those
  property values.


**Syntax:**

*<query>* [ **:** | **.** | **:_** *<prop>* ] **->** *<form>*

*<query>* [ **:** | **.** | **:_** *<prop>* ] **->** **(** *<form_1>* **,** *<form_2>* ... **)**

*<query>* **->** *****

.. NOTE::
  
  If you specify a source property for the pivot, you must use the relative property name (i.e., the
  property name alone, preceded by its separator character).


**Examples:**

*Pivot from a set of DNS A records (inet:dns:a nodes) to their associated FQDNs (inet:fqdn nodes):*

.. storm-pre:: inet:dns:a -> inet:fqdn
.. storm-pre:: inet:dns:a :fqdn -> inet:fqdn

::
  
  <inet:dns:a nodes> -> inet:fqdn

The query above uses implicit syntax. Synapse recognizes that the, given a target form of ``inet:fqdn``,
the logical source property is the ``:fqdn`` property of the ``inet:dns:a`` nodes. You could optionally
use explicit syntax:

::
  
  <inet:dns:a nodes> :fqdn -> inet:fqdn


*Pivot from a set of DNS NS records (inet:dns:ns nodes) to their associated FQDNs (inet:fqdn nodes):*

.. storm-pre:: [ inet:dns:ns=(woot.com,ns1.woot.com) inet:dns:ns=(woot.com,ns2.woot.com) ]
.. storm-pre:: inet:dns:ns -> inet:fqdn
.. storm-pre:: inet:dns:ns :ns -> inet:fqdn

::
  
  <inet:dns:ns nodes> -> inet:fqdn

The query above uses implicit syntax. Because ``inet:dns:ns`` nodes have two properties of type ``inet:fqdn``
(``:zone`` and ``:ns``), Synapse will pivot to the FQDNs associated with both values. If you only want to
pivot to the FQDNs associated with the name server (NS) FQDNs (for example), you must use explicit syntax:

::
  
  <inet:dns:ns nodes> :ns -> inet:fqdn


*Pivot from a set of X509 certificate metadata nodes (crypto:x509:cert nodes) to the associated SHA1 fingerprints and to any FQDNs associated with the certificates:*

.. storm-pre:: [ crypto:x509:cert=* :md5=6b9fdcadf7ea5de1f1402a1cb62c7a65 :sha1=0008e9f15b9ff20de82c276cc54ec9dc094f54f8 :sha256=b1ee0920c4f4d5ded50732d15186eae5357eb743cbbb98ee935bd0791520b5f7 :identities:fqdns=(aliceplants.com,) ]
.. storm-pre:: crypto:x509:cert -> ( hash:sha1, inet:fqdn )

::
  
  <crypto:x509:cert nodes> -> ( hash:sha1, inet:fqdn )

.. TIP::
  
  Specifying a list of target forms allows you to perform a more focused pivot (in contrast to pivoting to
  any / all target forms using a wildcard). The elements of the list must be enclosed in parentheses and
  separated by commas.

*Pivot from a set of X509 certificate metadata nodes (crypto:x509:cert nodes) to any/all nodes associated with any of the certificates' secondary properties:*

.. storm-pre:: crypto:x509:cert -> *

::

  <crypto:x509:cert nodes> -> *

The query above is an example of a **wildcard pivot out**. For any secondary properties on the source nodes,
the query will return the associated nodes. For example, if the ``crypto:x509:cert:identities:ipv4s`` property
is set, the query will return the associated ``inet:ipv4`` nodes. A wildcard pivot out is also known as a "refs
out" pivot (for "references") because it pivots to the nodes "referenced by" the source nodes' secondary properties.


.. _pivot-secondary-secondary:

Secondary to Secondary Property Pivot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When pivoting from a secondary property of a set of source nodes to target nodes with the same secondary
property (e.g., from the ``:ipv4`` property of a set of DNS A nodes to a set of network flow nodes with
the same IPv4 as a ``:dst:ipv4`` property), you can specify the target nodes using:

- a form name and property name; or
- an interface name and property name.

You must use explicit syntax to specify both the source and target properties.


**Syntax:**

*<query>* **:** | **.** | **:_** *<prop>* **->** *<form>* **:** | **.** | **:_** *<prop>*

*<query>* **:** | **.** | **:_** *<prop>* **->** *<interface>* **:** *<prop>*


**Examples:**

*Pivot from the WHOIS records (inet:whois:rec nodes) for a set of domains to the DNS A records (inet:dns:a nodes) for the same domains:*

.. storm-pre:: [inet:whois:rec=(woot.com, 2017/07/17 00:00:00.000)] :fqdn -> inet:dns:a:fqdn

::
  
  <inet:whois:rec nodes> :fqdn -> inet:dns:a:fqdn

.. TIP::
  
  In many cases, secondary to secondary property pivots are a "shortcut" for two pivot operations (secondary to
  primary and primary to secondary) that perform the equivalent navigation. For example:
  
  ::
    
    <inet:whois:rec nodes> -> inet:fqdn -> inet:dns:a

*Pivot from a set of DNS requests (inet:dns:request nodes) to all host activity nodes (all nodes of all forms that inherit the it:host:activity interface) that share the same file as their :exe property:*

.. storm-pre:: [ file:bytes=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 (inet:dns:request=* :query:name:fqdn=woot.com :exe=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855) (it:exec:file:write=* :exe=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 :path='c:/windows/scvhost.exe') (it:exec:file:read=* :exe=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 :path='c:/windows/autoexec.bat') ]
.. storm-pre:: inet:dns:request:exe -> it:host:activity:exe

::
  
  <inet:dns:request nodes> :exe -> it:host:activity:exe


.. _pivot-in:

Pivot In
++++++++

The pivot in operator is an "arrow" ( ``<-`` ) that points "in" from right to left.

Pivot operations navigate between sets of nodes that share a common property value. Logically, pivot
operations are functionally equivalent whether the pivot "arrow" points out (left to right) or in
(right to left):

- Pivot from a set of FQDNs to their associated DNS A records:
  
  ``<inet:fqdn nodes> -> inet:dns:a``

- Pivot from a set of FQDNs to the DNS A records that reference them:
  
  ``<inet:fqdn nodes> <- inet:dns:a``

Because of this equivalence, and because Storm evaluates operations from left to right, the "pivot out"
arrow is generally more intuitive and has been used to implement nearly all pivot operations in Storm
(the second example, above, is not supported and will generate a ``StormRuntimeError``).

The pivot in operation is a specialized operation that can only be used with the wildcard ( ``*`` ) as a
target. This **wildcard pivot in** operation navigates from the primary property of the source node(s) to
any nodes where that value is a secondary property. A wildcard pivot in is also known as a "refs in" pivot
(for "references") because it pivots out to the nodes that "reference" the source nodes' primary property.


**Syntax:**

*<query>* **<-** *****
 
**Example:**

*Pivot from a set of FQDNs (inet:fqdn nodes) to all nodes with a secondary property that references a source FQDN:*

.. storm-pre:: inet:fqdn <- *
::

    <inet:fqdn nodes> <- *

A wildcard pivot in will return any node with a secondary property value that matches any of the source FQDNs.
For example, the above query could return various DNS records (``inet:dns:a``, ``inet:dns:mx``), URLs
(``inet:url``), email addresses (``inet:email``), articles (``media:news``), and so on.


.. _raw-pivot-syntax:

Raw Pivot Syntax
++++++++++++++++

file:bytes:mime:pe:compiled>1970/01/01 $time=:mime:pe:compiled try { $ip=$lib.cast(time,$time) -> { inet:ipv4=$ip } } catch BadTypeValu as err { $lib.warn("Got bad value for IP!") } -file:bytes



For a few edge cases, standard Storm pivot syntax may be insufficient to express the type of navigation you want
to perform. Raw pivot syntax uses a Storm query as the target of the pivot, which gives you greater flexibility
in specifying the pivot target vs. standard property-to-property pivots.

Raw pivot syntax requires:

- the source node(s) for the pivot;
- a pivot operator; and
- the target of the pivot (specified as a Storm query enclosed in curly braces).

Both pivot ( ``->`` ) and pivot and join ( ``-+>`` ) operators can be used with raw pivot syntax. Pivot in
( ``<-`` ) and pivot in and join ( ``<+-`` ) are not supported.

Use cases for raw pivot syntax include primary-to-primary property pivots and pivots where the value of the target
property (primary or secondary) is computed from the input node(s) (e.g., using a variable derived from the
inbound nodes. See :ref:`storm-adv-vars` for a discussion of using variables in Storm).


**Syntax:**

*<query>* *<pivot operator>* **{** *<query>* **}**

**Examples:**

The following is a simple example to illustrate the concept.

*Pivot from a set of strings (it:dev:str nodes) representing domains to the associated FQDNs (inet:fqdn nodes):*

.. storm-pre:: [ it:dev:str=woot.com ]
.. storm-pre:: it:dev:str=woot.com $fqdn=$node.value() -> { inet:fqdn=$fqdn }
.. storm-pre:: it:dev:str=woot.com $fqdn=$node.value() inet:fqdn=$fqdn -it:dev:str

::
  
  <it:dev:str nodes> $fqdn = $node.value() -> { inet:fqdn = $fqdn }

The query above is a primary-to-primary property pivot between forms of different types. The query lifts
the ``it:dev:str`` nodes, defines the variable ``$fqdn`` as the value of the node, then pivots to the
``inet:fqdn`` nodes with the same value.

Note that you could create an equivalent Storm query using only lift and filter operations:

::
  
  <it:dev:str nodes> $fqdn = $node.value() inet:fqdn = $fqdn -it:dev:str

This second query still lifts the ``it:dev:str`` nodes and sets the ``$fqdn`` variable, but then lifts
the ``inet:fqdn`` nodes directly and drops (filters out) the original ``it:dev:str`` nodes.

While both queries return the same result (the ``inet:fqdn`` nodes), using raw pivot syntax is slightly more efficient
because the pivot operation drops the ``it:dev:str`` node for you (pivots `consume`_ nodes); there is no need to
filter them out at the end, as in the second example. As always, these efficiencies may be trivial for smaller
queries but can be significant for larger queries.

*Pivot from a set of organizations (ou:org nodes) to any compromises (risk:compromise nodes) where the organization was targeted:*



.. _storm-pivot-join:

Pivot and Join Operations
-------------------------

Like most Storm operations, pivots `consume`_ nodes. When you pivot in Storm, you navigate "away" from your
source nodes; the nodes that are the target of the pivot become your working set / result set.

With a pivot and join operation, the inbound (source) nodes are retained and combined (joined) with the target
nodes in a single result set.

.. _pivot-join:

Pivot and Join
++++++++++++++

The pivot and join operator ( ``-+>`` ) is an "arrow" with a plus sign ( ``+`` ) in the middle to represent
joining the source and target nodes. The operator can be used in anywhere the standard ( ``->`` ) pivot
operator is used, including the wildcard pivot out (refer to syntax examples above).

**Examples:**

*Pivot from a set of organizations (ou:org nodes) to any associated contacts (ps:contact nodes), retaining the organizations in the results:*

.. storm-pre:: [ (ou:org=4b0c2c5671874922ce001d69215d032f :name=vertex  :hq=d41d8cd98f00b204e9800998ecf8427e) (ps:contact=d41d8cd98f00b204e9800998ecf8427e :orgname=vertetx :org=4b0c2c5671874922ce001d69215d032f) ]
.. storm-pre:: ou:org -+> ps:contact

::
  
  <ou:org nodes> -+> ps:contact

*Pivot from a set of DNS A records (inet:dns:a nodes) to their associated IPv4 addresses (inet:ipv4 nodes), retaining the DNS A records in the results:*

.. storm-pre:: inet:dns:a :ipv4 -+> inet:ipv4

::
  
  <inet:dns:a nodes> -+> inet:ipv4


*Pivot from a set of domain WHOIS records (inet:whois:rec nodes) to the DNS A records (inet:dns:a nodes) associated with the FQDNs, retaining the WHOIS records in the results:*

.. storm-pre:: inet:whois:rec :fqdn -+> inet:dns:a:fqdn

::
  
  <inet:whois:rec nodes> :fqdn -+> inet:dns:a:fqdn

*Pivot from all secondary properties of a set of files (file:bytes nodes) to the associated nodes, retaining the files in the results:*

.. storm-pre:: file:bytes -+> *

::
  
  <file:bytes nodes> -+> *


.. _pivot-in-join:

Pivot In and Join
+++++++++++++++++

The pivot in and join operator ( ``<+-`` ) can be used to perform a wildcard pivot in operation and join the results
with the source nodes. Just as with a standard pivot in, the wildcard is the only valid target for this operation.

**Syntax:**

*<query>* **<+-** *****

**Example:**

*Pivot from a set of files (file:bytes nodes) to any nodes that reference the files, while retaining the original files in the results:*

.. storm-pre:: file:bytes <+- *

::
  
  <file:bytes nodes> <+- *


.. _storm-pivot-tags:

Tag Pivots
----------

Tags in Synapse are unique in that they are both nodes nodes and labels that are applied to other nodes.
(See the :ref:`analytical-model` document for additional discussion of tags as both nodes and labels.)

Because of tags' unique role, pivot syntax used with tags navigates between **tags as nodes** (``syn:tag``
nodes) and **tags as labels** (i.e., nodes that have the tags applied), as opposed to performing standard
property-to-property pivots.

Both the pivot out ( ``->`` ) and pivot out and join ( ``-+>`` ) operator are supported for tag pivots.
Pivot in ( ``<-`` ) and pivot in and join ( ``<+-`` ) are not supported.

.. TIP::
  
  The custom behavior used with tag pivots may lead to counterintuitive results when attempting to pivot
  between tags (``syn:tag`` nodes) and properties that are ``syn:tag`` types (such as ``risk:threat:tag``
  or ``ou:technique:tag``).
  
  For example, if you attempt to pivot from a ``syn:tag`` node used to associate nodes with a threat cluster
  to the ``risk:threat`` node representing the cluster, the following Storm query will fail to return
  the expected results:
  
  ::
    
    syn:tag=rep.talos.lazarus -> risk:threat
  
  The query looks as though it should return the appropriate ``risk:threat`` node using implicit syntax
  to navigate to the ``risk:threat:tag`` property using type awareness. However, because the default
  Storm behavior when pivoting from a ``syn:tag`` node is to pivot to **nodes that have the tag**,
  the above query is actualy attempting to pivot to any ``risk:threat`` nodes that are tagged
  ``#rep.talos.lazarus``. The query is syntactically correct, so will not generate an error; but it will
  not return the expected nodes (and likely will not return any nodes at all).
  
  Explicitly specifying the ``:tag`` property will return the ``risk:threat`` node as expected:
  
  ::
    
    syn:tag=rep.talos.lazarus -> risk:threat:tag


.. _pivot-to-tags:

Pivot to Tags
+++++++++++++

Pivot to tags syntax allows you to pivot from a set of nodes with tags to the set of ``syn:tag`` nodes
representing those tags. Pivot to tag operations require:

- the source node(s) for the pivot;
- a pivot operator; and
- the set of tags (``syn:tag`` nodes) that is the target of the pivot.

Pivot to tags uses the "hashtag" symbol ( ``#`` ) to indicate that the target of the pivot is a set of
``syn:tag`` nodes (by default, the set of all leaf tags on the source nodes). The target expression can
be modified to refer to:

- all tag nodes,
- all tag nodes matching a specified pattern, or
- the tag node matching a specific tag.


Pivot to Leaf Tags
~~~~~~~~~~~~~~~~~~

The hashtag symbol ( ``#`` ) used by itself as a target refers to the ``syn:tag`` nodes for all **leaf** tags
applied to the source nodes. A leaf tag is the longest / final tag in a tag tree. For example, if a node has
the tag ``#rep.eset.sednit`` (which is comprised of the three tags ``#rep``, ``#rep.eset``, and ``#rep.eset.sednit``),
the leaf tag is ``#rep.eset.sednit``.

**Syntax:**

*<query>* *<pivot_operator>* **#**

**Examples:**

*Pivot from a set of nodes to the tags (syn:tag nodes) for all leaf tags applied to those nodes:*

.. storm-pre:: [ inet:fqdn=woot.com +#rep.microsoft.volt_typhoon ]
.. storm-pre:: inet:fqdn -> #

::
  
  <query> -> #


Pivot to All Tags
~~~~~~~~~~~~~~~~~

The hashtag symbol can be used with the wildcard ( ``#*`` ) to pivot to all ``syn:tag`` nodes applied to the
source nodes, not just the leaf tags. For example, if a node has the tag ``#rep.eset.sednit`` (which is comprised
of the three tags ``#rep``, ``#rep.eset``, and ``#rep.eset.sednit``), all three tags will be returned.

**Syntax:**

*<query>* *<pivot_operator>* **#** *****

*Pivot from a set of nodes to the tags (syn:tag) nodes for all tags applied to those nodes:*


.. storm-pre:: [ file:bytes=sha256:b6e7343b9250ad141db66c7bb2cd18c8a6939ff6cdff616683ba6b6a4ff7aa91 +#cno.mal ]
.. storm-pre:: file:bytes -> #*

::
  
  <query> -> #*


Pivot to Tags Matching a Pattern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The single ( ``*`` ) or double ( ``**`` ) asterisk can be used to specify a set of target tags that match the
specified tag glob expression. The single asterisk is used to match **within** a single tag element. The
double asterisk is used to match **across** tag elements.

**Syntax:**

*<query>* *<pivot_operator>* **#** *<string>* | ***** | ****** [ **.** *<string>*  | ***** | ****** ... ]


*Pivot from a set of nodes to the tags (syn:tag nodes) associated with any third-party reporting where the third tag element is "bisonal":*

.. storm-pre:: [ file:bytes=sha256:89f250599e09f8631040e73cd9ea5e515d87e3d1d989f484686893becec1a9bc +#rep.alienvault.bisonal +#rep.malwarebazaar.bisonal +#rep.malwarebazaar.3p.intetzer.bisonal ]
.. storm-pre:: file:bytes -> #rep.*.bisonal
.. storm-pre:: file:bytes -+> #rep.**bisonal

::
  
  <query> -> #rep.*.bisonal

Vertex uses the ``rep`` tag tree to indicate third-party reporting / assertions. The query above will match
``syn:tag`` nodes from the source nodes where the tag has ``rep`` as the first tag element, has any value as
the second element, and has ``bisonal`` as the third element. This would include tags such as:

- ``rep.alienvault.bisonal``
- ``rep.malwarebazaar.bisonal``

*Pivot from a set of nodes to the tags (syn:tag nodes) representing any third party reporting where the tag ends in the string "bisonal" and retain the original nodes in the results (pivot and join):*

::
  
  <query> -+> #rep.**bisonal

The query above will match any tag that has ``rep`` as the first element, followed by any number of elements
that end in the string "bisonal". This would include both tags noted above, as well as tags such as:

- ``rep.malwarebazaar.3p.intezer.bisonal``


Pivot to Specific Tag
~~~~~~~~~~~~~~~~~~~~~

Pivot to the ``syn:tag`` node for a specific tag by specifying the exact tag as the target.

**Syntax:**

*<query>* *<pivot operator>* **#** *<tag>*


*Pivot from a set of nodes to the syn:tag node for the tag "cno.ttp.phish.attach":*

.. storm-pre:: [ file:bytes=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 +#cno.ttp.phish.attach ]
.. storm-pre:: file:bytes -> #cno.ttp.phish.attach

::
  
  <query> -> #cno.ttp.phish.attach


.. _pivot-from-tags:

Pivot from Tags
+++++++++++++++

Pivot from tags syntax allows you to pivot from a set of ``syn:tag`` nodes to the nodes that have those tags.

Pivot from tag operations require:

- the source node(s) for the pivot (``syn:tag`` nodes);
- a pivot operator; and
- the target forms for the pivot.

The target for a pivot from tags operation can be:

- a form name;
- a partial form name (wildcard match);
- an interface name;
- a list of form names; or
- a wildcard.

Pivot from tags pivots to nodes that have the exact source tag(s) applied. For example, pivoting from the
tag ``syn:tag=rep.eset.sednit`` will **not** return nodes with only ``#rep`` or ``#rep.eset``. Conversely,
pivoting from ``syn:tag=rep`` will return nodes with any tag in the ``rep`` tag tree (because the ``rep``
tag is included in all of those trees).

.. TIP::
  
  A pivot from tags operation is similar to a :ref:`lift-by-tag` or :ref:`lift-form-by-tag` operation. The following Storm
  queries are equivalent:
  
  ``syn:tag=rep.microsoft.forest_blizzard -> *``
  
  ``#rep.microsoft.forest_blizzard``
  
  As are these:
  
  ``syn:tag=rep.microsoft.forest_blizzard -> ( inet:fqdn, inet:ipv4 )``
  
  ``inet:fqdn#rep.microsoft.forest_blizzard inet:ipv4#rep.microsoft.forest_blizzard``
  
  Pivot from tags can be useful when used with :ref:`pivot-to-tags`. For example, you can take a set of inbound
  tagged nodes, use pivot to tags to navigate to some or all of the associated ``syn:tag`` nodes, and then
  use pivot from tags to navigate to other nodes that have the same tags.


**Syntax:**

*<syn:tag node(s)>* *<pivot operator>* *<form>*

*<syn:tag node(s)>* *<pivot operator>* *<partial_form_name>* *****

*<syn:tag node(s)>* *<pivot operator>* *<interface>*

*<syn:tag node(s)>* *<pivot operator>* **(** *<form_1>* **,** *<form_2>* ... **)**

*<syn:tag node(s)>* *<pivot operator>* *****


**Examples:**

*Pivot from a set of syn:tag nodes to all nodes that have any of the tags applied:*

.. storm-pre:: syn:tag -> *

::
  
  <syn:tag nodes> -> *

*Pivot from a set of syn:tag nodes to any files (file:bytes nodes) with those tags applied:*

.. storm-pre:: syn:tag -> file:bytes

::
  
  <syn:tag nodes> -> file:bytes

*Pivot from a set of syn:tag nodes to any DNS nodes with those tags applied:*

.. storm-pre:: syn:tag -> inet:dns:*

::
  
  <syn:tag nodes> -> inet:dns:*

The query above would return (for example) ``inet:dns:a`` nodes, ``inet:dns:request`` nodes, etc.

*Pivot from a set of syn:tag nodes to any host activity nodes (all nodes of all forms that inherit the it:host:activity interface) with those tags applied:*

.. storm-pre:: syn:tag -> it:host:activity

::
  
  <syn:tag nodes> -> it:host:activity

*Pivot from a set of syn:tag nodes to any IPv4 (inet:ipv4), IPv6 (inet:ipv6), server (inet:server), or network flow (inet:flow) nodes with those tags applied and retain the syn:tag nodes in the results (pivot and join):*

.. storm-pre:: syn:tag -+> ( inet:ipv4, inet:ipv6, inet:server, inet:flow )

::
  
  <syn:tag nodes> -+> ( inet:ipv4, inet:ipv6, inet:server, inet:flow )


.. _storm-pivot-edge:

Edge Node Pivots
----------------

`Edge nodes`_ (also called digraph nodes) are specialized nodes whose purpose is to link two arbitrary nodes
in a specific relationship. Edge nodes are composite (comp) forms but are unique in that, because the node(s)
in the relationship may be arbitrary, the edge node's primary property consists of at least one value that is
a :ref:`gloss-node-def` or **ndef** - that is, a ``(<form>, <valu>)`` pair vs. a standard ``<valu>``.
(Some edge nodes include a time value as a third element of the primary property if the relationship occurred
at a specific time.)

This means that pivots to or from edge nodes must account for having a form **and** property value in common
between the source and target, not just a property value.

Both the pivot ( ``->`` ) and pivot and join ( ``-+>`` ) operators are supported for edge pivots. The pivot in
operator ( ``<-`` ) is supported for specialized cases. The pivot in and join operator ( ``<+-`` ) is not
supported.

.. NOTE::
  
  In many cases, the use of edge nodes has been replaced with lightweight (light) edges. For example,
  ``edge:has`` nodes have largely been replaced by ``-(has)>`` light edges; and ``meta:seen`` nodes have
  been replaced by ``-(seen)>`` light edges.
  
  Edge nodes may be preferred when you need to record additional information about the relationship (edge
  nodes have properties, and you can apply tags to edge nodes). We recommend choosing one option (edge nodes
  or light edges) for consistency so analysts do not have to query for the same type of relationship in two
  different ways.


.. _pivot-to-edge:

Pivot to Edge Nodes
+++++++++++++++++++

Pivoting to edge nodes requires:

- the source node(s) for the pivot;
- the pivot operator;
- the target of the pivot.

When pivoting to edge nodes, the target can be:

- a form name;
- a partial form name (wildcard match) - supported for pivot out / pivot out and join only;
- an interface (although currently there are no interfaces inherited by edge forms); or
- a form and property name.

.. TIP::
  
  Storm uses some optimizations to simplify working with edge nodes and ndefs:
  
  When pivoting out ( ``->`` or ``-+>`` ) to a set of edge nodes, the target of the pivot is assumed
  to be the edge nodes whose ``n1`` value matches the ``(<form>, <valu>)`` of the inbound nodes. If
  you want to pivot out to the edge nodes' ``n2`` property, you must specify ``:n2`` as the target
  property.
  
  As an alternative, the pivot in operator ( ``<-`` ) can be used to specifically to pivot from source
  nodes to the ``n2`` property of the target edge nodes. The use of the pivot in operator to pivot to
  edge nodes' ``n1`` property is not supported, even if you specify it as the target property. In
  addition, the target of a pivot in operation cannot be a partial edge form name (wildcard match).


**Syntax:**

*<query>* *<pivot operator>* *<edge_form>* | *<partial_edge_form_name>* [**:n2**]

*<query>* **<-** *<edge_form>*

**Examples:**

.. NOTE::
  
  The examples below are for illustrative purposes to show the Storm syntax used to navigate edge nodes. Based on
  current modeling best practices, the relationships shown here using edge nodes would typically be represented
  using light edges.

*Pivot from a set of articles (media:news nodes) to the edge nodes (edge:refs nodes) showing things that the articles reference (e.g., such as indicators like hashes or FQDNs):*

.. storm-pre:: [ media:news=fff6a48214f22b966bb8b74c808180a8 edge:refs=((media:news,fff6a48214f22b966bb8b74c808180a8),(inet:fqdn,woot.com)) ]
.. storm-pre:: media:news -> edge:refs

::
  
  <media:news nodes> -> edge:refs

*Pivot from a set of vulnerabilities (risk:vuln nodes) to the edge nodes (edge:has nodes) showing which nodes have those vulnerabilities (e.g., such as an it:host):*

.. storm-pre:: [ it:host=0006b0fec30a4bcbf719e326b9cf6437 (risk:vuln=00000af5ccc04021351fb42bdb47f4d7 :cve=cve-2020-17530) edge:has=((it:host,0006b0fec30a4bcbf719e326b9cf6437),(risk:vuln,00000af5ccc04021351fb42bdb47f4d7)) ]
.. storm-pre:: risk:vuln -> edge:has:n2
.. storm-pre:: risk:vuln <- edge:has

::
  
  <risk:vuln nodes> -> edge:has:n2

Because the ``risk:vuln`` ndefs are the ``n2`` value of the edge nodes, we must specify ``:n2`` as the target
property. The following pivot in operation will return the same results:

::
  
  <risk:vuln nodes> <- edge:has


*Pivot from a set of nodes to any edge nodes (e.g., edge:has, edge:refs) where the inbound nodes are the n1 of any of the edge nodes:*

.. storm-pre:: .created -> edge:*

::
  
  <query> -> edge:*


.. _pivot-from-edge:

Pivot from Edge Nodes
+++++++++++++++++++++










.. _pivot-across-edge:

Pivot Across Edge Nodes
+++++++++++++++++++++++

Because edge nodes represent relationships, analytically we are often more interested in the nodes on "either
side" of the edge node than we are in the edge node itself. For this reason, the pivot operators have been
optimized to allow for easily navigating "across" these edge nodes.

Pivoting across edge nodes entails two pivot operations that require:

- the source node(s) for the first pivot;
- a pivot operator;
- the target edge forms for the first pivot (partial edge form names that use a wildcard match are not allowed);
- a pivot operator;
- the target of the second pivot.

????????

When pivoting across edge forms using a pivot out operator, the final target can be:

- a form name;
- a partial form name (wildcard match);
- an interface name; or
- a wildcard.

When pivoting across edge forms using a pivot in operator, the final target can be:

- a form

?????????????

.. TIP::
  
  Similar to pivoting to edge forms, pivoting across edge forms uses syntax optimizations to simplify
  working with edge nodes and ndefs. Both pivot out ( ``->`` ) and pivot out and join ( ``-+>`` )
  operators are supported (and can be mixed or matched); the pivot in ( ``<-`` ) operator is also
  supported. However, the operators for both pivots must be of the same kind; you cannot mix a pivot
  in operator with a pivot out and join operator, for example.
  
  - When pivoting out ( ``->`` or ``-+>`` ) across a set of edge nodes, the target of the first pivot
    is assumed to be the ``n1`` value of the edge nodes. Similarly, the source of the second pivot
    is assumed to be the ``n2`` value.
  
  - When pivoting in ( ``<-``0 across a set of edge nodes, the opposite applies. The target of the
    first pivot is assumed to be the ``n2` value of the edge nodes, and the source of the second
    pivot is assumed to be the ``n1`` value.
  
  The ass




**Syntax:**

*<query>* **->** *<edge_form>* **->** ***** | *<form>*

*<query>* **<-** *<edge_form>>* **<-** ***** | *<form>*

**Examples:**

- Traverse a set of ``edge:has`` nodes to pivot from a person to all the things the person "has":


.. storm-pre:: ps:person -> edge:has -> *
::

    <ps:person> -> edge:has -> *


- Traverse a set of ``edge:wentto`` nodes to pivot from a person to the locations the person has visited:


.. storm-pre:: ps:person -> edge:wentto -> *
::

    <ps:person> -> edge:wentto -> *


**Usage Notes:**

- Storm makes the following assumptions to optimize the two pivots:

  - For pivots out, the first pivot is to the digraph nodes’ ``:n1`` property and the second pivot is from the digraph nodes’ ``:n2`` property.
  - For pivots in, the first pivot is to the digraph nodes’ ``:n2`` property and the second pivot is from the digraph nodes’ ``:n1`` property.

- Pivoting "across" the digraph nodes still performs two pivot operations (i.e., to the digraph nodes and then from them). As such it is still possible to apply an optional filter to the digraph nodes themselves before the second pivot.
























traversal operations

traverse and join operations

still more operations












*<query>* [ **:** *<prop>* ] **->** *<form>*

*<query>* [ **:** *<prop>* ] **->** *<partial_form_name>* *****

*<query>* [ **:** *<prop>* ] **->** **(** *<form_1>* **,** *<form_2>* ... **)**

*<query>* [ **:** *<prop>* ] **->** *<form>* [ **:** *<prop>* ]

*<query>* [ **:** *<prop>* ] **->** *<interface>*

*<query>* [ **:** *<prop>* ] **->** *<interface>* [ **:** *<prop>* ]


















  


























- Traverse (Walk) Light Edges
- Traverse (Walk) and Join Light Edges
- Pivot Out and Walk
- Pivot In and Walk
- Pivot In and Join



.. _walk-light-edge:

Traverse (Walk) Light Edges
---------------------------

The traverse (walk) light edges operator ( ``-(<verb>)>`` or ``<(<verb>)-`` ) is used to traverse from a set of inbound
nodes to the set of nodes they are linked to by the specified light edge(s). Because a light edge is not a node, the
navigation is technically a "traversal" of the light edge as opposed to a property-to-property pivot.

Similar to an edge in a traditional directed graph, light edges have a "direction" (i.e., the relationship represented
by a light edge is "one way"). From a Storm syntax perspective, light edges can be traversed in either direction.

**Syntax:**

- *Walk - Single Light Edge*
  
  *<query>* **-(** *<verb>* **)>** ***** | *<form>*
  
  *<query>* **<(** *<verb>* **)-** ***** | *<form>*

- *Walk - Multiple Light Edges*
  
  *<query>* **-( (** *<verb1>* **,** *<verb2>*  [ **,** *<verb3>* ...] **) )>** ***** | *<form>*
  
  *<query>* **<( (** *<verb1>* **,** *<verb2>*  [ **,** *<verb3>* ...] **) )-** ***** | *<form>*

- *Walk - Any Light Edge (Wildcard)*
  
  *<query>* **-(** ***** **)>** ***** | *<form>*
  
  *<query>* **<(** ***** **)-** ***** | *<form>*

**Examples:**

*Traverse the "refs" light edge from an article to the FQDNs "referenced" by the article:*


.. storm-pre:: [media:news="*" +(refs)> { inet:fqdn=woot.com } ] -(refs)> inet:fqdn
::

    <media:news> -(refs)> inet:fqdn


*Traverse the "refs" light edge from an article to all of the nodes "referenced" by the article:*


.. storm-pre:: media:news -(refs)> *
::

    <media:news> -(refs)> *


*Traverse the "hasip" light edge from an IPv4 address to the CIDR block(s) the IP is part of:*


.. storm-pre:: inet:ipv4 <(hasip)- inet:cidr4
::

    <inet:ipv4> <(hasip)- inet:cidr4


*Traverse the "hasip" and "ipwhois" light edges from an IPv4 address to any nodes linked via those light edges (i.e., typically the CIDR block(s) the IP is part of and the netblock registration record(s) for the IP):*


.. storm-pre:: inet:ipv4 <((hasip, ipwhois))- *
::

    <inet:ipv4> <((hasip, ipwhois))- *


*Traverse any / all light edges from an article to all nodes linked by any light edge:*


.. storm-pre:: media:news -(*)> *
::

    <media:news> -(*)> *


**Usage Notes:**

- The traversal syntax allows specification of a single verb, a list of verbs, or the "wildcard" / asterisk ( ``*`` ) to reference any / all light edge verbs that may be present.
- There are no light edges (i.e., specific light edge verbs) defined in a Cortex by default. Users can create and define their own according to their needs.
- The Storm :ref:`storm-model`, :ref:`storm-edges`, and :ref:`storm-lift-byverb` commands can be used to work with  light edges in a Cortex.

.. _join-light-edge:

Traverse (Walk) and Join Light Edges
------------------------------------

Much like the :ref:`walk-light-edge` operators, the traverse (walk) and join light edges operator (``-(<verb>)+>`` or ``<+(<verb>)-``) is used to traverse from a set of inbound nodes to the set of nodes they are linked to by the specified light edge(s). Unlike :ref:`walk-light-edge`, the inbound nodes are retained and combined with the results of the pivot.

**Syntax:**

- *Walk and Join - Single Light Edge*

  *<query>* **-(** *<verb>* **)+>** ***** | *<form>*
  
  *<query>* **<+(** *<verb>* **)-** ***** | *<form>*

- *Walk and Join - Multiple Light Edges*

  *<query>* **-( (** *<verb1>* **,** *<verb2>*  [ **,** *<verb3>* ...] **) )+>** ***** | *<form>*
  
  *<query>* **<+( (** *<verb1>* **,** *<verb2>*  [ **,** *<verb3>* ...] **) )-** ***** | *<form>*

- *Walk and Join - Any Light Edge*

  *<query>* **-(** ***** **)+>** ***** | *<form>*
  
  *<query>* **<+(** ***** **)-** ***** | *<form>*

**Examples:**

*Traverse the "refs" light edge from an article and join the article with the FQDNs "referenced" by the article:*

.. storm-pre:: [media:news="*" +(refs)> { inet:fqdn=woot.com } ] -(refs)+> inet:fqdn
::

   <media:news> -(refs)+> inet:fqdn

*Join an article with any/all the nodes referenced by the article:*

.. storm-pre::  media:news -(refs)+> *
::

   <media:news> -(refs)+> *

*Traverse the "hasip" light edge from an IPv4 address to the CIDR block(s) the IP is part of and join the two sets together:*

.. storm-pre:: inet:ipv4 <+(hasip)- inet:cidr4
::

   <inet:ipv4> <+(hasip)- inet:cidr4

*Join a set of IPv4 address with the set of any nodes linked to those IPv4 addresses via the "hasip" or "ipwhois" light edges:*

.. storm-pre:: inet:ipv4 <+((hasip, ipwhois))- inet:cidr4
::

    <inet:ipv4> <+((hasip, ipwhois))- *

*Traverse and join any/all light edges from an article to all nodes linked by any light edge:*

.. storm-pre:: media:news -(*)+> *
::

   <media:news> -(*)+> *

.. _pivot-out-and-walk:

Pivot Out and Walk
------------------

The pivot out and walk (traverse) light edges operator ( ``--> *`` ) combines a wildcard pivot out ("refs out") operation ( ``-> *`` ) with a wildcard walk light edges operation ( ``-(*)>`` ).

**Syntax:**

*<query>* **\-\-> ***

**Examples:**

*Pivot from an IP netblock registration record to all nodes referenced by the record's secondary properties and all nodes linked to the record by light edges:*


.. storm-pre:: [inet:whois:iprec="*" :net4:min=89.249.65.0] --> *
::

    <inet:whois:iprec> --> *


**Usage Notes:**

- The pivot out and walk operator can only be used with a wildcard ( ``*`` ); it is not possible to specify a particular form as the target of the operation. A filter operation can be used to refine the results of the pivot and walk operation if necessary.

- The pivot and walk operators (pivot out and walk / pivot in and walk) are useful for "exploring" data in a Cortex as they will return all the nodes "next to" the working set of nodes (subject to :ref:`gloss-type-aware`) without requiring the user to have specific knowledge of the data model.
- The Storm :ref:`storm-tee` command can be used to perform concurrent pivot in and walk / pivot out and walk operations on an inbound set of nodes:
  
.. storm-pre:: inet:dns:a inet:fqdn | tee { --> * } { <-- * }
::
  
  <query> | tee { --> * } { <-- * }

.. _pivot-out-and-join:

Pivot Out and Join
------------------

The pivot out and join operator (``--+>``) is similar to the :ref:`pivot-out-and-walk` operator, but joins the results with the inbound set of nodes. That is, the inbound nodes are retained and combined with the results of the edge pivot.

**Syntax:**

*<query>* **\-\-+> ***

**Example:**

*Join any/all media:news with all nodes linked by any light edge:*

.. storm-pre:: media:news --+> *
::

   <media:news> --+> *

**Usage Notes:**

- Much like the pivot out and walk operator, the pivot out and join operator can only be used with a wildcard ( ``*`` ); it is not possible to specify a particular form as the target of the operation. A filter operation can be used to refine the results of the pivot and walk operation if necessary.

.. _pivot-in-and-walk:

Pivot In and Walk
-----------------

The pivot in and walk (traverse) light edges operator ( ``<-- *`` ) combines a wildcard pivot in ("refs in") operation ( ``<- *`` ) with a wildcard walk light edges operation ( ``<(*)-`` ).

**Syntax:**

*<query>* **<\-\- ***

**Examples:**

*Pivot from a set of IP addresses to all nodes that reference the IPs and all nodes linked to the IPs by light edges:*


.. storm-pre:: inet:ipv4 <-- *
::

    <inet:ipv4> <-- *


**Usage Notes:**

- The pivot in and walk operator can only be used with a wildcard ( ``*`` ); it is not possible to specify a particular form as the target of the operation. A filter operation can be used to refine the results of the pivot and walk operation if necessary.

- The pivot and walk operators (pivot out and walk / pivot in and walk) are useful for "exploring" data in a Cortex as they will return all the nodes "next to" the working set of nodes (subject to :ref:`gloss-type-aware`) without requiring the user to have specific knowledge of the data model.

- The Storm :ref:`storm-tee` command can be used to perform concurrent pivot in and walk / pivot out and walk operations on an inbound set of nodes:
  
.. storm-pre:: inet:fqdn | tee { --> * } { <-- * }
::
  
  <query> | tee { --> * } { <-- * }


.. _pivot-in-and-join:

Pivot In and Join
-----------------

The pivot in and join operator (``<+--``) is similar to the :ref:`pivot-in-and-walk` operator, but joins the results with the inbound set of nodes. That is, the inbound nodes are retained and combined with the results of the edge pivot.

**Syntax:**

*<query>* **<+\-\- ***

**Examples:**

*Join a set of IP addresses with all the nodes that reference the IPs and all nodes linked to the IPs by light edges:*

.. storm-pre:: inet:ipv4 <+-- *
::

   <inet:ipv4> <+-- *

**Usage Notes:**

- Much like the pivot in and walk operator, the pivot in and join operator can only be used with a wildcard ( ``*`` ); it is not possible to specify a particular form as the target of the operation. A filter operation can be used to refine the results of the pivot and walk operation if necessary.








* * * * * * * *





.. _Data Model Explorer: https://synapse.docs.vertex.link/projects/optic/en/latest/user_interface/userguides/get_help.html#using-data-model-explorer
.. _Explore button: https://synapse.docs.vertex.link/projects/optic/en/latest/user_interface/userguides/quick_tour.html#explore-button-breadcrumbs
.. _edge nodes: https://synapse.docs.vertex.link/en/latest/synapse/userguides/data_model.html#edge-digraph-form
.. _types: https://synapse.docs.vertex.link/en/latest/synapse/userguides/data_model.html#data-type
.. _consume: https://synapse.docs.vertex.link/en/latest/synapse/userguides/storm_ref_intro.html#node-consumption
.. _Edge nodes: https://synapse.docs.vertex.link/en/latest/synapse/userguides/data_model.html#edge-digraph-form

