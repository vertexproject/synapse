.. highlight:: none

.. storm-cortex:: default

.. _storm-ref-pivot:

Storm Reference - Pivoting
==========================

Pivot operations are performed on the output of a previous Storm operation such as a lift or filter.
A pivot operation navigates from one set of nodes to another based on some relationship between the
nodes. This relationship is commonly one of the following:

- The nodes have properties that share the same value and the same :ref:`gloss-type`.
- The nodes have properties that share the same value but are of different types.
- The nodes are joined by a :ref:`data-light-edge`.

While all node-to-node navigation is referred to generically as "pivoting", for clarity we make a
distinction with respect to Storm:

- a **pivot** operation navigates between nodes that share a property value; and
- a **traversal** operation navigates between nodes that are connected via a light edge. Traversal
  is also known as a "walk" operation (i.e., you can traverse a light edge or walk a light edge).

Pivots and traversals each have their own operator (symbol) used to represent the operation. The
operations can also be combined ("pivot and walk") in various ways using additional operators.

Generically, all variations of pivots and traversals (including combined operations) require:

- a set of source nodes;
- an operator (symbol) for the kind of operation to be performed; and
- the target node(s) for the operation.

In most cases, the target of the operation can be:

- a form name or form property name;
- an interface name or interface property name;
- a list of target form names; or
- a wildcard (asterisk) character ( ``*`` ).

.. NOTE::
  
  You cannot specify property **values** in pivot or traversal operations. Both of the following are
  invalid:
  
  ``inet:fqdn = vertex.link -> inet:dns:a:ipv4=127.0.0.1``
  
  ``media:news -(refs)> inet:fqdn = woot.com``
  
  If you want to pivot (or traverse) to a specific node or subset of nodes, you must perform the
  operation to the target forms, and then filter your results based on the property value(s) you
  are interested in:
  
  ``inet:fqdn = vertex.link -> inet:dns:a +:ipv4 = 127.0.0.1``
  
  ``media:news -(refs)> inet:fqdn +inet:fqdn = woot.com``

See :ref:`storm-ref-syntax` for an explanation of the syntax format used below.

See :ref:`storm-ref-type-specific` for details on special syntax or handling for specific data types.


.. _model-navigation:

Navigating the Data Model
-------------------------

To navigate (pivot between properties, or traverse light edges) the data in Synapse, it helps to
understand how forms, properties, and types are related, and to be familiar with common light
edge conventions and how they are used to connect various forms.

- The Synapse Data Model :ref:`dm-forms` documentation lists:
  
  - All forms in Synapse, with their associated properties and types.
  - The edges that can be used to link a given form (whether as the source or target of the edge).

- For :ref:`gloss-optic` users, Optic's `Data Model Explorer`_ allows you to search, cross-reference,
  and view data model objects. In addition to the information above, Data Model Explorer also lists
  all of the forms that reference a given form (i.e., where that form's type is a secondary property
  on another form).


.. _pivot-wildcard:

Using the Wildcard as a Target
------------------------------

You can use the wildcard as the target of a pivot or traversal operation to support ongoing analysis
("this is the subset of target nodes I want to see") or as a way to explore a subset of connected
data (if you are not sure what connections exist in your instance of Synapse, and you want to see
what's there).
  
Keep in mind that individual wildcard pivots or traversals do not show you **all** nodes that are
connected to your source nodes, only those nodes that are connected via the specific operation performed.
See the examples below for details.
  
The following Storm expression can be used to show **all** nodes that are connected to your source
nodes, regardless of the type of property pivot or edge traversal relationship:
  
::
  
  <source_nodes> tee { --> * } { <-- * }

The expression uses the Storm :ref:`storm-tee` command to perform two operations on the set of
source nodes (a :ref:`pivot-out-and-walk` and a :ref:`pivot-in-and-walk`, with the wildcard as
the target in each case) and return the combined results.

Note that this query is equivalent to using the `Explore button`_ in the Optic UI to navigate.

There are two minor exceptions to this "show me all the connections" operation:

- It will not return connections to `edge nodes`_ which are not commonly used (in many cases,
  they have been deprecated in favor of light edges). Pivoting to (and across) edge nodes is
  described below.

- It will not return property connections where nodes may have have a common property **value**,
  but the properties are of different **types** (because use of the wildcard to "find" relationships
  depends on :ref:`gloss-type-aware).


.. _storm-pivot:

Pivot Operations
----------------

Pivot operations navigate between sets of nodes that have properties that share a common value. Each
pivot operation requires:

- the source node(s) for the pivot;
- a pivot operator (such as ``->``); and
- the target of the pivot.

Depending on the kind of pivot, you may need to specify a source and / or target propery (or properties)
for the pivot as well. See the discussion of :ref:`implicit-pivot-syntax` below.

While there are a few specialized use cases (such as pivoting to or from tags), most pivots involve navigating
between the following kinds of properties:

- primary to secondary;
- secondary to primary;
- secondary to secondary; or
- primary to primary.

.. NOTE::
  
  Primary to primary property pivots are a specialized use case that is commonly handled using
  :ref:`raw-pivot-syntax`, below.

In Synapse, these property-to-property relationships are **implicit** relationships. You do not
need to explicitly "define" the relationship or "link" the nodes. In fact, if the source and target
properties have the same value **and** the same :ref:`gloss-type`, Storm can use Synapse's
:ref:`gloss-type-aware` to simplify pivot operations and identify relationships among nodes.


.. _implicit-pivot-syntax:

Implicit Pivot Syntax
+++++++++++++++++++++

Pivot operations in Storm can always be executed by **explicitly** specifying the source and target
properties for the pivot. This is referred to as **explicit pivot syntax** ("explicit syntax" for
short).

When researching network infrastructure, a common set of pivots is to navigate from a set of FQDNs
(``inet:fqdn`` nodes) to their DNS A records (``inet:dns:a`` nodes) and then to the IPv4 addresses
(``inet:ipv4`` nodes) that the A records point to. The following Storm query performs those pivots
using explicit syntax:

.. storm-pre:: [ inet:dns:a=(vertex.link,1.1.1.1) ]
.. storm-pre:: inet:fqdn=vertex.link -> inet:dns:a:fqdn :ipv4 -> inet:ipv4
::
  
  inet:fqdn = vertex.link -> inet:dns:a:fqdn :ipv4 -> inet:ipv4

The query:

- lifts the FQDN ``vertex.link``;
- pivots from the FQDN to any DNS A node with the same FQDN property value (``inet:dns:a:fqdn``); and
- pivots from the ``:ipv4`` property of the ``inet:dns:a`` nodes to any ``inet:ipv4`` nodes with the
  same value.

In the first pivot, we explicitly specify ``inet:dns:a:fqdn`` as our target property; in the second
pivot, we explicitly specify the ``:ipv4`` property of the ``inet:dns:a`` nodes as our source property.
Explicit syntax tells Storm **exactly** what you want to do; there is no ambiguity in the query or in
"how" you want to navigate the data.

.. NOTE::
  
  When specifying a secondary property as the source of a pivot (such as ``:ipv4`` above), you must
  specify the property using relative property syntax (i.e., using the property name alone). If you
  were to use full property syntax (``inet:dns:a:ipv4``) Synapse would interpret that as a lift
  operation - i.e., "after you pivot to the DNS A records with an FQDN of vertex.link, then lift ALL
  DNS A records that have an IPv4 property and pivot to ALL of the associated IPv4 nodes".

Explicit syntax is precise, but there is extra work ("more typing") involved to create the query. And
in many cases, the desired source and target of each of the pivots is self-evident; in other words,
if you are pivoting from an FQDN (``inet:fqdn``) to a DNS A record (``inet:dns:a``), the ``:fqdn`` 
property is the only target property that makes sense.

In these cases, you can use **implicit pivot syntax** (implicit syntax) for your Storm query. Implicit
syntax takes advantage of Synapse's :ref:`gloss-type-aware` to "know" which properties can be pivoted
to (or from), given the source and target forms for the pivot operation. With implicit syntax, you do
not need to specify the source or target property in cases where it is self-evident given the forms used.

Using implicit syntax, we can rewrite the above query as follows:

.. storm-pre:: inet:fqdn =  vertex.link -> inet:dns:a -> inet:ipv4

::
  
  inet:fqdn =  vertex.link -> inet:dns:a -> inet:ipv4


With implicit syntax, we can simply specify the source and target **forms**, and allow Synapse to identify
the source and target **properties** using `types`_ and type awareness.

Implicit syntax can be used in the following cases where the source and target properties have the same
type and the same value:

- Primary to secondary property pivots.
- Secondary to primary property pivots.

Implicit pivot syntax cannot be used in the following cases:

- Primary to primary property pivots (see :ref:`raw-pivot-syntax`, below).
- Secondary to secondary property pivots.
- Pivots between primary and secondary (or secondary and primary) properties involving tags (i.e., where the
  type is ``syn:tag``).
- Pivots between primary and secondary (or secondary and primary) properties with the same value but of
  different **types**.
- Pivots between primary and secondary (or secondary and primary) properties where the source or target is
  ambiguous (e.g., where a form has more than one property of the same type, and you only want to pivot to
  (or from) one of them).

.. TIP::
  
  The examples below use implicit syntax where possible and may include explicit syntax for completeness.
  Where implicit syntax cannot be used, only explicit syntax is shown.


.. _pivot-out:

Pivot Out
+++++++++

Most pivots are "pivot out" operations (or variations) and are commonly called "pivot" opertations for
simplicity. "Pivot out" refers to the "direction" of the pivot operator symbol: an "arrow" ( ``->`` )
that points "out" from left to right and is meant to contrast with the specialized :ref:`pivot-in`
operation (and associated operator).

Pivot out operations require:

- the source node(s) for the pivot;
- the pivot operator ( ``->`` ); and
- the target of the pivot.

The targert of a pivot can be any of the following:

- a form name or partial form name (wildcard), or :ref:`interface`;
- a form or interface name and an associated property name;
- a list of form names;
- a wildcard.


.. _pivot-primary-secondary:

Primary to Secondary Property Pivot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When pivoting from the primary property of a set of source nodes to target nodes with the same secondary
property value (e.g., from a set of FQDNs to their associated DNS A nodes), you can specify the target nodes
using:

- a form name or interface name;
- a form or interface name with its associated property; or
- a partial form name (wildcard form match).

Implicit syntax can be used for these pivots if the target property is self-evident / unambiguous.


**Syntax:**

*<query>* **->** *<form>*

*<query>* **->** *<form>* [ **:** | **.** | **._** *<prop>* ]

*<query>* **->** *<partial_form_name>* *****

*<query>* **->** *<interface>*

*<query>* **->** *<interface>* [ **:** *<prop>* ]


**Examples:**

*Pivot from a set of FQDNs (inet:fqdn nodes) to their associated DNS requests (inet:dns:request nodes):*

.. storm-pre:: [ inet:fqdn=vertetx.link inet:fqdn=woot.com (inet:dns:request=* :query:name:fqdn=woot.com) ]
.. storm-pre:: inet:fqdn -> inet:dns:request
.. storm-pre:: inet:fqdn -> inet:dns:request:query:name:fqdn

::
  
  <inet:fqdns> -> inet:dns:request

The query above uses implicit syntax; Synapse recognizes that the logical target property (given source nodes
that are FQDNs) is ``:query:name:fqdn``. You could optionally use explicit syntax:

::
  
  <inet:fqdns> -> inet:dns:request:query:name:fqdn

*Pivot from a set of IPv4 addresses (inet:ipv4 nodes) to any network flows (inet:flow nodes) associated with the IPs:*

.. storm-pre:: [ inet:ipv4=1.1.1.1 inet:ipv4=2.2.2.2 inet:ipv4=3.3.3.3 (inet:flow=* :src:ipv4=1.1.1.1 :dst:ipv4=2.2.2.2 :dst:port=1337) (inet:flow=* :dst:ipv4=3.3.3.3 :dst:port=80) ]
.. storm-pre:: inet:ipv4 -> inet:flow
.. storm-pre:: inet:ipv4 -> inet:flow:dst:ipv4

::
  
  <inet:ipv4s> -> inet:flow

The query above uses implicit syntax. Note that because ``inet:flow`` nodes have two target properties of type
``inet:ipv4`` (``:src:ipv4`` and ``:dst:ipv4``), the result of this query will be all ``inet:flow`` nodes where
the inbound IPv4s are either the source **or** destination IP. If you only want to see flows where the inbound
IPv4s are the destination IP (for example), you must use explicit syntax to clarify this:

::
  
  <inet:ipv4s> -> inet:flow:dst:ipv4

*Pivot from a set of tags (syn:tag nodes) to the threat clusters (risk:threat) nodes represented by those tags:*

.. storm-pre:: [ syn:tag=rep.eset.vicious_wombat (risk:threat=* :reporter:name=eset :tag=rep.eset.vicious_wombat) syn:tag=rep.symantec.sparkling_unicorn (risk:threat=* :reporter:name=symantec :tag=rep.symantec.sparkling_unicorn) ]
.. storm-pre:: syn:tag -> risk:threat:tag

::
  
  <syn:tags> -> risk:threat:tag

The query above uses explicit syntax. Even though the ``:tag`` property is of type ``syn:tag``, ``syn:tag`` nodes
have specialized handling with respect to pivoting in Storm (see :ref:`pivot-from-tags` and :ref:`pivot-to-tags`
below). Because pivots involving ``syn:tag`` nodes are handled differently by default, you must use explicit
syntax when pivoting between tags (``syn:tag`` nodes) and ``:tag`` properties.


*Pivot from a set of FQDNs (inet:fqdn nodes) to any associated DNS records (e.g., inet:dns:a, inet:dns:cname, inet:dns:ns, inet:dns:request, etc.):*

.. storm-pre:: [ inet:dns:a=(woot.com,4.4.4.4) inet:dns:ns=(woot.com,ns1.woot.com) inet:dns:mx=(woot.com,mx.woot.com) ]
.. storm-pre:: inet:fqdn -> inet:dns:*

::
  
  <inet:fqdns> -> inet:dns:*

The query above uses the wildcard ( ``*`` ) as a partial match for any form name that starts with ``inet:dns:``.

*Pivot from a set of FQDNs (inet:fqdn nodes) to any associated DNS A or DNS AAAA records:*

.. storm-pre:: inet:fqdn -> inet:dns:a*

::
  
  <inet:fqdns> -> inet:dns:a*

*Pivot from a set of files to all host execution nodes (forms that inherit the it:host:activity interface - e.g., it:exec:file:add, it:exec:url, etc.) associated with those files:*

.. storm-pre:: [ file:bytes=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 (it:exec:file:write=* :sandbox:file=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 :exe=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855) (it:exec:mutex=* :sandbox:file=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b8550 ]
.. storm-pre:: file:bytes -> it:host:activity
.. storm-pre:: file:bytes -> it:host:activity:exe

::
  
  <file:bytes> -> it:host:activity

The query above uses implicit syntax. The ``it:host:activity`` interface defines two properties of type
``file:bytes`` for host activity nodes - ``:exe`` (the file whose execution performed the action) and
``:sandbox:file`` (the file initially executed in a sandbox environment, which may not be the file that
performed the action observed by the sandbox). They query above will return all activity nodes where the
inbound files appear in either property. If you only want to see activity nodes whose ``:exe`` property
(for example) matches the inbound files, you need to use explicit syntax:

::
  
  <file:bytes> -> it:host:activity:exe

*Pivot from a set of usernames (inet:user nodes) to any file paths (file:path nodes) where the username is an element of the path (a :base value - for example, where a username might appear in a PDB path):*

.. storm-pre:: [ inet:user=swanson file:path='c:\users\swanson\dev\projects\getthesnacks\release\getthesnacks.pdb' ]
.. storm-pre:: inet:user=swanson -> file:path:base
.. storm-pre:: inet:user=swanson -> file:path:base tree { -> file:path:dir }

::
  
  <inet:users> -> file:path:base

The query above uses explicit syntax. The ``inet:user`` form has a type of ``inet:user``, but the ``:base``
property of the ``file:path`` form has a type of ``file:base``. Because the properties are two different types,
you must use explicit syntax for this pivot.

.. TIP::
  
  The query above will return the (partial) ``file:path`` whose final element is the user name (e.g.,
  ``c:\users\evilhacker``). You can use the Storm :ref:`storm-tree` command to recursively pivot through
  the remaining ``file:path`` elements to obtain the full path:
  
  ::
    
    <inet:users> -> file:path:base tree { -> file:path:dir }


.. _pivot-secondary-primary:

Secondary to Primary Property Pivot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When pivoting from a secondary property of a set of source nodes to target nodes with the same primary
property (e.g., from a set of DNS A nodes to their associated FQDNs), you can specify the target nodes using:

- a form name; or
- a list of form names.

Implicit syntax can be used for these pivots if the source property if it is self-evident / unambiguous.

.. TIP::
  
  The the wildcard (asterisk) character ( ``*`` ) can also be used as a target for a specialized pivot known
  as a "wildcard pivot out". This pivot navigates from any/all secondary properties on the source nodes to
  the nodes corresponding to those property values.


**Syntax:**

*<query>* [ **:** | **.** | **:_** *<prop>* ] **->** *<form>*

*<query>* [ **:** | **.** | **:_** *<prop>* ] **->** **(** *<form_1>* **,** *<form_2>* ... **)**

*<query>* **->** *****

.. NOTE::
  
  If you specify a source property for the pivot, you must use the relative property name (i.e., the
  property name alone, preceded by its separator character).


**Examples:**

*Pivot from a set of DNS A records (inet:dns:a nodes) to their associated FQDNs (inet:fqdn nodes):*

.. storm-pre:: inet:dns:a -> inet:fqdn
.. storm-pre:: inet:dns:a :fqdn -> inet:fqdn

::
  
  <inet:dns:a nodes> -> inet:fqdn

The query above uses implicit syntax. Synapse recognizes that the logical source property is
``inet:dns:a:fqdn``, given a target form of ``inet:fqdn``. You could optionally use explicit syntax:

::
  
  <inet:dns:a nodes> :fqdn -> inet:fqdn


*Pivot from a set of DNS NS records (inet:dns:ns nodes) to their associated FQDNs (inet:fqdn nodes):*

.. storm:pre:: [ inet:dns:ns=(woot.com,ns1.woot.com) inet:dns:ns=(woot.com,ns2.woot.com) ]
.. storm:pre:: inet:dns:ns -> inet:fqdn
.. storm:pre:: inet:dns:ns :ns -> inet:fqdn

::
  
  <inet:dns:ns nodes> -> inet:fqdn

The query above uses implicit syntax. Because ``inet:dns:ns`` nodes have two properties of type ``inet:fqdn``
(``:zone`` and ``:ns``), Synapse will pivot to the FQDNs associated with both values. If you only want to
pivot to the FQDNs associated with the name server (NS) FQDNs (for example), you must use explicit syntax:

::
  
  <inet:dns:ns nodes> :ns -> inet:fqdn


*Pivot from a set of X509 certificate metadata nodes (crypto:x509:cert nodes) to the associated SHA1 fingerprints and to any FQDNs associated with the certificates:*

.. storm-pre:: [ crypto:x509:cert=* :md5=6b9fdcadf7ea5de1f1402a1cb62c7a65 :sha1=0008e9f15b9ff20de82c276cc54ec9dc094f54f8 :sha256=b1ee0920c4f4d5ded50732d15186eae5357eb743cbbb98ee935bd0791520b5f7 :identities:fqdns=(aliceplants.com,) ]
.. storm-pre:: crypto:x509:cert -> ( hash:sha1, inet:fqdn )

::
  
  <crypto:x509:cert nodes> -> ( hash:sha1, inet:fqdn )

.. TIP::
  
  Specifying a list of target forms allows you to perform a more focused pivot (in contrast to pivoting to
  any / all target forms using a wildcard). The elements of the list must be enclosed in parentheses and
  separated by commas.

*Pivot from a set of X509 certificate metadata nodes (crypto:x509:cert nodes) to any/all nodes associated with any of the certificates' secondary properties:*

.. storm-pre:: crypto:x509:cert -> *

::

  <crypto:x509:cert nodes> -> *

The query above is an example of a **wildcard pivot out**. For any secondary properties on the source nodes,
the query will return the associatetd nodes. For example, if the ``crypto:x509:cert:identities:ipv4s`` property
is set, the query will return the associated ``inet:ipv4`` nodes. A wildcard pivot out is also known as a "refs
out" pivot (for "references") because it pivots to the nodes "referenced by" the source nodes' secondary properties.


.. _pivot-secondary-secondary:

Secondary to Secondary Property Pivot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When pivoting from a secondary property of a set of source nodes to target nodes with the same secondary
property (e.g., from the ``:ipv4`` property of a set of DNS A nodes to a set of network flow nodes with
the same IPv4 as a ``:dst:ipv4`` property), you can specify the target nodes using:

- a form name and property name; or
- an interface name and property name.

You must use explicit syntax to specify both the source and target properties.


**Syntax:**

*<query>* **:** | **.** | **:_** *<prop>* **->** *<form>* **:** | **.** | **:_** *<prop>*

*<query>* **:** | **.** | **:_** *<prop>* **->** *<interface>* **:** *<prop>*


**Examples:**

*Pivot from the WHOIS records (inet:whois:rec nodes) for a set of domains to the DNS A records (inet:dns:a nodes) for the same domains:*

.. storm-pre:: [inet:whois:rec=(woot.com, 2017/07/17 00:00:00.000)] :fqdn -> inet:dns:a:fqdn

::
  
  <inet:whois:rec nodes> :fqdn -> inet:dns:a:fqdn

.. TIP::
  
  In many cases, secondary to secondary property pivots are a "shortcut" for two pivot operations (secondary to
  primary and primary to secondary) that perform the equivalent navigation. For example:
  
  ::
    
    <inet:whois:rec nodes> -> inet:fqdn -> inet:dns:a

*Pivot from a set of DNS requests (inet:dns:request nodes) to all host activity nodes (all nodes of all forms that inherit the it:host:activity interface) that share the same file a their :exe property:*

.. storm-pre:: [ file:bytes=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 (inet:dns:request=* :query:name:fqdn=woot.com :exe=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855) (it:exec:file:write=* :exe=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 :path='c:/windows/scvhost.exe') (it:exec:file:read=* :exe=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 :path='c:/windows/autoexec.bat') ]
.. storm-pre:: inet:dns:request:exe -> it:host:activity:exe

::
  
  <inet:dns:request nodes> :exe -> it:host:activity:exe


.. _pivot-in:

Pivot In
++++++++

The pivot in operator is an "arrow" ( ``<-`` ) thatt points "in" from right to left.

Pivot operations navigate between sets of nodes that share a common property value. Logically, pivot
operations are functionally equivalent whether the pivot "arrow" points out (left to right) or in
(right to left):

- Pivot from a set of FQDNs to their associated DNS A records:
  
  ``<inet:fqdns>`` -> inet:dns:a``

- Pivot from a set of FQDNs to the DNS A records that reference them:
  
  ``<inet:fqdns>`` <- inet:dns:a``

Because of this equivalence, and because Storm evaluates operations from left to right, the "pivot out"
arrow is generally more intuitive and has been used to implement nearly all pivot operations in Storm
(the second example, above, will generate a ``StormRuntimeError``).

The pivot in operation is a specialized operation that can only be used with the wildcard ( ``*`` ) as a
target. This "wildcard pivot in" operation navigates from the primary property of the source node(s) to
any nodes where that value is a secondary property. A wildcard pivot in is also known as a "refs in" pivot
(for "references") because it pivots out to the nodes that "reference" the source nodes' primary property.


**Syntax:**

*<query>* **<-** *****
 
**Example:**

*Pivot from a set of FQDNs (inet:fqdn nodes) to all nodes with a secondary property that references a source FQDN:*

.. storm-pre:: inet:fqdn <- *
::

    <inet:fqdn> <- *

A wildcard pivot in will return any node with a secondary property value that matches any of the source FQDNs.
For example, the above query could return various DNS records (``inet:dns:a:fqdn``, ``inet:dns:mx:mx``,
``inet:dns:mx:fqdn``), URLs (``inet:url:fqdn``), email addresses (``inet:email:fqdn``), articles (``media:news:url:fqdn``),
and so on.


.. _storm-pivot-join:

Pivot and Join Operations
-------------------------

Like most Storm operations, pivots `consume`_nodes. When you pivot in Storm, you navigate "away" from your
source nodes; the nodes that are the target of the pivot become your working set / result set.

With a pivot and join operation, the inbound (source) nodes are retained and combined (joined) with the target
nodes in a single result set.

.. _pivot-join:

Pivot and Join
++++++++++++++

The pivot and join operator ( ``-+>`` ) is an "arrow" with a plus sign ( ``+`` ) in the middle to represent
joining the source and target nodes. The operator can be used in anywhere the standard ( ``->`` ) pivot
operator is used, including the wildcard pivot out; refer to syntax examples above.

**Examples:**

*Pivot from a set of organizations (ou:org nodes) to any associated contacts (ps:contact nodes), retaining the organizations in the results:*

.. storm:pre:: [ (ou:org=4b0c2c5671874922ce001d69215d032f :name=vertex  :hq=d41d8cd98f00b204e9800998ecf8427e) (ps:contact=d41d8cd98f00b204e9800998ecf8427e :orgname=vertetx :org=4b0c2c5671874922ce001d69215d032f) ]
.. storm:pre:: ou:org -+> ps:contact

::
  
  <ou:orgs> -+> ps:contact

*Pivot from a set of DNS A records (inet:dns:a nodes) to their associated IPv4 addresses (inet:ipv4 nodes), retaining the DNS A records in the results:*

.. storm-pre:: inet:dns:a :ipv4 -+> inet:ipv4

::
  
  <inet:dns:a nodes> -+> inet:ipv4


*Pivot from a set of domain WHOIS records (inet:whois:rec nodes) to the DNS A records (inet:dns:a nodes) associated with the FQDNs, retaining the WHOIS records in the results:*

.. storm-pre:: inet:whois:rec :fqdn -+> inet:dns:a:fqdn

::
  
  <inet:whois:rec nodes> :fqdn -+> inet:dns:a:fqdn

*Pivot from all secondary properties of a set of files (file:bytes nodes) to the associated nodes, retaining the files in the results:*

.. storm-pre:: file:bytes -+> *

::
  
  <file:bytes nodes> -+> *


.. _pivot-in-join:

Pivot In and Join
+++++++++++++++++

The pivot in and join operator ( ``<+-`` ) can be used to perform a wildcard pivot in operation and join the results
with the source nodes. Just as with a standard pivot in, the wildcard is the only valid target for this operation.

**Syntax:**

*<query>* **<+-** *****

**Example:**

*Pivot from a set of files (file:bytes nodes) to any nodes that reference the files, while retaining the original files in the results:*

.. storm-pre:: file:bytes <+- *

::
  
  <file:bytes nodes> <+- *




















specialized pivot operations

pivot to / from tags

pivot to edge nodes

pivot across edge nodes

raw pivot syntax






traversal operations

traverse and join operations

still more operations












*<query>* [ **:** *<prop>* ] **->** *<form>*

*<query>* [ **:** *<prop>* ] **->** *<partial_form_name>* *****

*<query>* [ **:** *<prop>* ] **->** **(** *<form_1>* **,** *<form_2>* ... **)**

*<query>* [ **:** *<prop>* ] **->** *<form>* [ **:** *<prop>* ]

*<query>* [ **:** *<prop>* ] **->** *<interface>*

*<query>* [ **:** *<prop>* ] **->** *<interface>* [ **:** *<prop>* ]


















  








.. _pivot-to-tags:

Pivot to Tags
-------------

Pivot to tags syntax allows you to pivot from a set of nodes with tags to the set of ``syn:tag`` nodes representing those tags. This includes:

- pivot to all leaf tag nodes,
- pivot to all tag nodes,
- pivot to all tag nodes matching a specified pattern, and
- pivot to tag nodes matching an exact tag.

See the :ref:`analytical-model` document for additional discussion of tags as nodes (``syn:tag`` nodes) and tags as labels applied to other nodes.

**Syntax:**

*<query>* **-> #** [ ***** | *<tag>* **.*** | *<tag>* ]

**Examples:**

*Pivot to all leaf tag nodes:*

- Pivot from a set of domains to the ``syn:tag`` nodes for all **leaf** tags applied to those domains (i.e., the  longest / final tag in each tree applied to each node):


.. storm-pre:: inet:fqdn=woot.com inet:fqdn=vertex.link inet:fqdn=google.com -> #
::

    <inet:fqdn> -> #


*Pivot to ALL tag nodes:*

- Pivot from a set of files to the ``syn:tag`` nodes for **all** tags applied to those files (i.e., each tag in each tag tree applied to each node, from root to leaf):


.. storm-pre:: [file:bytes=sha256:b6e7343b9250ad141db66c7bb2cd18c8a6939ff6cdff616683ba6b6a4ff7aa91 +#cno.rel] -> #*
::

    <file:bytes> -> #*


*Pivot to all tag nodes matching the specified pattern:*

- Pivot from a set of IP addresses to the ``syn:tag`` nodes for all tags applied to those IPs that are part of the anonymized infrastructure tag tree:


.. storm-pre:: inet:ipv4 -> #cno.infra.anon.*
::

    <inet:ipv4> -> #cno.infra.anon.*


*Pivot to tag nodes exactly matching the specified tag:*

- Pivot from a set of nodes to the ``syn:tag`` node for ``#foo.bar`` (if present on the inbound set of nodes):


.. storm-pre:: inet:fqdn -> #foo.bar
::

    <query> -> #foo.bar


**Usage Notes:**

- Pivot to all tags ( ``#*`` ) and pivot by matching an initial pattern ( ``#<tag>.*`` ) will match **all** tags in the relevant tag trees from the inbound nodes, not just the leaf tags. For example, for an inbound node with tag ``#foo.bar.baz``, ``#*`` will return the ``syn:tag`` nodes for ``foo``, ``foo.bar``, and ``foo.bar.baz``.
- When using the asterisk / wildcard ( ``*`` ) to match a pattern, the wildcard(s) can be used anywhere within the tag name (value); they are not limited to matching elements within the tag's dotted namespace. For example, all of the following are valid (though may return different results):

  - ``-> #aka.thr.*``
  - ``-> #aka.t*``
  - ``-> #a*``
  - ``-> #*thr*``
  - ``-> #*.thr.*``

- The pivot to tags operator does not support pivoting directly to a set of tags specified by a prefix match ( ``^`` ) or regular expression ( ``~`` ). However, these operators can be used as part of a subsequent filter operation to further refine the results of the pivot.

.. _pivot-from-tags:

Pivot from Tags
---------------

Pivot from tags syntax allows you to pivot from a set of ``syn:tag`` nodes to the set of nodes that have those tags.

**Syntax:**

*<syn:tag>* **->** ***** | *<form>*

**Examples:**

- Pivot to all domains tagged with tags from any of the inbound ``syn:tag`` nodes:


.. storm-pre:: syn:tag -> inet:fqdn
::

    <syn:tag> -> inet:fqdn


- Pivot to **all** nodes tagged with tags from any of the inbound ``syn:tag`` nodes:


.. storm-pre:: syn:tag -> *
::

    <syn:tag> -> *


**Usage Notes:**

- In many cases, pivot from tags is functionally equivalent to :ref:`lift-by-tag`. That is, the following queries will both return all nodes tagged with ``#aka.feye.thr.apt1``:

  ``syn:tag=aka.feye.thr.apt1 -> *``
  
  ``#aka.feye.thr.apt1``
  
  Pivoting from tags is most useful when used in conjunction with `Pivot to Tags`_ - that is, taking a set of inbound nodes, pivoting to the ``syn:tag`` nodes for any associated tags (pivot to tags), and then pivoting out again to other nodes tagged with some or all of those tags (pivot from tags).

.. _pivot-to-edge:

Pivot to Digraph (Edge) Nodes
-----------------------------

Digraph (edge) nodes (:ref:`form-edge`) are of type ``edge`` or ``timeedge``. These nodes (forms) are unique in that
their primary property value is a pair of **node definitions** (type :ref:`gloss-ndef`) - that is, *<form>, <valu>*
tuples. (``timeedge`` forms are comprised of two *<form>, <valu>* tuples and an additional *<time>* value). Each
*<form>, <valu>* tuple from the primary property is broken out as secondary property ``:n1`` or ``:n2`` of type
*<ndef>*. This means that pivoting to and from digraph nodes is a bit different than pivoting to and from nodes whose
properties are a simple *<valu>* or *<pval>*.

.. NOTE::
  
  Edge nodes are not formally deprecated, but the use of light edges (see :ref:`data-light-edge`) is now preferred
  over edge nodes.

**Syntax:**

*<query>* **->** *<edge>* | *<timeedge>* [**:n2**]

*<query>* **-+>** *<edge>* | *<timeedge>* [**:n2**]

*<query>* **<-** *<edge>* | *<timeedge>*

**Examples:**

*Pivot out from a set of nodes whose ndefs (<form>, <valu>) are the first element (:n1) in a set of a digraph nodes:*

- Pivot out from a person node to the set of digraph nodes representing things that person “has”:



.. storm-pre:: [ps:person="*"] -> edge:has
::

    <ps:person> -> edge:has


- Pivot out from a person node to the set of ``timeedge`` digraph nodes representing places that person has been to (and when):


.. storm-pre::  ps:person -> edge:wentto
::

    <ps:person> -> edge:wentto


*Pivot in from a set of nodes whose ndefs (<form>, <valu>) are the second element (:n2) in a set of a digraph nodes:*

- Pivot in from an article to the set of digraph nodes representing things that “have” the article (e.g., people or organizations who authored the article):


.. storm-pre:: media:news <- edge:has
::

    <media:news> <- edge:has


**Usage Notes:**

- To simplify working with digraph nodes and their ``ndef`` properties, Storm makes some assumptions (optimizations) when using the pivot out and pivot in operators:

  - When pivoting to or from a set of nodes to a set of digraph nodes, pivot using the ``ndef`` (*<form>,<valu>*) of the inbound nodes and not their primary property (*<valu>*) alone.
  - When pivoting **out** to a digraph node, the inbound nodes’ *<form>,<valu>* ``ndef`` will be the **first** element (``:n1``) of the digraph. You must explicitly specify ``:n2`` as the target property to pivot using the second element.
  - When pivoting **in** to a digraph node, the inbound nodes’ *<form>,<valu>* ``ndef`` will be the **second** element (``:n2``) of the digraph. It is not possible to pivot into the ``:n1`` value.

- Pivoting to / from digraph nodes is one of the specialized use cases for the pivot in ( ``<-``) operator, however the primary use case of pivot in with digraph nodes is reverse edge traversal (see `Pivot Across Digraph (Edge) Nodes`_). See `Pivot In Operator`_ for general limitations of the pivot in operator.



.. _pivot-across-edge:

Pivot Across Digraph (Edge) Nodes
---------------------------------

Because digraph nodes represent generic edge relationships, analytically we are often more interested in the nodes
on "either side" of the edge than in the digraph node itself. For this reason, the pivot operators have been
optimized to allow a syntax for easily navigating "across" these digraphs (edges).

.. NOTE::
  
  Edge nodes are not formally deprecated, but the use of light edges (see :ref:`data-light-edge`) is now preferred
  over edge nodes.

**Syntax:**

*<query>* **->** *<edge>* | *<timeedge>* **->** ***** | *<form>*

*<query>* **<-** *<edge>* | *<timeedge>* **<-** ***** | *<form>*

**Examples:**

- Traverse a set of ``edge:has`` nodes to pivot from a person to all the things the person "has":


.. storm-pre:: ps:person -> edge:has -> *
::

    <ps:person> -> edge:has -> *


- Traverse a set of ``edge:wentto`` nodes to pivot from a person to the locations the person has visited:


.. storm-pre:: ps:person -> edge:wentto -> *
::

    <ps:person> -> edge:wentto -> *


**Usage Notes:**

- Storm makes the following assumptions to optimize the two pivots:

  - For pivots out, the first pivot is to the digraph nodes’ ``:n1`` property and the second pivot is from the digraph nodes’ ``:n2`` property.
  - For pivots in, the first pivot is to the digraph nodes’ ``:n2`` property and the second pivot is from the digraph nodes’ ``:n1`` property.

- Pivoting "across" the digraph nodes still performs two pivot operations (i.e., to the digraph nodes and then from them). As such it is still possible to apply an optional filter to the digraph nodes themselves before the second pivot.















- `Traverse (Walk) Light Edges`_
- `Traverse (Walk) and Join Light Edges`_
- `Pivot Out and Walk`_
- `Pivot In and Walk`_
- `Pivot In and Join`_
- `Implicit Pivot Syntax`_
- `Raw Pivot Syntax`_

.. NOTE::
  
  Light edges represent a special use case within the Synapse hypergraph; navigating (traversing) light edges (:ref:`data-light-edge`) is included here as a "pivot-like" operation.





































.. _walk-light-edge:

Traverse (Walk) Light Edges
---------------------------

The traverse (walk) light edges operator ( ``-(<verb>)>`` or ``<(<verb>)-`` ) is used to traverse from a set of inbound
nodes to the set of nodes they are linked to by the specified light edge(s). Because a light edge is not a node, the
navigation is technically a "traversal" of the light edge as opposed to a property-to-property pivot.

Similar to an edge in a traditional directed graph, light edges have a "direction" (i.e., the relationship represented
by a light edge is "one way"). From a Storm syntax perspective, light edges can be traversed in either direction.

**Syntax:**

- *Walk - Single Light Edge*
  
  *<query>* **-(** *<verb>* **)>** ***** | *<form>*
  
  *<query>* **<(** *<verb>* **)-** ***** | *<form>*

- *Walk - Multiple Light Edges*
  
  *<query>* **-( (** *<verb1>* **,** *<verb2>*  [ **,** *<verb3>* ...] **) )>** ***** | *<form>*
  
  *<query>* **<( (** *<verb1>* **,** *<verb2>*  [ **,** *<verb3>* ...] **) )-** ***** | *<form>*

- *Walk - Any Light Edge (Wildcard)*
  
  *<query>* **-(** ***** **)>** ***** | *<form>*
  
  *<query>* **<(** ***** **)-** ***** | *<form>*

**Examples:**

*Traverse the "refs" light edge from an article to the FQDNs "referenced" by the article:*


.. storm-pre:: [media:news="*" +(refs)> { inet:fqdn=woot.com } ] -(refs)> inet:fqdn
::

    <media:news> -(refs)> inet:fqdn


*Traverse the "refs" light edge from an article to all of the nodes "referenced" by the article:*


.. storm-pre:: media:news -(refs)> *
::

    <media:news> -(refs)> *


*Traverse the "hasip" light edge from an IPv4 address to the CIDR block(s) the IP is part of:*


.. storm-pre:: inet:ipv4 <(hasip)- inet:cidr4
::

    <inet:ipv4> <(hasip)- inet:cidr4


*Traverse the "hasip" and "ipwhois" light edges from an IPv4 address to any nodes linked via those light edges (i.e., typically the CIDR block(s) the IP is part of and the netblock registration record(s) for the IP):*


.. storm-pre:: inet:ipv4 <((hasip, ipwhois))- *
::

    <inet:ipv4> <((hasip, ipwhois))- *


*Traverse any / all light edges from an article to all nodes linked by any light edge:*


.. storm-pre:: media:news -(*)> *
::

    <media:news> -(*)> *


**Usage Notes:**

- The traversal syntax allows specification of a single verb, a list of verbs, or the "wildcard" / asterisk ( ``*`` ) to reference any / all light edge verbs that may be present.
- There are no light edges (i.e., specific light edge verbs) defined in a Cortex by default. Users can create and define their own according to their needs.
- The Storm :ref:`storm-model`, :ref:`storm-edges`, and :ref:`storm-lift-byverb` commands can be used to work with  light edges in a Cortex.

.. _join-light-edge:

Traverse (Walk) and Join Light Edges
------------------------------------

Much like the :ref:`walk-light-edge` operators, the traverse (walk) and join light edges operator (``-(<verb>)+>`` or ``<+(<verb>)-``) is used to traverse from a set of inbound nodes to the set of nodes they are linked to by the specified light edge(s). Unlike :ref:`walk-light-edge`, the inbound nodes are retained and combined with the results of the pivot.

**Syntax:**

- *Walk and Join - Single Light Edge*

  *<query>* **-(** *<verb>* **)+>** ***** | *<form>*
  
  *<query>* **<+(** *<verb>* **)-** ***** | *<form>*

- *Walk and Join - Multiple Light Edges*

  *<query>* **-( (** *<verb1>* **,** *<verb2>*  [ **,** *<verb3>* ...] **) )+>** ***** | *<form>*
  
  *<query>* **<+( (** *<verb1>* **,** *<verb2>*  [ **,** *<verb3>* ...] **) )-** ***** | *<form>*

- *Walk and Join - Any Light Edge*

  *<query>* **-(** ***** **)+>** ***** | *<form>*
  
  *<query>* **<+(** ***** **)-** ***** | *<form>*

**Examples:**

*Traverse the "refs" light edge from an article and join the article with the FQDNs "referenced" by the article:*

.. storm-pre:: [media:news="*" +(refs)> { inet:fqdn=woot.com } ] -(refs)+> inet:fqdn
::

   <media:news> -(refs)+> inet:fqdn

*Join an article with any/all the nodes referenced by the article:*

.. storm-pre::  media:news -(refs)+> *
::

   <media:news> -(refs)+> *

*Traverse the "hasip" light edge from an IPv4 address to the CIDR block(s) the IP is part of and join the two sets together:*

.. storm-pre:: inet:ipv4 <+(hasip)- inet:cidr4
::

   <inet:ipv4> <+(hasip)- inet:cidr4

*Join a set of IPv4 address with the set of any nodes linked to those IPv4 addresses via the "hasip" or "ipwhois" light edges:*

.. storm-pre:: inet:ipv4 <+((hasip, ipwhois))- inet:cidr4
::

    <inet:ipv4> <+((hasip, ipwhois))- *

*Traverse and join any/all light edges from an article to all nodes linked by any light edge:*

.. storm-pre:: media:news -(*)+> *
::

   <media:news> -(*)+> *

.. _pivot-out-and-walk:

Pivot Out and Walk
------------------

The pivot out and walk (traverse) light edges operator ( ``--> *`` ) combines a wildcard pivot out ("refs out") operation ( ``-> *`` ) with a wildcard walk light edges operation ( ``-(*)>`` ).

**Syntax:**

*<query>* **\-\-> ***

**Examples:**

*Pivot from an IP netblock registration record to all nodes referenced by the record's secondary properties and all nodes linked to the record by light edges:*


.. storm-pre:: [inet:whois:iprec="*" :net4:min=89.249.65.0] --> *
::

    <inet:whois:iprec> --> *


**Usage Notes:**

- The pivot out and walk operator can only be used with a wildcard ( ``*`` ); it is not possible to specify a particular form as the target of the operation. A filter operation can be used to refine the results of the pivot and walk operation if necessary.

- The pivot and walk operators (pivot out and walk / pivot in and walk) are useful for "exploring" data in a Cortex as they will return all the nodes "next to" the working set of nodes (subject to :ref:`gloss-type-aware`) without requiring the user to have specific knowledge of the data model.
- The Storm :ref:`storm-tee` command can be used to perform concurrent pivot in and walk / pivot out and walk operations on an inbound set of nodes:
  
.. storm-pre:: inet:dns:a inet:fqdn | tee { --> * } { <-- * }
::
  
  <query> | tee { --> * } { <-- * }

.. _pivot-out-and-join:

Pivot Out and Join
------------------

The pivot out and join operator (``--+>``) is similar to the :ref:`pivot-out-and-walk` operator, but joins the results with the inbound set of nodes. That is, the inbound nodes are retained and combined with the results of the edge pivot.

**Syntax:**

*<query>* **\-\-+> ***

**Example:**

*Join any/all media:news with all nodes linked by any light edge:*

.. storm-pre:: media:news --+> *
::

   <media:news> --+> *

**Usage Notes:**

- Much like the pivot out and walk operator, the pivot out and join operator can only be used with a wildcard ( ``*`` ); it is not possible to specify a particular form as the target of the operation. A filter operation can be used to refine the results of the pivot and walk operation if necessary.

.. _pivot-in-and-walk:

Pivot In and Walk
-----------------

The pivot in and walk (traverse) light edges operator ( ``<-- *`` ) combines a wildcard pivot in ("refs in") operation ( ``<- *`` ) with a wildcard walk light edges operation ( ``<(*)-`` ).

**Syntax:**

*<query>* **<\-\- ***

**Examples:**

*Pivot from a set of IP addresses to all nodes that reference the IPs and all nodes linked to the IPs by light edges:*


.. storm-pre:: inet:ipv4 <-- *
::

    <inet:ipv4> <-- *


**Usage Notes:**

- The pivot in and walk operator can only be used with a wildcard ( ``*`` ); it is not possible to specify a particular form as the target of the operation. A filter operation can be used to refine the results of the pivot and walk operation if necessary.

- The pivot and walk operators (pivot out and walk / pivot in and walk) are useful for "exploring" data in a Cortex as they will return all the nodes "next to" the working set of nodes (subject to :ref:`gloss-type-aware`) without requiring the user to have specific knowledge of the data model.

- The Storm :ref:`storm-tee` command can be used to perform concurrent pivot in and walk / pivot out and walk operations on an inbound set of nodes:
  
.. storm-pre:: inet:fqdn | tee { --> * } { <-- * }
::
  
  <query> | tee { --> * } { <-- * }


.. _pivot-in-and-join:

Pivot In and Join
-----------------

The pivot in and join operator (``<+--``) is similar to the :ref:`pivot-in-and-walk` operator, but joins the results with the inbound set of nodes. That is, the inbound nodes are retained and combined with the results of the edge pivot.

**Syntax:**

*<query>* **<+\-\- ***

**Examples:**

*Join a set of IP addresses with all the nodes that reference the IPs and all nodes linked to the IPs by light edges:*

.. storm-pre:: inet:ipv4 <+-- *
::

   <inet:ipv4> <+-- *

**Usage Notes:**

- Much like the pivot in and walk operator, the pivot in and join operator can only be used with a wildcard ( ``*`` ); it is not possible to specify a particular form as the target of the operation. A filter operation can be used to refine the results of the pivot and walk operation if necessary.








* * * * * * * *


.. _raw-pivot-syntax:

Raw Pivot Syntax
----------------

For certain edge cases, standard Storm pivot syntax (explicit or implicit) is insufficient. In these instances raw pivot syntax acts as a "get out of jail free" card to perform specialized pivot operations. These include:

- primary-to-primary property pivots;
- pivots where the value of the target property (primary or secondary) is computed from the input node(s);
- extramodel pivots.

In raw pivot syntax, the target of the pivot is specified as a Storm query enclosed in curly braces. Raw pivots often involve specifying a variable derived from the inbound node(s) and performing the raw pivot using the variable, though this is not technically required. (See :ref:`storm-adv-vars` for a discussion of using variables in Storm).

For some raw pivot syntax use cases, you can compose an equivalent Storm query using lift and filter operations. For example:

 - lift a set of nodes;
 - define a variable based on those nodes;
 - lift a second set of nodes using the variable;
 - filter out the original nodes you lifted, thus leaving only the second set of lifted nodes.
 
However, executing this type of query using raw pivot syntax is slightly more efficient; the Storm query within the raw pivot's curly braces may still be a lift operation, but performing it inside a raw pivot means you do not have to explicitly drop (filter out) your original nodes. (As with a regular pivot, the inbound nodes are consumed by the pivot operation itself, eliminating the need for the filter.)

As always, these efficiencies may be trivial for smaller queries but can be significant for larger queries.

**Syntax:**

*<query>* **->** **{** *<query>* **}**

**Examples:**

- Pivot from a string (``it:dev:str``) representing an FQDN to the ``inet:fqdn`` node for that FQDN (i.e., pivot between two primary properties of different types).

**Standard syntax (no raw pivot, lift / filter only):**


.. storm-pre:: [it:dev:str="woot.com"] $fqdn=$node.value() inet:fqdn=$fqdn -it:dev:str
::

    <it:dev:str> $fqdn=$node.value() inet:fqdn=$fqdn -it:dev:str


**Raw pivot syntax:**


.. storm-pre:: it:dev:str $fqdn=$node.value() -> { inet:fqdn=$fqdn }
::

    <it:dev:str> $fqdn=$node.value() -> { inet:fqdn=$fqdn }

.. _Data Model Explorer: https://synapse.docs.vertex.link/projects/optic/en/latest/user_interface/userguides/get_help.html#using-data-model-explorer
.. _Explore button: https://synapse.docs.vertex.link/projects/optic/en/latest/user_interface/userguides/quick_tour.html#explore-button-breadcrumbs
.. _edge nodes: https://synapse.docs.vertex.link/en/latest/synapse/userguides/data_model.html#edge-digraph-form
.. _types: https://synapse.docs.vertex.link/en/latest/synapse/userguides/data_model.html#data-type
.. _consume: https://synapse.docs.vertex.link/en/latest/synapse/userguides/storm_ref_intro.html#node-consumption
