.. highlight:: none

.. storm-cortex:: default
.. storm-pre:: $propinfo = ({"doc": "The VirusTotal reputation score."}) $lib.model.ext.addFormProp(file:bytes, _virustotal:reputation, (int, ({})), $propinfo)
.. storm-pre:: $tagpropinfo = ({"doc": "A risk tagprop."}) $lib.model.ext.addTagProp(risk, (int, ({})), $tagpropinfo)


.. _storm-ref-lift:

Storm Reference - Lifting
=========================

Lift operations retrieve a set of nodes based on the specified criteria. While all lift operations are retrieval
operations, they can be broken down into "types" of lifts based on the criteria, comparison operator, or special
handler used:

- `Lift by Form`_
- `Lift by Property`_
- `Lift by Property Value - Standard Comparison Operators`_
- `Lift by Property Value - Extended Comparison Operators`_
- `Tag Lifts`_

In addition, the specialized "reverse" keyword and the "try" operator can each be used with lift operations
to modify their behavior:

- `"reverse" Keyword`_
- `"Try" Operator`_

.. TIP::
  
  When performing lift operations, you can specify the name of an :ref:`interface` to represent all forms that
  inherit that interface. See the sections below for details and examples.

See :ref:`storm-ref-syntax` for an explanation of the syntax format used below.

See :ref:`storm-ref-type-specific` for details on special syntax or handling for specific data types.

.. _lift-form:

Lift by Form
------------

"Lift by form" operations return **all** nodes of that form in Synapse. The wildcard (asterisk) character ( ``*`` )
can be used to lift all nodes of all forms that match a partial form name / namespace.

If a form inherits an :ref:`interface`, you can specify the interface name to lift all nodes of all forms that
inherit the interface.

.. TIP::
  
  In a production instance of Synapse, lifting **all** nodes of a commonly used form (e.g., ``inet:fqdn`` or
  ``inet:ipv4``) or lifting by an interface that is inherited by numerous forms (e.g. ``it:host:activity``)
  may return thousands or tens of thousands of nodes. Lifting by form or interface can be used with the Storm
  :ref:`storm-limit` command to return only a specified number of nodes (for example, to view a sample of
  available data).


.. _lift-form-name:

Lift by Form Name
+++++++++++++++++

A "lift by form name" operation returns all nodes for the specified :ref:`data-form`. This type of lift
requires the name of the form whose nodes you want to lift.

**Syntax:**

*<form>*

**Examples:**

*Lift all FQDN (inet:fqdn) nodes:*

.. storm-pre:: [ inet:fqdn=woot.com inet:fqdn=vertex.link inet:fqdn=google.com ]
.. storm-pre:: inet:fqdn
::
  
  inet:fqdn

*Lift all nodes representing articles (media:news nodes):*

.. storm-pre:: [ (media:news=* :publisher:name=eset :published=2016/10/20 :title='dissection of sednit espionage group') (media:news=* :publisher:name='trend micro' :published=2023/09/18 :title='earth lusca employs new linux backdoor, uses cobalt strike for lateral movement') ]
.. storm-pre:: media:news
::
  
  media:news

.. _lift-form-wildcard:

Lift by Form Name - Wildcard
++++++++++++++++++++++++++++

You can use the wildcard (asterisk) character ( ``*`` ) to specify all forms that match a partial form name.
Use of the wildcard is not limited to form namespace boundaries.

.. NOTE::
  
  The wildcard can only be used at the end of the partial match. It cannot be used at the beginning or in
  the middle of the form name. For example, both of the following are **invalid**:
  
  ``*:header``
  
  ``it:exec:*:del``
  
  In addition, use of the wildcard does not extetnd to partial matching of property names. For example, the
  following is **invalid**:
  
  ``file:bytes:mime:pe:*``

**Syntax:**

*<partial_form_name>* *****

**Examples:**

*Lift all nodes in the MITRE ATT&CK form namespace (e.g., it:mitre:attack:group, it:mitre:attack:technique, etc.):*

.. storm-pre:: [ it:mitre:attack:technique=T1566 it:mitre:attack:group=G0004 it:mitre:attack:software=S0366 ]
.. storm-pre:: it:mitre:attack:*
::
  
  it:mitre:attack:*

*Lift all DNS A (inet:dns:a) and DNS AAAA (inet:dns:aaaa) nodes:*

.. storm-pre:: [ inet:dns:a=(woot.com,1.1.1.1) inet:dns:aaaa=(woot.com,2600:1419:9c00:283::356e)  ]
.. storm-pre:: inet:dns:a*
::
  
  inet:dns:a*

.. _lift-form-interface:

Lift Form by Interface
++++++++++++++++++++++

You can use the name of an :ref:`interface` to lift all forms that inherit that interface.

.. NOTE::
  
  When lifting by interface, you cannot use the wildcard ( ``*`` ) character to match multiple interface names.
  Synapse will interpret use of the wildcard as an attempt to match multiple form names.

**Syntax:**

*<interface>*

**Examples:**

*Lift all host activity nodes (all nodes of all forms that inherit it:host:activity interface):*

.. storm-pre:: [ it:exec:file:add=* it:exec:reg:set=* it:exec:url=*  ]
.. storm-pre:: it:host:activity
::
  
  it:host:activity

*Lift all taxonomy nodes (all nodes of all forms that inherit the meta:taxonomy interface):*

.. storm-pre:: [ ou:camptype=io.disinformation risk:tool:software:taxonomy=backdoor ]
.. storm-pre:: meta:taxonomy

::
  
  meta:taxonomy


.. _lift-prop:

Lift by Property
----------------

A "lift by property" operation returns all nodes that **have** the specified :ref:`data-props` set, regardless of the property value.
In most cases, this type of lift requires the full name (i.e., the combined form and property name) of the property you want to use
to lift the nodes. When lifting by universal property, the form name is only needed if you want to lift nodes of a specific form that 
have the universal property.

.. _lift-prop-second:

Lift by Secondary Property
++++++++++++++++++++++++++

**Syntax:**

*<form>* **:** *<prop>*

**Examples:**

*Lift all IPv4 (inet:ipv4) nodes that have a location (:loc property):*

.. storm-pre:: [ (inet:ipv4=41.164.23.42 :loc=za.wc.worcester) (inet:ipv4=155.254.9.3 :loc='us.mt.three forks') (inet:ipv4=102.64.66.222 :loc='tz.02.dar es salaam') ]
.. storm-pre:: inet:ipv4:loc
::
  
  inet:ipv4:loc

*Lift all file (file:bytes) nodes that have a PDB path (:mime:pe:pdbpath property):*

.. storm-pre:: [ (file:bytes=sha256:c2135ccc8a46d4bda7b6052df92035a134b83b8f78b8ba078621d537db021bc7 :size=70144 :mime='application/vnd.microsoft.portable-executable' :mime:pe:compiled='2011/04/26 09:08:59' :mime:pe:pdbpath='c:/documents and settings/k/桌面/etenfalcon（修改）/release/servicedll.pdb') (file:bytes=sha256:2a3da413f9f0554148469ea715f2776ab40e86925fb68cc6279ffc00f4f410dd :size=334347 :mime='application/vnd.microsoft.portable-executable' :mime:pe:compiled='2023/05/29 16:03:32' :mime:pe:pdbpath='d:/projects/winrar/sfx/build/sfxrar32/release/sfxrar.pdb') ]
.. storm-pre:: file:bytes:mime:pe:pdbpath
::
  
  file:bytes:mime:pe:pdbpath


.. _lift-prop-interface:

Lift by Interface Property
++++++++++++++++++++++++++

If a form inherits an :ref:`interface`, you can lift all nodes of all forms that have an interface-derived property
by specifying the full name of the interface and its property.

**Syntax:**

*<interface>* **:** *<prop>*

**Examples:**

*Lift all host activity nodes (all nodes of all forms that inherit the it:host:activity interface) that have a :time property:*

.. storm-pre:: [ (it:exec:file:add=* :time=now) (it:exec:reg:set=* :time=2024/01/01) (it:exec:url=* :time=2023/12/18) ] 
.. storm-pre:: it:host:activity:time

::
  
  it:host:activity:time

*Lift all protocol request nodes (all nodes of all forms that inherit the inet:proto:request interface) that have an associated network flow (i.e., that have a :flow property):*

.. storm-pre:: [ (inet:http:request=* :flow={ [ inet:flow=* ] } ) ]
.. storm-pre:: inet:proto:request:flow

::
  
  inet:proto:request:flow


.. _lift-prop-univ:

Lift by Universal Property
++++++++++++++++++++++++++

**Syntax:**

[ *<form>* ] **.** *<prop>*

A :ref:`gloss-universal-prop` applies to and can be used by any node. Synapse uses two universal properties:

 - ``.created``, a time (date/time) value representing when a node was created in Synapse.
 - ``.seen``, an interval (pair of date/time values) that can be used optionally to represent "when" the
   object represented by a node existed or was observed.

**Examples:**

*Lift all email (inet:email) nodes with a .seen property:*

.. storm-pre:: [ (inet:email=dns@jomax.net .seen=(2016/12/10 08:56:23, 2023/10/20 14:57:53)) (inet:email=bolekrejci@centrum.cz .seen=(2017/10/12 00:00:00, 2017/10/12 00:00:00.001))]
.. storm-pre:: inet:email.seen
::
  
  inet:email.seen

*Lift all nodes with a .seen property:*

.. storm-pre:: .seen
::
  
  .seen

*Lift all nodes in Synapse:*

.. storm-pre:: .created
::
  
  .created

.. TIP::
  
  Because the ``.created`` property is automatically set for every node when it is first added to Synapse,
  lifting by the ``.created`` property effectively lifts every node in Synapse (technically, every node in the
  current :ref:`gloss-view`).


.. _lift-prop-extend:

Lift by Extended Property
+++++++++++++++++++++++++

**Syntax:**

*<form>* **:_** *<prop>*

An :ref:`gloss-extended-prop` is a custom property that has been added to the Synapse data model to capture specialized data
for a given form. To avoid potential namespace collisions with standard properties, extended property names must begin with
an underscore. In addition, we recommend using the name of the source or vendor of the property data as the first property
namespace element.

**Examples:**

*Lift all of the files (file:bytes) nodes that have a VirusTotal "reputation" extended property (:_virustotal:reputation property):*

.. storm-pre:: [ file:bytes=sha256:87b7e57140e790b6602c461472ddc07abf66d07a3f534cdf293d4b73922406fe :size=188928 :mime='application/vnd.microsoft.portable-executable' :_virustotal:reputation=-427 ]
.. storm-pre:: file:bytes:_virustotal:reputation
::
  
  file:bytes:_virustotal:reputation

.. NOTE::
  
  The ``:_virustotal:reputation`` extended property is added to the Synapse data model by the `Synapse-VirusTotal`_ Power-Up.


.. _lift-prop-standard:

Lift by Property Value - Standard Comparison Operators
------------------------------------------------------

A "lift by property value" operation returns the node(s) whose property matches the specified value. This type of lift requires:

- the form name or full property name (i.e., the combined form and property name) that you will use to lift the node(s);
- a :ref:`gloss-comp-operator` to specify how the property value should be evaluated; and
- the property value.

A "lift by property value" can be performed using primary, secondary, universal, or extended properties.

.. TIP::
  
  When lifting by a secondary property value, you can specify either a form name or an :ref:`interface` name.

In Synapse, we define **standard comparison operators** as the following set of operators:

- equal to ( ``=`` )
- less than ( ``<`` )
- greater than ( ``>`` )
- less than or equal to ( ``<=`` )
- greater than or equal to ( ``>=`` )

The :ref:`lift-try` ( ``?=`` ) can optionally be used in place of the standard equal to operator ( ``=`` ).
Use of the try operator is generally not required for interactive Storm queries, but may be useful for more
complex Storm queries (such as automation or Storm-based ingest queries).

The most commonly used standard comparison operator is the equal to ( ``=`` ) operator. Comparison operators that
expect a **quantity** (i.e., the inequality symbools ``<``, ``>``, ``<=``, and ``>=``) can only be used with
properties whose type supports the comparison (e.g., integers, dates/times, etc.)

.. TIP::
  
  IPv4 addresses (``inet:ipv4`` nodes) are stored as their decimal integer equivalents (even though they are
  displayed in familiar "dotted decimal" format), and can be used with the various inequality operators:
  
  ::
    
    inet:ipv4 < 192.168.0.0
  
  IPv6 addresses (``inet:ipv6`` nodes) are stored as strings due to limitations with msgpack, but can be
  used with the various inequality operators if enclosed in single or double quotes:
  
  ::
    
    inet:ipv6 >= '::0'
  

.. _lift-prop-std-primary:

Lift by Primary Property Value
++++++++++++++++++++++++++++++

**Syntax:**

*<form>* *<operator>* *<valu>*

**Examples:**

*Lift the FQDN vertex.link:*

.. storm-pre:: [ inet:fqdn=vertex.link ]
.. storm-pre:: inet:fqdn = vertex.link
::
  
  inet:fqdn = vertex.link

*Lift the DNS A record showing that domain woot.com resolved to IP 1.2.3.4:*

.. storm-pre:: [inet:dns:a = (woot.com, 1.2.3.4 )]
.. storm-pre:: inet:dns:a = (woot.com, 1.2.3.4)
::
  
  inet:dns:a = (woot.com, 1.2.3.4)

*Lift the organization node whose primary property is the specified guid (globally unique identifier):*

.. storm-pre:: [ ou:org=4b0c2c5671874922ce001d69215d032f :name="the vertex project" :names=(vertex,) ]
.. storm-pre:: ou:org = 4b0c2c5671874922ce001d69215d032f
::
  
  ou:org = 4b0c2c5671874922ce001d69215d032f

*Lift the Autonomous System (inet:asn) nodes whose AS number is less than 50:*

.. storm-pre:: [ ( inet:asn=49 :name='us-national-institute-of-standards-and-technology' ) ( inet:asn=32 :name=stanford ) ( inet:asn=71 :name=hp-internet-as ) ]
.. storm-pre:: inet:asn < 50
::
  
  inet:asn < 50


.. _lift-prop-std-secondary:

Lift by Secondary Property Value
++++++++++++++++++++++++++++++++

**Syntax:**

*<form>* **:** *<prop>* *<operator>* *<pval>*

**Examples:**

*Lift the organization node with "vertex" in the names property:*

.. storm-pre:: [ ou:org=4b0c2c5671874922ce001d69215d032f :name="the vertex project" :names=(vertex,) ]
.. storm-pre:: ou:org:names *[ = vertex ]
::
  
  ou:org:names *[ = vertex ]

*Lift all DNS A records for the FQDN "hugesoft.org":*

.. storm-pre:: [ ( inet:dns:a=(hugesoft.org, 69.195.129.72) .seen=(2014/03/22 00:00:00, 2014/03/22 00:00:00.001) ) (inet:dns:a=(hugesoft.org, 103.224.212.219) .seen=(2023/10/04 22:59:10.973, 2023/10/04 22:59:10.974) ) ]
.. storm-pre:: inet:dns:a:fqdn = hugesoft.org
::
  
  inet:dns:a:fqdn = hugesoft.org

*Lift all the files with a PE compiled time of 1992-06-19 22:22:17:*

.. storm-pre:: [file:bytes=sha256:2d168c4020ba0136cd8808934c29bf72cbd85db52f5686ccf84218505ba5552e :mime:pe:compiled="1992/06/19 22:22:17.000"]
.. storm-pre:: file:bytes:mime:pe:compiled = '1992/06/19 22:22:17'
::
  
  file:bytes:mime:pe:compiled = '1992/06/19 22:22:17'

*Lift all the files with a PE compiled time that falls within the year 2019:*

.. storm-pre:: [ ( file:bytes=sha256:9f9d96e99cef99cbfe8d02899919a7f7220f2273bb36a084642f492dd3e473da :mime:pe:compiled='2019/03/26 11:14:00.000' ) ( file:bytes=sha256:bd422f912affcf6d0830c13834251634c8b55b5a161c1084deae1f9b5d6830ce :mime:pe:compiled='2019/06/12 22:02:16.000' ) ]
.. storm-pre:: file:bytes:mime:pe:compiled = 2019*
::
  
  file:bytes:mime:pe:compiled = 2019*


*Lift files whose size is less than 1MB:*

.. storm-pre:: [ file:bytes=sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 :size=16384 ]
.. storm-pre:: file:bytes:size < 1000000
::
  
  file:bytes:size < 1000000

*Lift domain WHOIS records for FQDNs registered (created) after January 1, 2023:*

.. storm-pre:: [ inet:whois:rec=(financialtimes365.com, '2023/01/01 21:46:23') :created='2023/01/01 19:31:29' ]
.. storm-pre:: inet:whois:rec:created > 2023/01/01
::
  
  inet:whois:rec:created > 2023/01/01

*Lift PE files that were compiled during the year 2012 or earlier:*

.. storm-pre:: [ file:bytes=sha256:a142625512e5372a1728595be19dbee23eea50524b4827cb64ed5aaeaaa0270b :mime:pe:compiled='2010/01/07 02:53:12.000']
.. storm-pre:: file:bytes:mime:pe:compiled <= 2012*
::
  
  file:bytes:mime:pe:compiled <= 2012*

*Lift contact data (ps:contact nodes) for individuals where the date of birth (:dob property) is January 1, 1990 or later:*

.. storm-pre:: [ (ps:contact='*' :name='pavel evgenyevich prigozhin' :dob=1998/06/18) ]
.. storm-pre:: ps:contact:dob >= 1990/01/01
::
  
  ps:contact:dob >= 1990/01/01

**Usage Notes:**

- When lifting nodes by secondary property value where the value is a time (date / time), you do not need to use
  full ``YYYY/MM/DD hh:mm:ss.mmm`` syntax. Synapse allows the use of both lower resolution values (e.g., ``YYYY/MM/DD``)
  and wildcard values (e.g., ``YYYY/MM*``). In particular, wildcard syntax can be used to specify any values that match
  the wildcard expression. See the type-specific documentation for :ref:`type-time` types for a detailed discussion of
  these behaviors.

.. _lift-prop-std-interface:

Lift by Interface Property Value
++++++++++++++++++++++++++++++++

If a form inherits an :ref:`interface`, you can lift all nodes of all forms with a specific interface-derived property value
by using the name of the interface.

.. TIP::
  
  Synapse returns results in lexical order (sorted, ascending to descending) based on the way the queried property is
  indexed. When using an interface to lift by secondary property, Synapse performs the lifts for each form in parallel,
  and yields the results in order. See the :ref:`lift-reverse` section for additional discussion of this concept.


**Syntax:**

*<interface>* **:** *<prop>* *<operator>* *<pval>*

**Examples:**

*Lift all host activity nodes (all nodes of all forms that inherit the it:host:activity interface) associated with the host name "ron-pc":*

.. storm-pre:: [ ( it:host=* :name=ron-pc ) ( it:exec:file:add=* :host={ it:host:name=ron-pc } ) ( it:exec:url=* :host={ it:host:name=ron-pc } ) ]
.. storm-pre:: it:host:activity:host = { it:host:name=ron-pc } 

::
  
  it:host:activity:host = { it:host:name=ron-pc }

.. TIP::
  
  The ``:host`` property is a guid value (the guid of an ``it:host`` node). The example above uses a :ref:`gloss-subquery`
  to specify the host guid value using another Storm query (i.e., "The guid of the it:host node whose :name is ron-pc")
  insetad of specifying the guid value directly. Subqueries are a useful way to work with guid forms by referencing
  nodes using more human-friendly secondary property values. See :ref:`subquery-ref-nodes` for a more detailed discussion.

*Lift all host activity nodes (all nodes of all forms that inherit the it:host:activity interface) that were observed on or after February 1, 2024:*

.. storm-pre:: [ (it:exec:file:write=* :time=now) (it:exec:reg:del=* :time=2023/06/23) (it:exec:url=* :time=2024/02/04) ]
.. storm-pre:: it:host:activity:time >= 2024/02/01

::
  
  it:host:activity:time >= 2024/02/01


.. _lift-prop-std-universal:

Lift by Universal Property Value
++++++++++++++++++++++++++++++++

Synapse has two built-in universal properties:

- ``.created`` (a time) which represents the date and time a node was created in Synapse; and
- ``.seen`` (an interval), a pair of date / time values that can optionally be used to represent
  when a node existed or was observed.

Times (date / time values) are stored as integers (epoch milliseconds) in Synapse and can be lifted using any
standard comparison operator.

Because intervals are a pair of date / time values, they can only be lifted using the equal to ( ``=`` )
standard comparison operator to specify an **exact** match for the interval values.

The :ref:`lift-interval` and :ref:`lift-range` extended comparison operators provide additional flexibility
when lifting by times and intervals.

See also the :ref:`type-time` and :ref:`type-ival` sections of the :ref:`storm-ref-type-specific` guide for
additional details on working with times and intervals in Synapse.

**Syntax:**

[ *<form>* ] **.** *<prop>* *<operator>* *<pval>*

**Examples:**

*Lift all nodes created after January 1, 2024:*

.. storm-pre:: .created >= 2024/01/01
::
  
  .created >= 2024/01/01

*Lift all DNS A records (inet:dns:a nodes) whose .seen property exactly matches the specified interval:*

.. storm-pre:: [ inet:dns:a=(woot.com,1.2.3.4) .seen=('2023/11/19 12:11:42.041', '2023/12/27 08:05:47.776') ] inet:dns:a.seen = ('2023/11/19 12:11:42.041', '2023/12/27 08:05:47.776')
::
  
  inet:dns:a.seen = ('2023/11/19 12:11:42.041', '2023/12/27 08:05:47.776')


.. _lift-prop-std-extended:

Lift by Extended Property Value
+++++++++++++++++++++++++++++++

When lifting by extended property value, you can use any standard comparison operator supported by the
property's type. For example, if the extended property is a string, only the equal to ( ``=`` ) standard
operator is supported. If the extended property is an integer, any of the standard operators can be used.

**Syntax:**

*<form>* **:_** *<prop>* *<operator>* *<pval>*

**Example:**

*Lift all files with a VirusTotal "reputation" score less than -50:*

.. storm-pre:: [ file:bytes=sha256:87b7e57140e790b6602c461472ddc07abf66d07a3f534cdf293d4b73922406fe :size=188928 :mime='application/vnd.microsoft.portable-executable' :_virustotal:reputation=-427 ]
.. storm-pre:: file:bytes:_virustotal:reputation < -50
::
  
  file:bytes:_virustotal:reputation < -50


.. _lift-prop-extended:

Lift by Property Value - Extended Comparison Operators
------------------------------------------------------

Storm supports a set of extended comparison operators (comparators) for specialized lift operations. 

- `Lift by Regular Expression (~=)`_
- `Lift by Prefix (^=)`_
- `Lift by Time or Interval (@=)`_
- `Lift by Range (*range=)`_
- `Lift by Set Membership (*in=)`_
- `Lift by Proximity (*near=)`_
- `Lift by (Arrays) (*[ ])`_

Just as with standard comparison operators, lifting by property value with extended comparison operators
requires:

- the form name or full property name (i.e., the combined form and property name) that you will use to lift
  the node(s);
- a :ref:`gloss-comp-operator` to specify how the property value should be evaluated; and
- the property value.

Each extended comparison operator can be used with any kind of property (primary, secondary, universal, or
extended) whose :ref:`gloss-type` is appropriate for the comparison used.

.. TIP::
  
  When lifting by a secondary property value, you can specify either a form name or an :ref:`interface` name.
  
  Synapse returns results in lexical order (sorted, ascending to descending) based on the way the queried property is
  indexed. When using an interface to lift by secondary property, Synapse performs the lifts for each form in parallel,
  and yields the results in order. See the :ref:`lift-reverse` section for additional discussion of this concept.


.. _lift-regex:

Lift by Regular Expression (~=)
+++++++++++++++++++++++++++++++

The extended comparator ``~=`` is used to lift nodes based on PCRE-compatible regular expressions.

.. TIP::
  
  `Lift by Prefix (^=)`_ can be used to match the beginning of string-based properties. It is much
  faster than lifting by regex for start-of-string matches and should be used instead of a regular
  expression lift where possible.

**Syntax:**

*<form>* [ **:** | **.** | **:_** *<prop>* ] **~=** *<regex>*

*<interface>* **:** *<prop>* **~=** *<regex>*

**Examples:**

*Lift all files with PDB paths containing the string "rouji":*


.. storm-pre:: [file:bytes=sha256:cebb47280cd00814e1c085c5bc3fbac0e9f91168999091f199a1b1d209edd814 :mime:pe:pdbpath="d:/my documents/visual studio projects/rouji/svcmain.pdb"]
.. storm-pre:: file:bytes:mime:pe:pdbpath ~= rouji
::
  
  file:bytes:mime:pe:pdbpath ~= rouji

*Lift all organizations whose name contains a string that starts with "v", followed by 0 or more characters, followed by "x":*

.. storm-pre:: [ (ou:org=4b0c2c5671874922ce001d69215d032f :name="the vertex project" :names=(vertex,)) (ou:org=ad8de4b5da0fccb2caadb0d425e35847 :name=vxunderground) ]
.. storm-pre:: ou:org:name ~= '^v.*x'
::
  
  ou:org:name ~= '^v.*x'


.. _lift-prefix:

Lift by Prefix (^=)
+++++++++++++++++++

Synapse performs prefix indexing on string and string-derived types, which optimizes lifting nodes whose *<valu>*
or *<pval>* starts with a given prefix (substring). The extended comparator ``^=`` is used to lift nodes by prefix.

.. NOTE::
  
  Extended string types that support dotted notation (such as the :ref:`type-loc` or :ref:`type-syn-tag` types)
  have custom behaviors with respect to lifting and filtering by prefix.
  
  :ref:`type-inet-fqdn` nodes are indexed in reverse string order so cannot be lifted using the prefix extended
  operator. However, reverse indexing allows wildcard ( ``*`` ) matching of the beginning of any FQDN string.
  
  See the relevant sections in the :ref:`storm-ref-type-specific` guide for details.

**Syntax:**

*<form>* [  **:** | **.** | **:_** *<prop>* ] **^=** *<prefix>*

*<interface>* **:** *<prop>* **^=** *<prefix>*

**Examples:**

*Lift all email addresses that start with "abuse":*

.. storm-pre:: [ inet:email=abuse@1and1.com inet:email=abuse.tor-exit@posteo.org ]
.. storm-pre:: inet:email ^= abuse
::
  
  inet:email ^= abuse

*Lift all organizations whose name starts with "ministry":*

.. storm-pre:: [ (ou:org=a7f31ce9809e103ddedf36c1e1e91249 :name='ministry for foreign affairs of finland') (ou:org=1560dc4129405e18fd32f30b6f01fa1f :name='ministry of finance of ukraine') ]
.. storm-pre:: ou:org:name ^= ministry
::
  
  ou:org:name ^= ministry

*Lift all Microsoft Office metadata nodes (all nodes of all forms that inherit the file:mime:msoffice interface) whose :author name starts with "DESKTOP":*

.. storm-pre:: [ (file:mime:msdoc=* :author='DESKTOP-BCXJXDX') (file:mime:msppt=* :author='Ozzie') (file:mime:msxls=* :author='DESKTOP-KOCEDSI') ]
.. storm-pre:: file:mime:msoffice:author ^= DESKTOP

::
  
  file:mime:msoffice:author ^= DESKTOP

*Lift all tags (syn:tag) nodes in the "rep.alienvault" tree where the third tag element starts with the numeral "0":*

.. storm-pre:: [ syn:tag=rep.alienvault.0_day syn:tag=rep.alienvault.0ktapus ]
.. storm-pre:: syn:tag ^= rep.alienvault.0
::
  
  syn:tag ^= rep.alienvault.0

.. TIP::
  
  Even though tag elements are dot-separated, when lifting ``syn:tag`` nodes by prefix the prefix string is
  not constrained to dot boundaries. In other words, a prefix lift used with tags can match a partial tag
  element. The query above will match all of the following tags:
  
  - syn:tag=rep.alienvault.0_day
  - syn:tag=rep.alienvault.0_days
  - syn:tag=rep.alienvault.0day
  - syn:tag=rep.alienvault.0days
  - syn:tag=rep.alienvault.0ktapus


.. _lift-interval:

Lift by Time or Interval (@=)
+++++++++++++++++++++++++++++

Many forms include properties that are date / time values (*<ptype>* = *<time>*) or
time windows / intervals (*<ptype>* = *<ival>*). The time/interval extended comparator ``@=`` is
used to lift nodes based on comparisons among various combinations of times and intervals.

.. TIP::
  
  See :ref:`storm-ref-type-specific` for additional detail on the use and behavior of :ref:`type-time`
  and :ref:`type-ival` data types.


**Syntax:**

*<form>* **:** | **.** | **:_** *<prop>* **@=(** *<ival_min>* **,** *<ival_max>* **)**

*<form>* **:** | **.** | **:_** *<prop>* **@=** *<time>*

*<interface>* **:** *<prop>* **@=(** *<ival_min>* **,** *<ival_max>* **)**

*<interface>* **:** *<prop>* **@=** *<time>*


**Examples:**

*Lift all DNS A records whose .seen values fall between July 1, 2022 and August 1, 2022:*

.. storm-pre:: [ inet:dns:a=(easymathpath.com, 135.125.78.187) .seen=(2021/09/12 00:00:00, 2023/08/08 01:50:54.001) ]
.. storm-pre:: inet:dns:a.seen @= ( 2022/07/01, 2022/08/01 )
::
  
  inet:dns:a.seen @= ( 2022/07/01, 2022/08/01 )

*Lift all DNS requests that occurred on May 3, 2023 (between 05/03/2023 00:00:00 and 05/03/2023 23:59:59):*

.. storm-pre:: [ inet:dns:request="*" :time="2023/05/03 21:09:04.000" :query:name:fqdn=vertex.link ]
.. storm-pre:: inet:dns:request:time @= ( '2023/05/03 00:00:00', '2023/05/04 00:00:00' )
::
  
  inet:dns:request:time @= ( '2023/05/03 00:00:00', '2023/05/04 00:00:00' )

.. TIP:
  
  Because the ``inet:dns:request:time`` property is a single date / time value, the following query
  would also work:
  
  ``inet:dns:request:time = 2023/05/03*``


*Lift the WHOIS email nodes that were observed between July 1, 2023 and the present:*

.. storm-pre:: [ inet:whois:email=(tfxdccssl.net, abuse@dynadot.com) .seen=(2013/12/13 00:00:00, 2023/07/30 04:05:15.001) ]
.. storm-pre:: inet:whois:email.seen @= ( 2023/07/01, now )
::
  
  inet:whois:email.seen @= ( 2023/07/01, now )

*Lift the network flows that occurred within the past day:*

.. storm-pre:: [ inet:flow="*" :time=now ]
.. storm-pre:: inet:flow:time @= ( now, '-1 day' )
::
  
  inet:flow:time @= ( now, '-1 day' )

*Lift all host activity nodes (all nodes of all forms that inherit the it:host:activity interface) that occurred within the past three hours:*

.. storm-pre:: [ (it:exec:file:write=* :time=now) (it:exec:mutex=* :time=2024/01/15) ]
.. storm-pre:: it:host:activity:time @= (now, '-3 hours')

::
  
  it:host:activity:time @= (now, '-3 hours')

**Usage Notes:**

- When specifying an interval with the ``@=`` operator, the minimum value is included in the interval for
  comparison purposes but the maximum value is **not**. This is equivalent to "greater than or equal to
  *<min>* and less than *<max>*". This behavior differs from that of the ``*range=`` operator, which includes
  **both** the minimum and maximum.
- **Comparing intervals to intervals:** when using an interval with the ``@=`` operator to lift nodes based on
  an interval property, Synapse returns nodes whose interval value has **any** overlap with the specified
  interval. For example:

  - A lift interval of September 1, 2018 to October 1, 2018 ( 2018/09/01, 2018/10/01 ) will match nodes with any
    of the following intervals:
  
    - August 12, 2018 to September 6, 2018 ( 2018/08/12, 2018/09/06 ).
    - September 13, 2018 to September 17, 2018 ( 2018/09/13, 2018/09/17 ).
    - September 30, 2018 to November 5, 2018 ( 2018/09/30, 2018/11/05 ).

- **Comparing intervals to times:** When using an interval with the ``@=`` operator to lift nodes based on a time
  property, Synapse returns nodes whose time value falls within the specified interval.
- **Comparing times to times:** When using a time with the ``@=`` operator to lift nodes based on a time property,
  Synapse returns nodes whose timestamp is an **exact match** of the specified time. In other words, in this case
  the interval comparator ( ``@=`` ) behaves like the equal to comparator ( ``=`` ).
- When specifying date / time and interval values, Synapse allows the use of both lower resolution values (e.g., ``YYYY/MM/DD``),
  and wildcard values (e.g., ``YYYY/MM*``). Wildcard time syntax may provide a simpler and more intuitive means to specify
  some intervals. For example ``inet:whois:rec:asof=2018*`` is equivalent to ``inet:whois:rec:asof@=('2018/01/01', '2019/01/01')``.
- Time-based keywords (such as ``now``) and relative time syntax (expressions such as ``+-1 hour`` or ``-7 days``) can be used
  for interval values.

  See the type-specific documentation for :ref:`type-time` and :ref:`type-ival` types for a detailed discussion of these behaviors.


.. _lift-range:

Lift by Range (\*range=)
++++++++++++++++++++++++

The range extended comparator (``*range=``) supports lifting nodes whose *<form>* = *<valu>* or *<prop>* = *<pval>* fall
within a specified range of values. The comparator can be used with types such as integers and times.

.. NOTE::
  
  The ``*range=`` operator can be used to lift both ``inet:ipv4`` and ``inet:ipv6`` values (which are stored
  as decimal integers and strings, respectively). However, ranges of :ref:`type-inet-ipv4` and ``inet:ipv6``
  nodes can also be lifted directly by specifying the lower and upper addresses in the range using
  ``<min>-<max>`` format. For example:
  
  ``inet:ipv4 = 192.168.0.0-192.168.0.10``
  
  Because IPv6 nodes are stored as strings, the range must be enclosed in quotes:
  
  ``inet:ipv6 = "::0-ff::ff"``
  
  The ``*range=`` operator cannot be used to compare a time range with a property value that is an interval
  (``ival`` type). The interval ( ``@=`` ) operator should be used instead.


**Syntax:**

*<form>* [ **:** | **.** | **:_** *<prop>* ] ***range = (** *<range_min>* **,** *<range_max>* **)**

*<interface>* **:** *<prop>* ***range = (** *<range_min>* **,** *<range_max>* **)**

**Examples:**

*Lift all files whose size is between 1000 and 100000 bytes:*

.. storm-pre:: [file:bytes=sha256:00ecd10902d3a3c52035dfa0da027d4942494c75f59b6d6d6670564d85376c94 :size=2000]
.. storm-pre:: file:bytes:size *range= ( 1000, 100000 )
::
  
  file:bytes:size *range= ( 1000, 100000 )

*Lift all files whose VirusTotal "reputation" score is between -20 and 20:*

.. storm-pre:: [ ( file:bytes=sha256:d231f3b6d6e4c56cb7f149cbc0178f7b80448c24f14dced5a864015512b0ba1f :_virustotal:reputation=-16 ) ( file:bytes=sha256:d0e526a19497117a854f1ac9a9347f7621709afc3548c2e6a46b19e833578eac :_virustotal:reputation=8 ) ]
.. storm-pre:: file:bytes:_virustotal:reputation *range= ( -20, 20 )
::
  
  file:bytes:_virustotal:reputation *range= ( -20, 20 )

*Lift all domain WHOIS records that were captured / retrieved between November 29, 2013 and June 14, 2016:*

.. storm-pre:: [ inet:whois:rec=( marsbrother.com, 2013/12/02 00:00:00.000 ) ]
.. storm-pre:: inet:whois:rec:asof *range= ( 2013/11/29, 2016/06/14 )
::
  
  inet:whois:rec:asof *range= ( 2013/11/29, 2016/06/14 )

*Lift all DNS requests made within one day of December 1, 2021:*

.. storm-pre:: [ inet:dns:request="*" :time="2021/11/30 21:09:04.000"]
.. storm-pre:: inet:dns:request:time *range= ( 2021/12/01, '+-1 day' )
::
  
  inet:dns:request:time *range= ( 2021/12/01, '+-1 day' )


**Usage Notes:**

- When specifying a range, **both** the minimum and maximum values are included in the range. This is the
  equivalent of "greater than or equal to *<min>* and less than or equal to *<max>*").
- When specifying a range of time values, Synapse allows the use of both lower resolution values (e.g.,
  ``YYYY/MM/DD``) and wildcard values (e.g., ``YYYY/MM*``) for the minimum and/or maximum range values.
  In some cases, wildcard time syntax may provide a simpler and more intuitive means to specify some
  time ranges. For example ``inet:whois:rec:asof=2018*`` is equivalent to
  ``inet:whois:rec:asof*range=('2018/01/01', '2018/12/31 23:59:59.999')``. See the type-specific
  documentation for :ref:`type-time` types for a detailed discussion of these behaviors.
- When using keywords (such as ``now``) or relative values (such as ``-1 hour``) to specify a range of
  times, the first value in the range is calculated relative to the current time and the second value
  is calculated relative to the first value. 
- If you specify a range value that is nonsencical or exclusionary (such as ``( 47, 16 )``), Synapse
  will **not** generate an error and will simply fail to return results. (The expression is syntacticaly
  correct, but no value is both greater than 47 and less than 16).

.. _lift-set:

Lift by Set Membership (\*in=)
++++++++++++++++++++++++++++++

The set membership extended comparator (``*in=``) supports lifting nodes whose *<form> = <valu>* or
*<prop> = <pval>* matches any of a set of specified values. The comparator can be used with any type.

**Syntax:**

*<form>* [ **:** | **.** | **:_** *<prop>* ] ***in = (** *<set_1>* **,** *<set_2>* **,** ... **)**

*<interface>* **:** *<prop>* ***in = (** *<set_1>* **,** *<set_2>* **,** ... **)**

**Examples:**

*Lift organization names matching any of the specified values:*

.. storm-pre:: [ ou:name=fsb ou:name=gru ou:name=svr ]
.. storm-pre:: ou:name *in= ( fsb, gru, svr )
::
  
  ou:name *in= ( fsb, gru, svr )

*Lift all IPv4 addresses associated with any of the specified Autonomous System (AS) numbers:*

.. storm-pre:: [ (inet:asn=44477 :name='stark industries solutions ltd') (inet:asn=20473 :name=as-choopa) (inet:asn=9009 :name='m247 europe srl') ]
.. storm-pre:: inet:ipv4:asn *in= ( 9009, 20473, 44477 )
::
  
  inet:ipv4:asn *in= ( 9009, 20473, 44477 )

*Lift all tags (syn:tag nodes) whose final tag element matches any of the specified string values:*

.. storm-pre:: [ syn:tag=rep.talos.plugx syn:tag=rep.eset.korplug syn:tag=rep.mandiant.sogu syn:tag=rep.alienvault.kaba ]
.. storm-pre:: syn:tag:base *in= ( plugx, korplug, sogu, kaba )
::
  
  syn:tag:base *in= ( plugx, korplug, sogu, kaba )


.. _lift-proximity:

Lift by Proximity (\*near=)
+++++++++++++++++++++++++++

The proximity extended comparator (``*near=``) supports lifting nodes by "nearness" to another node. Currently, ``*near=``
supports proximity based on geospatial location (i.e., nodes within a given radius of a specified latitude / longitude).

**Syntax:**

*<form>* **:** | **.** | **:_** *<prop>* ***near = ((** *<lat>* **,** *<long>* **),** *<radius>* **)**

**Examples:**

*Lift all locations (geo:place nodes) within 500 meters of the Russian Cryptographic Museum (where the coordinates 55.83069,37.59781 represent the Museum's location):*

.. storm-pre:: [ ( geo:place="*" :latlong="55.83088, 37.59962" :name="concern avtomatika" ) ]
.. storm-pre:: geo:place:latlong *near= ( (55.83069, 37.59781), 500m )
::
  
  geo:place:latlong *near= ( (55.83069, 37.59781), 500m )

**Usage Notes:**

- Radius can be specified in the following units. The terms recognized by Storm are listed in parentheses. For
  example, radius can be specified as 2km or '2 km' or '0.5 meters' or '6 feet' (distance expressions that
  contain spaces need to be enclosed in single or double quotes):
  
  - Kilometers (km / kilometer / kilometers)
  - Meters (m / meter / meters)
  - Centimeters (cm / centimeter / centimeters)
  - Millimeters (mm / millimeter / millimeters)
  - Miles (mile / miles)
  - Yards (yard / yards)
  - Feet (foot / feet)

- Radius values of less than 1 must be specified with a leading zero (e.g., 0.5km).
- The ``*near=`` comparator works for geospatial data by lifting nodes within a square bounding box centered at *<lat>,<long>*,
  then filters the nodes returned by ensuring that they are within the great-circle distance given by the *<radius>* argument.


.. _lift-by-arrays:

Lift by (Arrays) (\*[ ])
++++++++++++++++++++++++

Storm uses a special syntax to lift (or filter) by comparison with one or more elements of an :ref:`type-array` type. The syntax
consists of an asterisk ( ``*`` ) preceding a set of square brackets ( ``[ ]`` ), where the square brackets contain a comparison
operator and a value that can match one or more elements in the array. This allows users to match values in the array list
without needing to know the exact order or values of the array itself.

**Syntax:**

*<form>* **:** | **.** | **:_** *<prop>* **[** *<operator>* *<pval>* **]**

**Examples:**

*Lift the x509 certificates (crypto:x509:cert nodes) that reference FQDNs ending with ".xyz":*

.. storm-pre:: [crypto:x509:cert="*" :identities:fqdns=(woot.biz, woot.xyz)]
.. storm-pre:: crypto:x509:cert:identities:fqdns *[ = '*.xyz' ]
::
  
  crypto:x509:cert:identities:fqdns *[ = '*.xyz' ]

*Lift the MITRE ATT&CK groups whose names include the string 'bear':*

.. storm-pre:: [ (it:mitre:attack:group=G0035 :names=(berserk bear, crouching yeti, dragonfly, dymalloy, energetic bear, iron liberty, temp.isotope, tg-4192)) (it:mitre:attack:group=G0074 :names=(berserk bear, dragonfly 2.0, dymalloy, iron liberty)) ]
.. storm-pre:: it:mitre:attack:group:names *[ ~= bear ]
::
  
  it:mitre:attack:group:names *[ ~= bear ]

**Usage Notes:**

- The comparison operator used must be valid for lift operations for the type used in the array. For example,
  :ref:`type-inet-fqdn` suffix matching (i.e., ``crypto:x509:cert:identities:fqdns *[ = '*.com' ]``), can be used
  when lifting arrays consisting of domains, but the prefix operator ( ``^=`` ), which is only valid when
  **filtering** ``inet:fqdns``, cannot.
- The standard equals ( ``=`` ) operator can be used to filter nodes based on array properties, but the value
  specified must **exactly match** the **full** property value in question. For example:
  
  ``ou:org:names=( "the vertex project", "the vertex project llc", vertex )``

- See the :ref:`type-array` section of the :ref:`storm-ref-type-specific` document for additional details.


.. _tag-lifts:

Tag Lifts
---------

Tags in Synapse can represent observations or assessments. They are used to provide context to nodes (in the
form of "labels" applied to nodes) and to group related nodes.

Storm supports lifting nodes based on the tag(s) applied to the node, as well lifting based on tag timestamps,
tag properties, or tag property values.

The "hashtag" symbol ( ``#`` ) is used to specify a tag name when lifting by tag.

.. _lift-by-tag:

Lift by Tag
+++++++++++

A "lift by tag" operation lifts **all** nodes that have the specified tag.

**Syntax:**

**#** *<tag>*

**Examples:**

*Lift all nodes that ESET associates with Sednit:*

.. storm-pre:: [ inet:fqdn=kg-news.org inet:ipv4=92.114.92.125 +#rep.eset.sednit ]
.. storm-pre:: #rep.eset.sednit
::
  
  #rep.eset.sednit

*Lift all nodes associated with anonymized infrastructure:*

.. storm-pre:: [ (inet:fqdn=ca2.vpn.airdns.org +#cno.infra.anon.vpn) (inet:ipv4=104.244.73.193 +#cno.infra.anon.tor.exit) ]
.. storm-pre:: #cno.infra.anon
::
  
  #cno.infra.anon

.. TIP::
  
  Tags are hierarchical, and each tag element is its own tag; the tag ``#cno.infra.anon`` consists of the tags ``#cno``,
  ``#cno.infra``, and ``#cno.infra.anon``. Lifting nodes using a tag "higher up" in the tag hierarchy will lift all
  nodes with specified tag or any tag "lower down" in the hierarchy. In other words, lifting by ``#cno.infra.anon``
  will lift "anonymized" infrastructure, whether the infrastructure is a VPN (``#cno.infra.anon.vpn``), a TOR node
  (``#cno.infra.anon.tor``), or an anonymous proxy (``#cno.infra.anon.proxy``).

.. _lift-form-by-tag:

Lift Form by Tag
++++++++++++++++

Lift form by tag lifts only those nodes of the specified form that have a particular tag.

**Syntax:**

*<form>* **#** *<tag>*

**Examples:**

*Lift the FQDN nodes that ESET associates with Sednit:*

.. storm-pre:: [ inet:fqdn=kg-news.org inet:ipv4=92.114.92.125 +#rep.eset.sednit ]
.. storm-pre:: inet:fqdn#rep.eset.sednit
::
  
  inet:fqdn#rep.eset.sednit

*Lift the inet:ipv4 nodes associated with DNS sinkhole infrastructure:*

.. storm-pre:: [ inet:ipv4=134.209.227.14 +#cno.infra.dns.sink.hole ]
.. storm-pre:: inet:ipv4#cno.infra.dns.sink.hole
::
  
  inet:ipv4#cno.infra.dns.sink.hole

.. TIP::
  
  A "lift form by tag" operation is equivalent to a "lift and filter" operation that first lifts **all** nodes of the
  specified form, and then filters the results to **only** those nodes with the specified tag. This set of operations 
  is potentially resource-intensive and inefficient (why lift **all** nodes only to discard most of them?). Instead,
  Synapse specifically optimizes "lift form by tag" operations to **only** lift nodes that have the tag.
  
  In fact, if you specify a Storm query such as ``inet:fqdn +#rep.mandiant.apt1``, Synapse will execute the query
  as if you had specified the "lift form by tag" query ``inet:fqdn#rep.mandiant.apt1``. In other words, in some cases
  Synapse knows to "do what you mean" in order to process your queries more efficiently.

.. _lift-tag-timestamp:

Lift Using Tag Timestamps
+++++++++++++++++++++++++

A tag timestamp can be thought of as a specialized "property" of a tag that happens to be a date / time range
(interval). You can lift nodes based on tag timestamp values using any comparison operator supported by interval
(:ref:`type-ival` types). The time / interval extended operator ( ``@=`` ) is used most often, but equal to
( ``=`` ) can also be used to **exact** match the values in the interval.

See :ref:`lift-interval` for additional detail on the use of the ``@=`` operator.

**Syntax:**

[ *<form>* ] **#** *<tag>* **@=** *<time>* | **(** *<min_time>* **,** *<max_time>* **)**

*Lift any nodes that were associated with anonymous VPN infrastructure between December 1, 2023 and January 1, 2024:*

.. storm-pre:: [ (inet:fqdn=wazn.airservers.org +#cno.infra.anon.vpn=(2023/05/24 23:16:51.423, 2023/12/05 23:12:40.626)) (inet:ipv6=2607:9000:0:85:68a3:75b4:13ab:770a +#cno.infra.anon.vpn=(2023/08/15 00:12:15,2023/12/05 23:12:54) ) ]
.. storm-pre:: #cno.infra.anon.vpn @= ( 2023/12/01, 2024/01/01 )
::
  
  #cno.infra.anon.vpn @= ( 2023/12/01, 2024/01/01 )

*Lift the FQDNs that were owned / controlled by Threat Cluster 15 as of October 30, 2021:*

.. storm-pre:: [ inet:fqdn=ronthecat.com +#cno.threat.t15.own=(2020/09/12, 2022/09/12) ]
.. storm-pre:: inet:fqdn#cno.threat.t15.own @= 2021/10/30
::
  
  inet:fqdn#cno.threat.t15.own @= 2021/10/30

*Lift the IP addresses that were TOR exit nodes between April 1, 2023 and July 1, 2023:*

.. storm-pre:: [ ( inet:ipv4=185.29.8.215 +#cno.infra.anon.tor.exit=(2023/05/08 14:30:51, 2024/01/04 22:05:03) ) ( inet:ipv4=91.208.162.197 +#cno.infra.anon.tor.exit=(2023/03/14 15:00:25, 2023/09/12 15:35:57) ) ]
.. storm-pre:: inet:ipv4#cno.infra.anon.tor.exit @= ( 2023/04/01, 2023/07/01 )
::
  
  inet:ipv4#cno.infra.anon.tor.exit @= ( 2023/04/01, 2023/07/01 )

.. _lift-tag-prop:

Lift Using Tag Properties
+++++++++++++++++++++++++

:ref:`tag-properties` can be used to provide additional context to tags. Storm supports lifting nodes
whose tags have a specific tag property (regardless of the value of the property).

.. NOTE::
  
  In many cases, information previously recorded using a tag property is better suited to the use of
  an :ref:`gloss-extended-prop`.


**Syntax:**

[ *<form>* ] **#** *<tag>* **:** *<tagprop>*


*Lift any nodes with a ":risk" property reported by Symantec:*

.. storm-pre:: [ (inet:fqdn=woot.com +#rep.symantec:risk=87) (inet:ipv4=8.8.8.8 +#rep.domaintools:risk=42 ) ]
.. storm-pre:: #rep.symantec:risk
::
  
  #rep.symantec:risk
  
*Lift all FQDNs with a ":risk" property reported by Symantec:*

.. storm-pre:: [ (inet:fqdn=woot.com +#rep.symantec:risk=87) (inet:ipv4=8.8.8.8 +#rep.domaintools:risk=42 ) ]
.. storm-pre:: inet:fqdn#rep.symantec:risk
::
  
  inet:fqdn#rep.symantec:risk

.. NOTE::
  
  You must specify a tag associated with the tag property. It is not possible to lift nodes based on a particular
  tag property being present on **any** tag (e.g., Storm queries such as ``#:risk`` or ``inet:fqdn#:risk`` will
  generate ``BadSyntax`` errors).


.. _lift-tag-prop-value:

Lift Using Tag Property Values
++++++++++++++++++++++++++++++

Storm supports lifting nodes based on the value of a tag property (similar to lifting by the value of a node property).

You can lift nodes based on tag property values using any comparison operator supported by the property's :ref:`gloss-type`.
For example, if the tag property is defined as an integer (``int``) type, you can use any comparison operator supported
by integers.

The :ref:`lift-try` ( ``?=`` ) can optionally be used in place of the standard equal to operator ( ``=`` ) for tag
property values. Use of the try operator is generally not required for interactive Storm queries, but may be useful for
more complex Storm queries (such as automation or Storm-based ingest queries).

**Syntax:**

[ *<form>* ] **#** *<tag>* **:** *<tagprop>* *<operator>* *<pval>*


*Lift any nodes with a ":risk" property value of 100 as reported by ESET:*

.. storm-pre:: [ (inet:fqdn=woot.com +#rep.symantec:risk=87) (inet:ipv4=8.8.8.8 +#rep.domaintools:risk=42) (inet:fqdn=vertex.link +#rep.eset:risk=100) ]
.. storm-pre:: #rep.eset:risk = 100
::
  
  #rep.eset:risk = 100

*Lift all FQDNs with a ":risk" property value greater than 90 as reported by domaintools:*

.. storm-pre:: [ (inet:fqdn=woot.com +#rep.symantec:risk=87) (inet:ipv4=8.8.8.8 +#rep.domaintools:risk=42 ) (inet:fqdn=vertex.link +#rep.vertex:risk=100) ]
.. storm-pre:: inet:fqdn#rep.domaintools:risk > 90
::
  
  inet:fqdn#rep.domaintools:risk > 90

*Lift all FQDNs with a ":risk" property with a value between 45 and 70 as reported by Symantec:*

.. storm-pre:: [ (inet:fqdn=woot.com +#rep.symantec:risk=87) (inet:ipv4=8.8.8.8 +#rep.domaintools:risk=42 ) ]
.. storm-pre:: inet:fqdn#rep.symantec:risk *range= ( 45, 70 )
::
  
  inet:fqdn#rep.symantec:risk *range= ( 45, 70 )


.. _lift-tag-recursive:

Recursive Tag Lift (##)
+++++++++++++++++++++++

Tags can be applied to ``syn:tag`` nodes to record additional information about the the observation represented by
the ``syn:tag`` node itself. In other words, tags (labels) can be used to provide additional context about tags
(``syn:tag`` nodes).

The ability to "tag the tags" can be used to represent certain types of analytical relationships. For example:

- ``syn:tag`` nodes representing threat groups can be tagged to indicate their assessed country of origin.
- ``syn:tag`` nodes representing malware or tools can be tagged with their assessed availability (e.g., public,
  private, private but shared, etc.)

A recursive tag lift retrieves all nodes with the specified tag. If the results include any ``syn:tag`` nodes,
the recursive lift will also lift any nodes with those tags. The process continues until no more ``syn:tag``
nodes are returned.

The final result set returned by a recursive tag lift includes all of the nodes that were lifted recursively,
but will **not** include any lifted ``syn:tag`` nodes themselves.

The "double hashtag" symbol ( ``##`` ) is used to specify a recursive tag lift.

**Syntax:**

**##** *<tag>*

**Example:**

You are using "availability" tags to show the general availability of malware or tools reported by Mandiant.
You add the appropriate "availability" tag to the ``syn:tag`` node that represents the associated malware.
For example, you apply the tag ``#rep.mandiant.avail.public`` to the node ``syn:tag=rep.mandiant.gh0st``
because Mandiant reported that the source code for the Gh0st backdoor is publicly available.

*Lift all the nodes (e.g., indicators of compromise) associated with any malware family or tool that Mandiant reports is publicly available:*

.. storm-pre:: [ ( syn:tag=rep.mandiant.beacon syn:tag=rep.mandiant.gh0st +#rep.mandiant.avail.public ) ( hash:md5=1844370fa7dac0e99779000f8f0b2f4e inet:fqdn=zomerax.top +#rep.mandiant.beacon ) ( inet:fqdn=iphone.vizvaz.com +#rep.mandiant.gh0st ) ] 
.. storm-pre:: ##rep.mandiant.avail.public
::

  ##rep.mandiant.avail.public

The query above will:

- Lift all nodes tagged ``#rep.mandiant.avail.public``, such as ``syn:tag`` nodes for tools or malware families
  that Mandiant assesses are publicly available (e.g., ``syn:tag=rep.mandiant.gh0st`` or ``syn:tag=rep.mandiant.beacon``).
- Lift any nodes tagged with those tags (e.g., ``#rep.mandiant.gh0st`` or ``#rep.mandiant.beacon``). This would
  typically include IOCs such as hashes, FQDNs, IPv4s, URLs, etc.
- If any nodes tagged with the additional tags (``#rep.mandiant.gh0st``, etc.) are ``syn:tag`` nodes, repeat the
  process, continuing until no more ``syn:tag`` nodes are lifted.
- Return the recursively lifted set of nodes (excluding any ``syn:tag`` nodes).

.. NOTE::
  
  "Tag the tags" is one approach to provide context to things that tags represent and may be suitable for some
  use cases. However, the Synapse data model now includes **forms** to represent objects or concepts that are
  commonly associated with tags, and that can be linked to their associated tag via a ``:tag`` secondary
  property. For example, a ``risk:tool:software`` node can represent Mandiant's reporting on Gh0st malware,
  with a ``:tag`` property that could be set to ``rep.mandiant.gh0st``. The node can be used to record
  additional context about Mandiant's Gh0st, including things like availability, alternate names used in
  reporting, and so on. In short, using a form with secondary properties to provide "context" (that is still
  linked to an associated tag) gives you greater flexibility to record that context and simplifies lifting,
  filtering, and pivoting across similar nodes.
  
  See :ref:`analytical-tags-asnodes` for a brief discussion of this concept, or the `User Guide`_ for the
  `Vertex-Threat-Intel`_ Power-Up (in particular, the `Threat Intel Model`_ section) for additional examples.


.. _lift-reverse:

"reverse" Keyword
-----------------

Synapse indexes property values so that data (nodes) can be lifted (retrieved) and returned quickly. By default,
lift results are returned in lexical order (i.e., sorted in ascending order), based on the property specified in
the lift (primary, secondary, universal, or extended) and the way the property is indexed.

The ``reverse`` keyword can be used to return the specified nodes in reverse lexical order (i.e., sorted in descending
order). To perform a "reverse" lift, specify the ``reverse`` keyword and enclose the lift operation in parentheses.

A "reverse" lift can be followed by additional Storm operations (pivots, filters, commands) just like a "normal" lift.

.. TIP::
  
  When using the ``reverse`` keyword to lift by secondary property value using an :ref:`interface` name, Synapse
  performs the lifts for each form in parallel, and yields the results in descending order. For example, the following
  query will return all nodes of all forms that inherit the ``it:host:activity`` interface that have a ``:time``
  value greater than or equal to 2024/02/01, sorted in descending order (most recent first):
  
  ::
    
    reverse (it:host:activity:time >= 2024/02/01)


**Syntax:**

**reverse (** *<lift>* **)**


**Examples:**

*Lift inet:ipv4 nodes with a :loc property (sorted descending based on the :loc property value):*

.. storm-pre:: [ (inet:ipv4=197.155.229.194 :loc=zw.ha.harare) (inet:ipv4=41.221.147.14 :loc=zw) (inet:ipv4=41.164.23.42 :loc=za.wc.worcester) (inet:ipv4=155.254.9.3 :loc='us.mt.three forks') (inet:ipv4=102.64.66.222 :loc='tz.02.dar es salaam') ]
.. storm-cli:: reverse ( inet:ipv4:loc )


*Lift five inet:ipv4 nodes (sorted descending based on the integer value of the inet:ipv4 primary property):*

.. storm-pre:: [ inet:ipv4=255.255.255.255 inet:ipv4=223.159.33.195 inet:ipv4=198.42.76.23 inet:ipv4=52.16.48.7 inet:ipv4=40.250.10.120 inet:ipv4=12.163.57.22 ]
.. storm-cli:: reverse ( inet:ipv4 ) | limit 5


*Lift the five most recently-created inet:email nodes (sorted descending by the .created property value):*

.. storm-pre:: [ inet:email=praveen.s@hsrfunke.com inet:email=alhossani@adnoc.ae inet:email=20231128124623.11d85d83ed11a341@adnoc.ae inet:email=support@hammer-software.com inet:email=alex.gronholm@nextday.fi inet:email=dholth@fastmail.fm inet:email=illia.volochii@gmail.com ]
.. storm-cli:: reverse ( inet:email.created ) | limit 5

.. NOTE::
  
  In some cases, Synapse uses specialized indexing to optimize specific Storm operations (such as the
  ability to lift forms by tag) or to make it easier to work with certain types of data (type-specific
  behavior). For example, FQDN strings (``inet:fqdn`` types) are reversed before being indexed.
  
  Where specialized indexing is used, both "normal" and "reverse" lifts still return nodes in lexical
  or reverse lexical order, respectively. However, the "sort order" of the results may not be apparent,
  based on the custom criteria used to index the nodes.
  
  See the :ref:`storm-ref-type-specific` section for details on some type-specific behaviors, including
  any custom indexing for the listed types.


.. _lift-try:

"Try" Operator
--------------

The Storm "try" operator ( ``?=`` ) can be used in lift operations as an alternative to the equal to ( ``=`` )
comparison operator.

Properties in Synapse are subject to :ref:`gloss-type-enforce`. Type enforcement makes a reasonable attempt to ensure
that a value "makes sense" for the property in question - that the value you specify for an ``inet:ipv4`` node looks
reasonably like an IPv4 address (and not an FQDN or URL). If you try to lift a set of nodes using a property value that
does not pass Synapse's type enforcement validation, Synapse will generate an error. The error will cause the currently
executing Storm query to halt and stop processing. For example, the following query halts based on the bad value
(``evil.com``) provided for an ``inet:ipv4`` node:

.. storm-pre:: [ inet:ipv4=8.8.8.8 ]
.. storm-fail:: true
.. storm-cli:: inet:ipv4 = evil.com inet:ipv4 = 8.8.8.8
.. storm-fail:: false

When using the try operator ( ``?=`` ), Synapse will to attempt (try) to lift the node(s) using the specified property
value. However, instead of halting in the event of an error, Synapse will ignore the error (silently fail on that
specific lift operation) but continue processing the rest of the Storm query. Using the try operator below, Synapse
ignores the bad value for the first IPv4 address but returns the second one:

.. storm-cli:: inet:ipv4 ?= evil.com inet:ipv4 ?= 8.8.8.8

The try operator is generally not necessary for interactive Storm queries. However, it can be very useful for more
complex Storm queries or Storm-based automation (see :ref:`storm-ref-automation`), where a single badly-formatted
lift operation (potentially relying on input or data from a third-party data source) could cause the query to fail
during execution.

.. TIP::
  
  The try operator can also be used when lifting using an :ref:`interface`.


**Syntax:**

*<form>* **?=** *<valu>*

*<form>* **:** *<prop>* **?=** *<pval>*

*<interface>* **:** *<prop>* **?=** *<pval>*

.. TIP::
  
  See the :ref:`type-array` section of the :ref:`storm-ref-type-specific` for specialized "try" syntax when
  working with array properties.

**Examples:**

*Try to lift the MD5 node 174cc541c8d9e1accef73025293923a6:*

.. storm-pre:: [ hash:md5 = 174cc541c8d9e1accef73025293923a6 ]
.. storm-cli::  hash:md5 ?= 174cc541c8d9e1accef73025293923a6


*Try to lift the DNS A nodes whose :ipv4 property is 192.168.0.100:*

.. storm-pre:: [ inet:dns:a=(woot.com,192.168.0.100) ]
.. storm-cli:: inet:dns:a:ipv4 ?= 192.168.0.100


*Try to lift the email address nodes for ron@vertex.link and ozzie@vertex.link:*

Notice that despite the first email address being entered incorrectly, the error message is suppressed, and the query executes to completion.

.. storm-pre:: [ inet:email=ron@vertex.link inet:email=ozzie@vertex.link ]
.. storm-cli:: inet:email ?= 'ron[at]vertex.link' inet:email ?= 'ozzie@vertex.link'

*Try to lift any Microsoft Office document metadata nodes (all nodes of all forms that inherit the file:mime:msoffice interface) whose author (:author property) is 'Rafael Moon':*

.. storm-pre:: [ (file:mime:msdoc=* :author='Rafael Moon') (file:mime:msdoc=* :author='Tran Duy Lin') (file:mime:msxls=* :author='Windows User') ]
.. storm-pre:: file:mime:msoffice:author ?= 'Rafael Moon'

::
  
  file:mime:msoffice:author ?= 'Rafael Moon'


.. _Synapse-VirusTotal: https://synapse.docs.vertex.link/projects/rapid-powerups/en/latest/storm-packages/synapse-virustotal/index.html
.. _User Guide: https://synapse.docs.vertex.link/projects/rapid-powerups/en/latest/storm-packages/vertex-threat-intel/ugoverview.html
.. _Vertex-Threat-Intel: https://synapse.docs.vertex.link/projects/rapid-powerups/en/latest/storm-packages/vertex-threat-intel/index.html
.. _Threat Intel Model: https://synapse.docs.vertex.link/projects/rapid-powerups/en/latest/storm-packages/vertex-threat-intel/ugmodel.html

