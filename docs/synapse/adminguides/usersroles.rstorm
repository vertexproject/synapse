.. highlight:: none

.. storm-cortex:: default

.. _admin_create_users_roles:

Create and Manage Users and Roles
#################################

A :ref:`gloss-user` account is required to authenticate to and access Synapse. Having "a Synapse account"
effectively means having an account in the Cortex.

In Synapse, a :ref:`gloss-role` can be used to "group" users with similar responsibilities (and related
permissions requirements). You can **grant** or **revoke** one or more roles from a user.

You grant (or deny) **permissions** to both users and roles by assigning **rules** that specify those
permissions (see :ref:`admin_perms`).

Synapse includes the following built-in users and roles:

- **Root** user. The **root** account has :ref:`admin_bkd_admin` privileges in the Cortex. The **admin**
  status of the root account cannot be revoked, and the account cannot be locked / disabled.
- **All** role. The **all** role has **read** access to the Cortex (specifically, to any view with
  ``worldreadable=true``, which includes the **default** view). All user accounts are automatically granted
  the **all** role (are part of the **all** "group"); this role cannot be revoked.
  
For information on creating and managing users and roles with the commercial Optic UI, see the Synapse
`UI documentation`_.

.. TIP::
  
  The set of Storm :ref:`storm-auth` commands are collectively used to manage users, roles, and permissions
  from Storm.


.. NOTE::
  
  The descriptions and examples below assume that you have deployed Synapse using native Synapse management
  and authentication of users, roles, and permissions.
  
  The :ref:`devopsguide` includes information on provisioning **initial** users when Synapse is first deployed
  (see :ref:`devops-task-users`). This guide focuses on ongoing management of users and roles once Synapse
  is in production.


.. _admin_users:

Working with Users
==================

Storm ``auth.user.*`` commands are used to work with users in Synapse.


.. _admin_user_add:

Add a User
----------

The :ref:`storm-auth-user-add` command creates a new user. Newly created users do not have any permissions
(other than those associated with the built-in **all** role). 

**Example:**

Add the user "Ron" with email address ``ronthecat@vertex.link``:

.. storm-cli:: auth.user.add ron --email ronthecat@vertex.link

.. TIP::
  
  Users are represented by a unique 128-bit identifier (iden). This allows you to modify information about
  the user account without affecting the underlying identifier or any associated roles or permissions.

.. _admin_user_show:

Display a User
--------------

The :ref:`storm-auth-user-show` command displays information about a user, including any assigned roles or
rules (permissions) and their order.

**Example:**

Display information for user "Ron":

.. storm-cli:: auth.user.show ron


.. _admin_user_mod:

Modify a User
-------------

The :ref:`storm-auth-user-mod` command modifies a user account. Use the command to:

- Change the username or the email address associated with the user.
- Set / reset the user's password.
- Assign (or remove) **admin** status for the user.
- Lock (or unlock) the account.

**Examples:**

Update the email address for user "Ron":

.. storm-cli:: auth.user.mod ron --email ron@vertex.link

Assign **admin** status to the user "ron_admin":

.. storm-pre:: auth.user.add ron_admin
.. storm-cli:: auth.user.mod ron_admin --admin $lib.true

Remove **admin** statuus from user "ron_admin":

.. storm-cli:: auth.user.mod ron_admin --admin $lib.false

Lock the user account "ron_admin":

.. storm-cli:: auth.user.mod ron_admin --locked $lib.true

.. WARNING::
  
  We strongly encourage you to **lock** unused or revoked accounts (instead of deleteing them). Changes
  made to the Synapse data store are linked to the iden of the user who made them. Deleting an account
  will prevent you from determining the user (username) associated with an iden responsible for those
  changes.
  
  User accounts can be deleted using the :ref:`stormlibs-lib-auth-users-del` library, but there is no
  equivalent Storm command.


.. _admin_user_list:

List All Users
--------------

The :ref:`storm-auth-user-list` command lists all users in the Cortex.

**Example:**

List all users:

.. storm-cli:: auth.user.list
  


.. _admin_roles:

Working with Roles
==================

New roles can be added from the Storm CLI with the :ref:`storm-auth-role-add` command.

.. NOTE::
  
  Newly created roles do not have any permissions or associated user accounts.


**Example:**

Add the new role "cattribution analyst":

.. storm-cli:: auth.role.add "cattribution analyst"


.. TIP::
  
  Roles are represented by a unique 128-bit identifier (iden). You can later change information about the role
  (such as the role name) without affecting the underlying role or any associated permissions or users.


.. _admin_grant_roles:

Grant or Revoke Roles
=====================

**Granting** a role to a user allows the user to inherit the role's permissions. **Revoking** a role removes the
associated permissions from the user. It is not possible to grant a role to another role (i.e., roles cannot be
nested).

Roles can be granted or revoked using the :ref:`storm-auth-user-grant` and :ref:`storm-auth-user-revoke` commands.

**Examples:**

Grant the role "cattribution analyst" to the user "ron":

.. storm-cli:: auth.user.grant ron "cattribution analyst"

Revoke the role "a-cat-emic researcher" from user "ron":

.. storm-pre:: auth.role.add "a-cat-emic researcher"
.. storm-pre:: auth.user.grant ron "a-cat-emic researcher"

.. storm-cli:: auth.user.revoke ron "a-cat-emic researcher"


.. NOTE::
  
  The order in which roles are granted to a user matters; when determining whether a user has permission to
  perform an action, the permissions for each of the user's roles are checked in sequence.
  
  Each role granted to a user is added to the **end** of the set of roles. To "reorder" roles, you must revoke
  them and grant them in the desired order (unless using the commercial Synapse UI, which allows drag-and-drop
  reordering). See :ref:`admin_perms_background` for additional detail on permissions and :ref:`admin_bkd_precedence`.


.. _UI documentation: https://synapse.docs.vertex.link/projects/optic/en/latest/index.html

  
