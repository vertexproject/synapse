.. highlight:: none

.. storm-cortex:: default

.. _admin_perms:

Assigning and Managing Permissions
##################################

Synapse provides a highly flexible system of role-based access control (RBAC). **Rules** are used to assign
permissions to users and / or roles, with a defined order of precedence for how permissions are evaluated.

Permissions can be assigned very broadly, such as allowing a user (or role) to create / modify / delete any node.
Permissions can also be very fine-grained, restricting users so that they can **only** create specific nodes, set
specific properties, create specific edges, or apply specific tags.

Before describing how to set and manage permissions, it is helpful to provide some terminology and an overview
of how permissions are used within Synapse.


..  _admin_perms_background:

Permissions Background
======================

.. _admin_bkd_services:

Services
--------

Synapse is designed as a modular set of **services.** A service can be thought of as a container used to run an
application. **Synapse services** make up the core Synapse architecture, and include the :ref:`gloss-cortex`
(data store), :ref:`gloss-axon` (file storage), and the commercial :ref:`gloss-optic` UI. Services handle user
authentication and authorization.

From a Synapse Admin perspective, you will primarily be concerned with managing user accounts and permissions to
(and within) the Synapse **Cortex.**

.. TIP::
  
  When we talk about "Synapse users" or "permissions to Synapse" we are generally referring to user accounts and
  roles in a Cortex, and permissions to a Cortex and its associated objects.
  
  Depending on your Synapse deployment, you may need to grant or manage permissions to additional Synapse services.
  See the sections on :ref:`admin_axon_perms`, :ref:`admin_optic_perms`, and :ref:`admin_power_perms` for details.

.. _admin_bkd_cortex:

Cortex
------

The **Cortex** is Synapse's primary data store. Users and roles are created and managed in the Cortex, and most
things for which users will need permissions apply to the Cortex and to the views, layers, and data (nodes, tags,
etc.) that reside there.

.. _admin_bkd_authgate:

Auth Gate
---------

An **Auth Gate** (or "gate", informally) is an object within a service (such as a Cortex) that may have its own
set of permissions. A :ref:`gloss-view` and a :ref:`gloss-layer` are both common examples of Auth Gates.

Auth Gates are represented by a 128-bit identifier (iden) that uniquely identifies the Auth Gate object itself.
They also have an associated type to specify the kind of Auth Gate object (e.g., "view"). Some Auth Gates also
support the use of "user friendly" names, though this is dependent on the type of Auth Gate and has no impact on
the underlying iden or associated permissions.

.. _admin_bkd_scope:

Scope
-----

**Scope** refers to the object to which a particular permission applies. For example, permissions granted on an
Auth Gate (such as a view) are scoped to (or **local** to) that Auth Gate. Permissions granted at the Cortex level
are **global** with respect to the Cortex.

Scope affects the order (precedence) in which permissions are evaluated.

.. _admin_bkd_permission:

Permission
----------

A **permission** is a string that is used to control access. For example:

``view.add``

Most permission strings use a dotted (hierarchical) format; specifying a permission higher up in the hierarchy
includes all permissions below it. For example, the permission ``view`` includes all of the following permissions:
``view.add``, ``view.del``, ``view.read``, and ``view.set``.

Permissions related to objects such as nodes or tags can optionally extend the permission string to be highly
specific, referencing particular forms, properties, tags/tag trees, or light edges. This allows you to set highly
granular permissions.

For example:

+-----------------------------------------------------------------+---------------------------------+
| **Description**                                                 | **Permission**                  |
+=================================================================+=================================+
| Perform **any** action on **any** kind of node                  |                                 |
|                                                                 | ``node``                        |
| (including deleting nodes and working with properties, tags,    |                                 |
|                                                                 |                                 |
| edges, and node data)                                           |                                 |
+-----------------------------------------------------------------+---------------------------------+
| **Add** any kind of node                                        |                                 |
|                                                                 | ``node.add``                    |
| (but not delete nodes, or work with properties, tags, edges, or |                                 |
|                                                                 |                                 |
| node data)                                                      |                                 |
+-----------------------------------------------------------------+---------------------------------+
| **Only** add ``inet:ipv4`` nodes                                |                                 |
|                                                                 | ``node.add.inet:ipv4``          |
| (but not set properties, or work with tags or edges)            |                                 |
+-----------------------------------------------------------------+---------------------------------+
| **Only** add (set) the ``:asn`` property of ``inet:ipv4`` nodes |                                 |
|                                                                 | ``node.prop.set.inet:ipv4:asn`` |
| (but not create nodes or work with other properties, tags,      |                                 |
|                                                                 |                                 |
| edges, etc.)                                                    |                                 |
+-----------------------------------------------------------------+---------------------------------+
| Add or remove **any** tag                                       |                                 |
|                                                                 | ``node.tag``                    |
| (Note that adding/removing tags may require the ability to      |                                 |
|                                                                 |                                 |
| create ``syn:tag`` nodes, unless those nodes already exist.)    |                                 |
+-----------------------------------------------------------------+---------------------------------+
| **Only** add and remove tags in the "mytag" tag tree            | ``node.tag.add.mytag``          |
|                                                                 | ``node.tag.del.mytag``          |
+-----------------------------------------------------------------+---------------------------------+
| Add or remove **any** edge                                      |                                 |
|                                                                 | ``node.edge``                   |
| (Note that adding or removing edges allows creating edges       |                                 |
|                                                                 |                                 |
| between **any** nodes; there are no model constraints on the    |                                 |
|                                                                 |                                 |
| kinds of nodes that can be joined. It also allows the creation  |                                 |
|                                                                 |                                 |
| of new / arbitrarily named edges.)                              |                                 |
+-----------------------------------------------------------------+---------------------------------+
| **Only** add edges                                              | ``node.edge.add``               |
|                                                                 |                                 |
+-----------------------------------------------------------------+---------------------------------+
| **Only** add ``refs`` edges                                     | ``node.edge.add.refs``          |
|                                                                 |                                 |
+-----------------------------------------------------------------+---------------------------------+

.. TIP::
  
  Granular permissions may be useful for organizations with specialized users or teams, where certain
  individuals are responsible for specific types of analysis (e.g., strategic analysis vs. tactical
  threat tracking) and should be the only users authorized to create, link, and tag certain types of data.
  
  Granular permissions can also be used to differentiate between senior and junior roles; for example,
  only senior analysts may be allowed to apply tags representing certain assessments (such as attribution).

.. _admin_bkd_rule:

Rule
----

A **rule** is used to grant (or prohibit) a specific permission. Rules are evaluated in a defined order
of precedence.

When you specify a rule, there is an implicit **allow** directive; a permission string by itself
indicates the permission is allowed/true:

``view.add``

To use a rule to **deny** a permission, use the "not" or "bang" symbol ( ``!`` ) to indicate the permission
is denied/false:

``!node.tag.add.mytag``


.. _admin_bkd_precedence:

Precedence
----------

**Rules** in Synapse are evaluated in order of **precedence.** A requested action will be allowed (or
denied) based on the **first matching rule** found for the action. If no matching rule is found, the
action is **denied.**

Generally speaking, rules are evaluated from "most specific" to "least specific". Rules are evaluated
in the following order:

- **User** rules at the **local** (i.e., Auth Gate) level.
- **Role** rules at the **local** level.
- **User** rules at the **global** (i.e., Cortex) level.
- **Role** rules at the **global** level.

**Roles** (granted to a user) and **rules** (assigned to a user or role) are **also ordered:**

- When granting roles to a user, each new role is added to the **end** of the list of roles.
- When assigning rules to a role or user, each new rule is added to the **end** of the list of rules.

Rules and roles are evaluated in the following order:

- **User rules** are evaluated in order from first to last.
- Each **role** granted to a user is evaluated in order from first to last.
- For each role, the **role's rules** are evaluated in order from first to last.

This means that the same rules, applied and evaluated in a different order, will give different results.
As a simple example:

These rules will **allow** the creation of ``file:bytes`` nodes, but no other nodes:

::

  node.add.file:bytes
  !node.add

The same rules in the opposite order will **disallow** the creation of **any** nodes:

::
  
  !node.add
  node.add.file:bytes


.. _admin_bkd_admin:

Admin
-----

Admin status allows a user to **bypass all permissions checks** for the **scope** where the user is
admin.

A Synapse (Cortex) admin user can bypass all Cortex permissions checks (can "do anything" within the
Cortex); a user who is admin for a view that they fork can bypass all permissions checks ("do anything")
within that view.

.. NOTE::
  
  It is not possible to assign **admin** privileges to a role.


.. _admin_bkd_easyperms:

Easy Permissions
----------------

Easy permissions ("easy perms" for short) is a mechanism that simplifies granting common sets of permissions
to users or roles for a particular object. Where easy perms are used, you can specify four levels of access:
**deny, read, edit,** and **admin.** These access levels have corresponding integer values:

- Deny = 0
- Read = 1
- Edit = 2
- Admin = 3

Easy perms apply to specific objects. Where easy perms are available, the following conventions apply:

- The user who creates the object has **admin** privileges for that object.
- **Admin** privileges include the ability to grant permissions to others (including explicitly denying
  access).
- Admin privileges are required to **delete** the object (i.e., **edit** permissions do not include **delete**).

.. TIP::
  
  `$lib.macro.grant`_ library is an example of where easy permissions can be used to assign permissions.

.. _admin_bkd_views_layers:

Views and Layers
----------------

Data in a Cortex is stored in one or more **layers** (see :ref:`gloss-layer`). The data that a user or
a role can see is defined by a :ref:`gloss-view` that is composed of one or more ordered layers. (A
standard installation of Synapse consists of the default view, which contains one layer.)

The ability to see (read) data in a view is "all or nothing" - you cannot allow users to see some nodes in
a view but not others. If you need to segregate data (based on sensitivity or other criteria), you can use
multiple layers to do this. The layers can be composed into different views, allowing different users to see
(read) only the data in the layer(s) they should have access to.

Views act as a **read** boundary for the data a user or role can **see.** Granting the ``view.read`` permission
on a view allows users to see (read) data in any of the view's layers; you do not need to explicitly grant
"read" access to the individual layers themselves.

Layers act as a **write** boundary for the data a user or role can **modify** (create / edit / delete). In
normal circumstances, only the top layer in a view is writable. The ability to write data **to** a layer is
controlled by the various ``node.*`` permissions, which specify the forms / properties / tags / light edges a
user or role can work with (create / modify / delete). Permissions to modify data must be assigned at the
appropriate **layer.**


.. _admin_assign_perms:

Assign Permissions
==================

You assign (allow or deny) permissions in Synapse by adding rules to (or removing rules from) roles or users.
Recall that **order matters** when adding rules (see :ref:`admin_bkd_precedence`).

From a Synapse Admin perspective, managing permissions within Synapse commonly involves:

- Assigning rules to users and roles within the Cortex.
- Assigning rules to users and roles for various Auth Gates (such as layers or views) if necessary.
- Assigning rules to users and roles to allow or deny access to additional services, such as an Axon or
  various Power-Ups.

Permissions in Synapse are managed using the Storm :ref:`storm-auth` commands.

In the commercial Optic UI, permissions can also be managed through the **Admin Tool** and through dialogs
associated with various objects (such as Views or Stories), in addition to the Storm commands.

.. TIP::
  
  If a user attempts an action that they do not have permissions to perform, Synapse will return an ``AuthDeny``
  error that lists the specific permission that is required.

.. NOTE::
  
  The descriptions and examples below assume that you have deployed Synapse using native Synapse management
  and authentication of users, roles, and permissions.


.. admin_default_perms:

Default Permissions
-------------------

Synapse includes the following default permissions:

- The built-in **root** user has **admin** access (``admin=true``) to the Cortex.
- The built-in **all** role has **read** access (``view.read``) to any view created with ``worldreadable=True``.
  This includes the **default** view.

Any additional permissions must be **explicitly granted** to users or roles. In all but a few edge cases,
Synapse assumes an implicit default ``deny all`` as the final rule evaluated when checking permissions.

.. NOTE::
  
  Edge cases where a specific permission assumes a **default allow** instead of a **default deny** are
  uncommon. They are highly use case-specific, and usually arise in cases where a **new** permission has been
  implemented. That is, an action that was not originally subject to a permissions check now has one (usually
  because of a need to explicitly **deny** that action to particular users or roles).
  
  If a previously unchecked action were added with "default deny", it would potentially break existing Synapse
  deployments by suddenly blocking an action that had been previously allowed (ungated). In these circumstances
  the new permission is given a "default allow" that can then be specifically denied if necessary.


.. admin_global_perms:

Global (Cortex) Permissions
---------------------------

Permissions in Synapse can be assigned at the global (Cortex) level, or to a specific Auth Gate (see
:ref:`admin_authgate_perms`). To assign permissions to an Auth Gate, you must specify its identifier (iden)
(i.e., using the ``--gate`` option to the appropriate Storm command) when adding the associated rule to a user
or role.

If you do not specify an Auth Gate, the permissions are **global** and apply to any / all instances within the
Cortex where a user or role has access. For example, the following Storm command:

::
  
  auth.role.addrule all node

...grants (allows) the ``node`` permission to the built-in **all** role. This allows **any** user (because all
users are granted the **all** role by default) to perform **any** action on **any** node in **any** layer that
is the topmost (writeable) layer in **any** view that the user can see.

Specifying rules at the global (Cortex) level may be sufficient for many basic Synapse deployments.

.. NOTE::
  
  Recall that **order matters** when adding rules; each rule is added to the end of the list of rules assigned
  to a user or role, and rules are evaluated in order of precedence. To reorder rules, you must remove and
  re-add them in the new order (unless using the commercial Synapse UI, which allows drag-and-drop reordering).

Assign Permissions
~~~~~~~~~~~~~~~~~~

Permissions rules (allow or deny) are assigned using the :ref:`storm-auth-user-addrule` and :ref:`storm-auth-role-addrule`
commands.

**Examples:**

Prevent the user "ron" from setting tag descriptions (setting the ``syn:tag:desc`` property):

.. storm-pre:: auth.user.add ron --email ronthecat@vertex.link
.. storm-cli:: auth.user.addrule ron "!node.prop.set.syn:tag:desc"

.. TIP::
  
  Deny rules specified with Storm must be enclosed in quotes (single or double) because they begin with
  a symbol ( ! ).


Allow the role "senior analysts" to add tags in threat attribution (``cno.threat``) tag tree:

.. storm-pre:: auth.role.add "senior analysts"
.. storm-cli:: auth.role.addrule "senior analysts" node.tag.add.cno.threat

Prevent the "all" role from deleting nodes:

.. storm-cli:: auth.role.addrule all "!node.del"

.. TIP::
  
  You can view information about a user or role (including associated roles and / or rules) with the
  :ref:`storm-auth-user-show` and :ref:`storm-auth-role-show` commands.


Revoke Permissions
~~~~~~~~~~~~~~~~~~

Permissions rules are revoked using the ``auth.user.delrule`` and ``auth.role.delrule`` commands.

**Examples:**

Revoke the rule that prevents user "ron" from setting tag descriptions:

.. storm-cli:: auth.user.delrule ron "!node.prop.set.syn:tag:desc"


Revoke the rule that allows "junior analysts" to apply tags in the ``cno.threat`` tag tree:

.. storm-pre:: auth.role.add "junior analysts"
.. storm-pre:: auth.role.addrule "junior analysts" node.tag.cno.threat

.. storm-cli:: auth.role.delrule "junior analysts" node.tag.cno.threat


.. _admin_authgate_perms:

Auth Gate Permissions
---------------------

To assign permissions for an Auth Gate, you use the same Storm commands used to assign global permissions, but
you must specify the Auth Gate's full identifier (iden) (using the ``--gate`` option) when adding or
removing the rule.

Obtain a Gate's Iden
~~~~~~~~~~~~~~~~~~~~

The Storm :ref:`storm-view` and :ref:`storm-layer` commands can be used to manage views and layers, respectively.
In particular, the following commands are useful for displaying all views or layers (including their idens), or
displaying a specific view or layer:

- :ref:`storm-view-list`
- :ref:`storm-view-get`
- :ref:`storm-layer-list`
- :ref:`storm-layer-get`

**Example:**

Display all views:

.. storm-cli:: view.list

Viewing a Gate's Permissions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``auth.gate.show`` command is used to display permissions information about a particular Auth Gate (e.g.,
a view or layer). You can provide the specific iden for an Auth Gate, or use the :ref:`stormlibs-lib-view-get` or
:ref:`stormlibs-lib-layer-get` to retrieve information for the current view or layer.

**Example:**

Display information for the current view:

.. storm-cli:: auth.gate.show $lib.view.get().iden

Display informatiton for the current layer:

.. storm-cli:: auth.gate.show $lib.layer.get().iden


.. _admin_axon_perms:

Axon Permissions
================

You must specifically grant users or roles permission to access (upload, check, or retrieve) files within a
storage Axon.

- See the :ref:`deploy_axon` section of the :ref:`deploymentguide` for information on Axon deployment.
- See the :ref:`devops-svc-axon` section of the :ref:`devopsguide` for information on Axon configuration,
  including a description of Axon permissions.


.. _admin_optic_perms:

Optic Permissions
=================

Commercial Synapse customers with the Optic UI may need to explicitly grant users or roles permission to some
UI tools (such as Spotlight).

- See the `Optic Deployment Guide`_ for information on Optic deployment.
- See the `Optic DevOps Guide`_ for information on Optic permissions and other features.


.. _admin_power_perms:

Power-Up Permissions
====================

Synapse **Power-Ups** have their own sets of permissions that must be granted to users or roles to allow them
to use the Power-Up and any associated Storm commands. Specific permissions are documented in the **Admin Guide**
section of the `Power-Up documentation`_ for the individual Power-Up.

.. TIP::
  
  While most Vertex-provided Power-Ups are part of the commercial Synapse offering, the following `Rapid Power-Ups`_
  are also available for use with the community (open source) version of Synapse:
  
  - `Synapse-MISP`_
  - `Synapse-MITRE-ATT&CK`_
  - `Synapse-TOR`_

.. _admin_runtime_perms:

Storm Runtime Permissions
=========================

When a user runs a Storm query interactively (e.g., in the Storm CLI or via the Optic UI), the query runs
**with the permissions of the user,** based on the applicable user and role permissions and the current scope
for the query.

There are a few cases of Storm runtime execution where permissions may require additional considerations.

Automation
----------

Synapse includes the ability to automate Storm-based tasks using triggers, cron jobs, and / or macros. These
elements are all impacted by permissions in various ways, including:

- who can create or manage automation (e.g., by default any user can create a macro, but explicit permissions
  are required to create triggers or cron jobs);
- who a given piece of automation runs as (e.g., macros run as the user who executes them, but triggers and
  cron jobs run as the user who created them).

Refer to the :ref:`storm-ref-automation` section of the :ref:`userguide` for a detailed discussion of
automation in Synapse (including permissions considerations).


Power-Ups
---------

Power-Ups implement Storm packages and Storm services to provide additional functionality to Synapse.
Power-Ups may be provided by The Vertex Project (as free or commercial offerings). Organizations may also
develop their own custom Power-Ups.

Power-Ups commonly install Storm commands to allow users to make use of the additional capabilities of the
Power-Up. In some cases, Power-Ups may need to access sensitive data (such as API keys or similar credentials)
or perform actions (e.g., in adding nodes or applying tags) that some users would not be allowed to perform
on their own.

Power-Ups can use privilege separation ("privsep") so that a limited subset of Power-Up capabilities can
run with elevated privileges if necessary, with the remainder of the code running as the user who calls
the Power-Up.

See the :ref:`dev_rapid_power_ups` section of the :ref:`devguide` for additional details.

.. NOTE::
  
  Synapse Admins are typically only responsible for ensuring that the appropriate users and roles can use
  or run individual Power-Ups (see :ref:`admin_power_perms`). While Synapse Admins should be aware of privilege
  separation within a Power-Up as a best practice, implementation of privilege separation is left to
  Power-Up developers.

.. _`$lib.macro.grant`: https://synapse.docs.vertex.link/en/latest/synapse/autodocs/stormtypes_libs.html#lib-macro-grant-name-scope-iden-level
.. _`Power-Up documentation`: https://synapse.docs.vertex.link/en/latest/synapse/power_ups.html
.. _`Rapid Power-Ups`: https://synapse.docs.vertex.link/en/latest/synapse/power_ups/rapid_power_ups.html
.. _`Optic Deployment Guide`: https://synapse.docs.vertex.link/projects/optic/en/latest/user_interface/deploymentguide.html
.. _`Optic DevOps Guide`: https://synapse.docs.vertex.link/projects/optic/en/latest/user_interface/devopsguide.html
.. _`Synapse-MISP`: https://synapse.docs.vertex.link/projects/rapid-powerups/en/latest/storm-packages/synapse-misp/index.html
.. _`Synapse-MITRE-ATT&CK`: https://synapse.docs.vertex.link/projects/rapid-powerups/en/latest/storm-packages/synapse-mitre-attack/index.html
.. _`Synapse-TOR`: https://synapse.docs.vertex.link/projects/rapid-powerups/en/latest/storm-packages/synapse-tor/index.html
